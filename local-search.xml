<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>MySQL免安装版使用</title>
    <link href="/2023/05/16/MySQL%E5%85%8D%E5%AE%89%E8%A3%85%E7%89%88%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/05/16/MySQL%E5%85%8D%E5%AE%89%E8%A3%85%E7%89%88%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="解压缩"><a href="#解压缩" class="headerlink" title="解压缩"></a>解压缩</h3><p>将下载到的文件解压缩到自己喜欢的位置，例如我自己的位置是<code>D:\\Program Files\\mysql-5.7.10-winx64</code></p><h3 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h3><p>右键计算机-&gt;属性-&gt;高级系统设置-&gt;环境变量；在系统变量里添加<code>MYSQL_HOME</code>环境变量，变量值为MySQL的根目录，例如我的是<code>D:\\Program Files\\mysql-5.7.10-winx64</code>（原路径有错，已更改，对受误导的网友表示抱歉。谢谢网友“庞大进”的提醒，2016.5.7）</p><p>找到<code>path</code>，选择编辑，在原有值末尾添加<code>;%MYSQL_HOME%\\bin</code></p><a id="more"></a><h3 id="添加配置文件"><a href="#添加配置文件" class="headerlink" title="添加配置文件"></a>添加配置文件</h3><p>在MySQL的安装目录（例如我的是<code>D:\\Program Files\\mysql-5.7.10-winx64</code>）下，建立新文本文件txt，并将其命名为my.ini（注意扩展名也要修改）。</p><p>双击打开该文件，并在其中添加内容如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[mysqld]</span><br><span class="hljs-attr">basedir</span>=D:\Program Files\mysql-<span class="hljs-number">5.7</span>.<span class="hljs-number">10</span>-winx64<br><span class="hljs-attr">datadir</span>=D:\\Program Files\\mysql-<span class="hljs-number">5.7</span>.<span class="hljs-number">10</span>-winx64\\data<br><span class="hljs-attr">port</span> = <span class="hljs-number">3306</span><br>——————<br><br><span class="hljs-section">[Client]</span><br><span class="hljs-attr">port</span> = <span class="hljs-number">3306</span><br><span class="hljs-section">[mysqld]</span><br><span class="hljs-attr">port</span> = <span class="hljs-number">3306</span><br><span class="hljs-attr">basedir</span>=E:\install_work\mysql<br><span class="hljs-attr">datadir</span>=E:\install_work\mysql\data<br><span class="hljs-attr">max_connections</span>=<span class="hljs-number">200</span><br><span class="hljs-attr">character-set-server</span>=utf8<br><span class="hljs-attr">default-storage-engine</span>=INNODB<br><span class="hljs-section">[mysql]</span><br><span class="hljs-attr">default-character-set</span>=utf8<br>——————<br></code></pre></td></tr></table></figure><p>保存后关闭</p><h3 id="初始化数据库"><a href="#初始化数据库" class="headerlink" title="初始化数据库"></a>初始化数据库</h3><p>以管理员自身份打开CMD执行以下命令（注意必须以管理员身份打开，否则报错）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysqld --initialize --user=mysql --console<br></code></pre></td></tr></table></figure><p>在控制台消息尾部会出现随机生成的初始密码，记下来（因为有特殊字符，很容易记错，最好把整个消息保存在记事本里）</p><p>如果上述命令运行不成功请用以下命令代替：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">%MYSQL_HOME%\bin\mysqld --initialize --user=mysql --console<br></code></pre></td></tr></table></figure><p>如果仍然不成功请检查第２步</p><p>将MySQL添加到系统服务</p><p>以管理员自身份打开CMD执行以下命令（注意必须以管理员身份打开，否则报错）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysqld --install MySQL<br>net start MySQL<br></code></pre></td></tr></table></figure><p>安装成功，则显示“服务已启动成功”</p><p>如果上述命令运行不成功，可以用以下命令代替：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">%MYSQL_HOME%\bin\mysqld --install MySQL<br>net start MySQL<br></code></pre></td></tr></table></figure><p>安装成功，则显示“服务已启动成功”</p><p>如果仍然不成功请检查第２步</p><h3 id="保护MySQL"><a href="#保护MySQL" class="headerlink" title="保护MySQL"></a>保护MySQL</h3><p>运行<code>mysql_secure_installation</code>脚本，该脚本执行一些与安全性相关的操作并设置MySQL根密码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo mysql_secure_installation<br></code></pre></td></tr></table></figure><p>将要求您配置<code>VALIDATE PASSWORD PLUGIN</code>，该工具用于测试MySQL用户密码的强度并提高安全性。密码验证策略分为三个级别：低，中和强。如果您不想设置验证密码插件，请按<code>ENTER</code>。</p><p>在下一个提示符下，将要求您为MySQL根用户设置密码。完成此操作后，脚本还将要求您删除匿名用户，限制root用户对本地计算机的访问，并删除测试数据库。您应该对所有问题回答“是”。</p><p><strong>欢迎关注微信公众号 ：</strong></p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006y8mN6gy1g7d3llw1nkj30b40b4wee.jpg" srcset="/img/loading.gif" alt="欢迎关注公众号" style="width: 100px" />]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
      <category>Windows</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【AI 绘画】Stable-Diffusion 通过骨架分析插件 ControlNet 来制作超有意境的图片</title>
    <link href="/2023/05/16/%E3%80%90AI-%E7%BB%98%E7%94%BB%E3%80%91Stable-Diffusion-%E9%80%9A%E8%BF%87%E9%AA%A8%E6%9E%B6%E5%88%86%E6%9E%90%E6%8F%92%E4%BB%B6-ControlNet-%E6%9D%A5%E5%88%B6%E4%BD%9C%E8%B6%85%E6%9C%89%E6%84%8F%E5%A2%83%E7%9A%84%E5%9B%BE%E7%89%87/"/>
    <url>/2023/05/16/%E3%80%90AI-%E7%BB%98%E7%94%BB%E3%80%91Stable-Diffusion-%E9%80%9A%E8%BF%87%E9%AA%A8%E6%9E%B6%E5%88%86%E6%9E%90%E6%8F%92%E4%BB%B6-ControlNet-%E6%9D%A5%E5%88%B6%E4%BD%9C%E8%B6%85%E6%9C%89%E6%84%8F%E5%A2%83%E7%9A%84%E5%9B%BE%E7%89%87/</url>
    
    <content type="html"><![CDATA[<p>烟花未曾闪耀的地方，也有仰望着的笑脸，生活沉重如此，仰望本身就是美的。</p><hr><blockquote><p>【AI 绘画】Stable-Diffusion 通过骨架分析插件 ControlNet 来制作超有意境的图片</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/alterem/picFB@master/uPic/2023/03/05/image-20230305215441759.png" srcset="/img/loading.gif" alt="image-20230305215441759"></p><h5 id="A-开始前的准备工作，你需要先安装必备的环境"><a href="#A-开始前的准备工作，你需要先安装必备的环境" class="headerlink" title="A. 开始前的准备工作，你需要先安装必备的环境"></a>A. 开始前的准备工作，你需要先安装必备的环境</h5><ol><li>安装 <a href="https://www.python.org/downloads/" target="_blank" rel="noopener" title="**Python**"><strong>Python</strong></a>, “Add Python to PATH”</li><li>安装 <a href="https://git-scm.com/download" target="_blank" rel="noopener" title="**git**"><strong>git</strong></a>.</li></ol><h5 id="B-正式开始安装的步骤："><a href="#B-正式开始安装的步骤：" class="headerlink" title="B. 正式开始安装的步骤："></a>B. 正式开始安装的步骤：</h5><h6 id="1-下载【Stable-Diffusion-webui】-Github-开源项目，【中文语言包】"><a href="#1-下载【Stable-Diffusion-webui】-Github-开源项目，【中文语言包】" class="headerlink" title="1. 下载【Stable-Diffusion-webui】 Github 开源项目，【中文语言包】"></a><strong>1.</strong> 下载【<a href="https://github.com/AUTOMATIC1111/stable-diffusion-webui" target="_blank" rel="noopener" title="**Stable-Diffusion-webui**"><strong>Stable-Diffusion-webui</strong></a>】 Github 开源项目，【<a href="https://github.com/VinsonLaro/stable-diffusion-webui-chinese" target="_blank" rel="noopener" title="**中文语言包**"><strong>中文语言包</strong></a>】</h6><h6 id="2-安装扩展"><a href="#2-安装扩展" class="headerlink" title="2. 安装扩展"></a><strong>2.</strong> <a href="https://github.com/Mikubill/sd-webui-controlnet.git" target="_blank" rel="noopener" title="**安装扩展**"><strong>安装扩展</strong></a></h6><h6 id="3-下载-【ControlNet-模型】选择里面的-control-sd15-openpose-pth，下载后放入-stable-diffusion-webui-extensions-sd-webui-controlnet-models-文件夹下"><a href="#3-下载-【ControlNet-模型】选择里面的-control-sd15-openpose-pth，下载后放入-stable-diffusion-webui-extensions-sd-webui-controlnet-models-文件夹下" class="headerlink" title="3. 下载 【ControlNet 模型】选择里面的 control_sd15_openpose.pth，下载后放入./stable-diffusion-webui/extensions/sd-webui-controlnet/models 文件夹下"></a><strong>3.</strong> 下载 【<a href="https://huggingface.co/lllyasviel/ControlNet/tree/main/models" target="_blank" rel="noopener" title="**ControlNet 模型**"><strong>ControlNet 模型</strong></a>】选择里面的 control_sd15_openpose.pth，下载后放入./stable-diffusion-webui/extensions/sd-webui-controlnet/models 文件夹下</h6><h6 id="4-重启进入-WebUi-选择-ControlNet-模型"><a href="#4-重启进入-WebUi-选择-ControlNet-模型" class="headerlink" title="4. 重启进入 WebUi 选择 ControlNet 模型"></a><strong>4.</strong> 重启进入 WebUi 选择 ControlNet 模型</h6><h6 id="5-载入训练好的模型：stablydiffuseds-26-也就是模型：StablyDiffused’s-Aesthetic-Mix"><a href="#5-载入训练好的模型：stablydiffuseds-26-也就是模型：StablyDiffused’s-Aesthetic-Mix" class="headerlink" title="5. 载入训练好的模型：stablydiffuseds_26 也就是模型：StablyDiffused’s Aesthetic Mix"></a><strong>5. 载入训练好的模型</strong>：stablydiffuseds_26 也就是模型：<a href="https://civitai.com/api/download/models/6266" target="_blank" rel="noopener" title="**StablyDiffused’s Aesthetic Mix**"><strong>StablyDiffused’s Aesthetic Mix</strong></a></h6><h6 id="6-载入图片进行骨架分析，并输入下面的正负关键词："><a href="#6-载入图片进行骨架分析，并输入下面的正负关键词：" class="headerlink" title="6. 载入图片进行骨架分析，并输入下面的正负关键词："></a><strong>6.</strong> 载入图片进行骨架分析，并输入下面的正负关键词：</h6><a id="more"></a><p>正面关键词：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">4 </span>girls,<span class="hljs-number">4</span> girls <span class="hljs-keyword">on</span> the beach,back <span class="hljs-keyword">to</span> the sea,White dress,beautiful white gauze skirt,bikini,intricate,elegant,highly detailed,digita painting,concept art,summer lights,queen,sunset,orange sky,pink nightgown,simple background,soft light&lt;lora:dalcefopainting_Lora300:<span class="hljs-number">1</span>&gt;<br></code></pre></td></tr></table></figure><p>负关键词：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">nude</span>,<span class="hljs-selector-tag">naked</span>,<span class="hljs-selector-tag">hands</span>,<span class="hljs-selector-tag">cartoon</span>,<span class="hljs-selector-tag">thick</span> <span class="hljs-selector-tag">strokes</span>,((disfigured)),((bad art)),((deformed)),((poorly drawn)),((extra limbs)),((close up)),((b&amp;w)),<span class="hljs-selector-tag">weird</span> <span class="hljs-selector-tag">colors</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/alterem/picFB@master/uPic/2023/03/05/image-20230305215606238.png" srcset="/img/loading.gif" alt="image-20230305215606238"></p><p>关键词大家可以根据自己的需要进行修改，最后生成即可</p><h5 id="C-当然还有更多的好玩的玩法"><a href="#C-当然还有更多的好玩的玩法" class="headerlink" title="C. 当然还有更多的好玩的玩法:"></a>C. <strong>当然还有更多的好玩的玩法:</strong></h5><p>比如这个【<a href="https://civitai.com/api/download/models/12378" target="_blank" rel="noopener" title="**国风模型**"><strong>国风模型</strong></a>】 和 【<a href="https://civitai.com/gallery/119364?modelId=10415&modelVersionId=12378&infinite=false&returnUrl=%2Fmodels%2F10415%2Fguofeng3" target="_blank" rel="noopener" title="**提示词**"><strong>提示词</strong></a>】</p><p> 正面提示词:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-number">1</span>girl, beautiful, realistic<br></code></pre></td></tr></table></figure><p> 负提示词：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">(((simple <span class="hljs-keyword">background))),monochrome </span>,lowres, <span class="hljs-keyword">bad </span>anatomy, <span class="hljs-keyword">bad </span>hands, text, error, missing fingers, <span class="hljs-keyword">extra </span><span class="hljs-keyword">digit, </span>fewer <span class="hljs-keyword">digits, </span>cropped, worst quality, low quality, <span class="hljs-keyword">normal </span>quality, <span class="hljs-keyword">jpeg </span>artifacts, signature, watermark, username, <span class="hljs-keyword">blurry, </span>lowres, <span class="hljs-keyword">bad </span>anatomy, <span class="hljs-keyword">bad </span>hands, text, error, <span class="hljs-keyword">extra </span><span class="hljs-keyword">digit, </span>fewer <span class="hljs-keyword">digits, </span>cropped, worst quality, low quality, <span class="hljs-keyword">normal </span>quality, <span class="hljs-keyword">jpeg </span>artifacts, signature, watermark, username, <span class="hljs-keyword">blurry, </span>ugly,pregnant,vore,duplicate,morbid,mut ilated,tran nsexual, hermaphrodite,long neck,mutated hands,poorly drawn hands,poorly drawn face,mutation,deformed,<span class="hljs-keyword">blurry,bad </span>anatomy,<span class="hljs-keyword">bad </span>proportions,malformed limbs,<span class="hljs-keyword">extra </span>limbs,<span class="hljs-keyword">cloned </span>face,<span class="hljs-keyword">disfigured,gross </span>proportions, (((missing arms))),(((missing legs))), (((<span class="hljs-keyword">extra </span>arms))),(((<span class="hljs-keyword">extra </span>legs))),pubic hair, plump,<span class="hljs-keyword">bad </span>legs,error legs,username,<span class="hljs-keyword">blurry,bad </span>feet<br></code></pre></td></tr></table></figure><p>输出结果样式</p><p><img src="https://cdn.jsdelivr.net/gh/alterem/picFB@master/uPic/2023/03/05/bzEoga.jpg" srcset="/img/loading.gif" alt="img2"></p><p><img src="https://cdn.jsdelivr.net/gh/alterem/picFB@master/uPic/2023/03/05/dEInqe.jpg" srcset="/img/loading.gif" alt="dEInqe"></p><p><img src="https://cdn.jsdelivr.net/gh/alterem/picFB@master/uPic/2023/03/05/Xknqo7.jpg" srcset="/img/loading.gif" alt="Xknqo7"></p><p>比如还有这个模型：<a href="https://civitai.com/api/download/models/7804" target="_blank" rel="noopener" title="**SamDoesArts (Sam Yang) Style LoRA**"><strong>SamDoesArts (Sam Yang) Style LoRA</strong></a></p><p>提示词：</p><p> 正面</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">sam yang, (dreamlikeart, redshift style, analog style:<span class="hljs-number">1.1</span>), (copeseethemald style:<span class="hljs-number">0.5</span>), (thepit bimbo, glossy), sexy, bimbo,portrait, <span class="hljs-number">1</span>girl, solo, ([Nina Dobrev|Emma Stone]:<span class="hljs-number">1.1</span>), closeup, extreme closeup, looking at viewer, symmetric, centered, pantsuit, business suit, elegant suit, white crop top shirt, shinny skin, oily skin, subsurface skin scattering, shiny skin, choker, earrings, eyelashes, eyeshadow, lips, lipstick, jewelry, makeup, nose, parted lips, navel, beautiful detailed blue eyes, redhead, realistic, photo-realistic, well-lit face, glowing face, face focus, see-through, (night:<span class="hljs-number">1.2</span>), dark, scary, dark city, alley, chased, danger, worried, afraid, stressed, building, street lights, detailed background, [(dust particle paint explosion:<span class="hljs-number">1.2</span>)::<span class="hljs-number">0.11</span>], (secret:<span class="hljs-number">0.8</span>), &lt;lora:samdoesartsSamYang_offsetRightFilesize:<span class="hljs-number">0.65</span>&gt;<br></code></pre></td></tr></table></figure><p> 反面：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">lowres</span>, low quality, doll, <span class="hljs-keyword">bad </span>anatomy, poorly drawn, ugly, maiden, virgin, malformed, deformed, masculine, manly, <span class="hljs-keyword">black </span>skin, asian, <span class="hljs-keyword">blurry, </span>out of focus, freckles, skin defects, skin <span class="hljs-keyword">marks, </span>long neck, anime, highlights, shadows,<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/alterem/picFB@master/uPic/2023/03/05/1ukud3.jpg" srcset="/img/loading.gif" alt="1ukud3"></p><p><strong>还有这个模型</strong>：<a href="https://huggingface.co/lysdowie/dalcefoV3Painting/tree/main" target="_blank" rel="noopener" title="**dalcefoV3Painting_dalcefoV3Painting**"><strong>dalcefoV3Painting_dalcefoV3Painting</strong></a></p><p> 正提示词</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-symbol">slora:</span>dalcefoPainting_LoRA300:<span class="hljs-number">1</span>&gt;dalcefo realistic,painting,portrait of a girl,full-<span class="hljs-keyword">body </span><span class="hljs-keyword">shot,collar,tattoo,luminous </span>design,pastel colours,ink drips,autumn lights,<span class="hljs-keyword">sharp </span>face,<span class="hljs-keyword">blue </span>eyes,<span class="hljs-keyword">sharp </span>eyes<br></code></pre></td></tr></table></figure><p> 负提示词：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">cartoon</span>,<span class="hljs-selector-tag">3d</span>,((disfigured)),((bad art)),((deformed)),((poorly draw)),((extra limbs)),((close up)),((b&amp;w)),<span class="hljs-selector-tag">weird</span> <span class="hljs-selector-tag">colors</span>,<span class="hljs-selector-tag">blurry</span>,(worst quality,low <span class="hljs-attribute">quality</span>:<span class="hljs-number">1.4</span>),(more than <span class="hljs-number">2</span> <span class="hljs-attribute">nipples</span>:<span class="hljs-number">1</span>-<span class="hljs-number">331</span>),(missing <span class="hljs-attribute">arms</span>:<span class="hljs-number">1</span>-<span class="hljs-number">331</span>),(extra<br><span class="hljs-attribute">legs</span>:<span class="hljs-number">1.331</span>),(fused <span class="hljs-attribute">fingers</span>:<span class="hljs-number">1.61051</span>),(too many <span class="hljs-attribute">fingers</span>:<span class="hljs-number">1.61051</span>),(<span class="hljs-attribute">mutilated</span>:<span class="hljs-number">1.21</span>),<span class="hljs-selector-tag">mutated</span> <span class="hljs-selector-tag">hands</span>,(poorly drawn <span class="hljs-attribute">hands</span>:<span class="hljs-number">1.331</span>),(unclear <span class="hljs-attribute">eyes</span>:<span class="hljs-number">1.331</span>),<span class="hljs-selector-tag">lowers</span>,<span class="hljs-selector-tag">bad</span> <span class="hljs-selector-tag">hands</span>,<span class="hljs-selector-tag">missing</span> <span class="hljs-selector-tag">fingers</span>,<span class="hljs-selector-tag">bad</span> <span class="hljs-selector-tag">hands</span><br></code></pre></td></tr></table></figure><p>就可以获得如下的输出结果：</p><p><img src="https://cdn.jsdelivr.net/gh/alterem/picFB@master/uPic/2023/03/05/gWIFRx.png" srcset="/img/loading.gif" alt="gWIFRx"></p><p><img src="https://cdn.jsdelivr.net/gh/alterem/picFB@master/uPic/2023/03/05/KRZycv.jpg" srcset="/img/loading.gif" alt="KRZycv"></p><p><strong>欢迎关注微信公众号 ：</strong></p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006y8mN6gy1g7d3llw1nkj30b40b4wee.jpg" srcset="/img/loading.gif" alt="欢迎关注公众号" style="width: 100px" />]]></content>
    
    
    <categories>
      
      <category>Stable-Diffusion</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Stable-Diffusion</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>聊聊MyBatis缓存机制</title>
    <link href="/2020/10/16/%E8%81%8A%E8%81%8AMyBatis%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/"/>
    <url>/2020/10/16/%E8%81%8A%E8%81%8AMyBatis%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>MyBatis是常见的Java数据库访问层框架。在日常工作中，开发人员多数情况下是使用MyBatis的默认缓存配置，但是MyBatis缓存机制有一些不足之处，在使用中容易引起脏数据，形成一些潜在的隐患。个人在业务开发中也处理过一些由于MyBatis缓存引发的开发问题，带着个人的兴趣，希望从应用及源码的角度为读者梳理MyBatis缓存机制。</p><p>本次分析中涉及到的代码和数据库表均放在GitHub上，地址： <a href="https://github.com/kailuncen/mybatis-cache-demo" target="_blank" rel="noopener">mybatis-cache-demo</a> 。</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p>本文按照以下顺序展开。</p><ul><li>一级缓存介绍及相关配置。</li><li>一级缓存工作流程及源码分析。</li><li>一级缓存总结。</li><li>二级缓存介绍及相关配置。</li><li>二级缓存源码分析。</li><li>二级缓存总结。</li><li>全文总结。</li></ul><h2 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h2><h3 id="一级缓存介绍"><a href="#一级缓存介绍" class="headerlink" title="一级缓存介绍"></a>一级缓存介绍</h3><p>在应用运行过程中，我们有可能在一次数据库会话中，执行多次查询条件完全相同的SQL，MyBatis提供了一级缓存的方案优化这部分场景，如果是相同的SQL语句，会优先命中一级缓存，避免直接对数据库进行查询，提高性能。具体执行过程如下图所示。</p><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/6e38df6a.jpg" srcset="/img/loading.gif" alt="img"></p><p>每个SqlSession中持有了Executor，每个Executor中有一个LocalCache。当用户发起查询时，MyBatis根据当前执行的语句生成<code>MappedStatement</code>，在Local Cache进行查询，如果缓存命中的话，直接返回结果给用户，如果缓存没有命中的话，查询数据库，结果写入<code>Local Cache</code>，最后返回结果给用户。具体实现类的类关系图如下图所示。</p><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/d76ec5fe.jpg" srcset="/img/loading.gif" alt="img"></p><h3 id="一级缓存配置"><a href="#一级缓存配置" class="headerlink" title="一级缓存配置"></a>一级缓存配置</h3><p>我们来看看如何使用MyBatis一级缓存。开发者只需在MyBatis的配置文件中，添加如下语句，就可以使用一级缓存。共有两个选项，<code>SESSION</code>或者<code>STATEMENT</code>，默认是<code>SESSION</code>级别，即在一个MyBatis会话中执行的所有语句，都会共享这一个缓存。一种是<code>STATEMENT</code>级别，可以理解为缓存只对当前执行的这一个<code>Statement</code>有效。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"localCacheScope"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"SESSION"</span>/&gt;</span><br></code></pre></td></tr></table></figure><h3 id="一级缓存实验"><a href="#一级缓存实验" class="headerlink" title="一级缓存实验"></a>一级缓存实验</h3><p>接下来通过实验，了解MyBatis一级缓存的效果，每个单元测试后都请恢复被修改的数据。</p><p>首先是创建示例表student，创建对应的POJO类和增改的方法，具体可以在entity包和mapper包中查看。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-string">`student`</span> (<br>  <span class="hljs-string">`id`</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> AUTO_INCREMENT,<br>  <span class="hljs-string">`name`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">200</span>) <span class="hljs-keyword">COLLATE</span> utf8_bin <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,<br>  <span class="hljs-string">`age`</span> <span class="hljs-built_in">tinyint</span>(<span class="hljs-number">3</span>) <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,<br>  PRIMARY <span class="hljs-keyword">KEY</span> (<span class="hljs-string">`id`</span>)<br>) <span class="hljs-keyword">ENGINE</span>=<span class="hljs-keyword">InnoDB</span> AUTO_INCREMENT=<span class="hljs-number">4</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">CHARSET</span>=utf8 <span class="hljs-keyword">COLLATE</span>=utf8_bin;<br></code></pre></td></tr></table></figure><p>在以下实验中，id为1的学生名称是凯伦。</p><h4 id="实验1"><a href="#实验1" class="headerlink" title="实验1"></a>实验1</h4><p>开启一级缓存，范围为会话级别，调用三次<code>getStudentById</code>，代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getStudentById</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        SqlSession sqlSession = factory.openSession(<span class="hljs-keyword">true</span>); <span class="hljs-comment">// 自动提交事务</span><br>        StudentMapper studentMapper = sqlSession.getMapper(StudentMapper<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;<br>        System.out.println(studentMapper.getStudentById(<span class="hljs-number">1</span>));<br>        System.out.println(studentMapper.getStudentById(<span class="hljs-number">1</span>));<br>        System.out.println(studentMapper.getStudentById(<span class="hljs-number">1</span>));<br>    &#125;<br></code></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/9e996384.jpg" srcset="/img/loading.gif" alt="img"></p><p>我们可以看到，只有第一次真正查询了数据库，后续的查询使用了一级缓存。</p><h4 id="实验2"><a href="#实验2" class="headerlink" title="实验2"></a>实验2</h4><p>增加了对数据库的修改操作，验证在一次数据库会话中，如果对数据库发生了修改操作，一级缓存是否会失效。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addStudent</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        SqlSession sqlSession = factory.openSession(<span class="hljs-keyword">true</span>); <span class="hljs-comment">// 自动提交事务</span><br>        StudentMapper studentMapper = sqlSession.getMapper(StudentMapper<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;<br>        System.out.println(studentMapper.getStudentById(<span class="hljs-number">1</span>));<br>        System.out.println(<span class="hljs-string">"增加了"</span> + studentMapper.addStudent(buildStudent()) + <span class="hljs-string">"个学生"</span>);<br>        System.out.println(studentMapper.getStudentById(<span class="hljs-number">1</span>));<br>        sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/fb6a78e0.jpg" srcset="/img/loading.gif" alt="img"></p><p>我们可以看到，在修改操作后执行的相同查询，查询了数据库，<strong>一级缓存失效</strong>。</p><h4 id="实验3"><a href="#实验3" class="headerlink" title="实验3"></a>实验3</h4><p>开启两个<code>SqlSession</code>，在<code>sqlSession1</code>中查询数据，使一级缓存生效，在<code>sqlSession2</code>中更新数据库，验证一级缓存只在数据库会话内部共享。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testLocalCacheScope</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        SqlSession sqlSession1 = factory.openSession(<span class="hljs-keyword">true</span>); <br>        SqlSession sqlSession2 = factory.openSession(<span class="hljs-keyword">true</span>); <br><br>        StudentMapper studentMapper = sqlSession1.getMapper(StudentMapper<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;<br>        StudentMapper studentMapper2 = sqlSession2.getMapper(StudentMapper<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;<br><br>        System.out.println(<span class="hljs-string">"studentMapper读取数据: "</span> + studentMapper.getStudentById(<span class="hljs-number">1</span>));<br>        System.out.println(<span class="hljs-string">"studentMapper读取数据: "</span> + studentMapper.getStudentById(<span class="hljs-number">1</span>));<br>        System.out.println(<span class="hljs-string">"studentMapper2更新了"</span> + studentMapper2.updateStudentName(<span class="hljs-string">"小岑"</span>,<span class="hljs-number">1</span>) + <span class="hljs-string">"个学生的数据"</span>);<br>        System.out.println(<span class="hljs-string">"studentMapper读取数据: "</span> + studentMapper.getStudentById(<span class="hljs-number">1</span>));<br>        System.out.println(<span class="hljs-string">"studentMapper2读取数据: "</span> + studentMapper2.getStudentById(<span class="hljs-number">1</span>));<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/f480ac76.jpg" srcset="/img/loading.gif" alt="img"></p><p><code>sqlSession2</code>更新了id为1的学生的姓名，从凯伦改为了小岑，但session1之后的查询中，id为1的学生的名字还是凯伦，出现了脏数据，也证明了之前的设想，一级缓存只在数据库会话内部共享。</p><h3 id="一级缓存工作流程-amp-源码分析"><a href="#一级缓存工作流程-amp-源码分析" class="headerlink" title="一级缓存工作流程&amp;源码分析"></a>一级缓存工作流程&amp;源码分析</h3><p>那么，一级缓存的工作流程是怎样的呢？我们从源码层面来学习一下。</p><h4 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h4><p>一级缓存执行的时序图，如下图所示。</p><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/bb851700.png" srcset="/img/loading.gif" alt="img"></p><h4 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h4><p>接下来将对MyBatis查询相关的核心类和一级缓存的源码进行走读。这对后面学习二级缓存也有帮助。</p><p><strong>SqlSession</strong>： 对外提供了用户和数据库之间交互需要的所有方法，隐藏了底层的细节。默认实现类是<code>DefaultSqlSession</code>。</p><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/ba96bc7f.jpg" srcset="/img/loading.gif" alt="img"></p><p><strong>Executor</strong>： <code>SqlSession</code>向用户提供操作数据库的方法，但和数据库操作有关的职责都会委托给Executor。</p><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/ef5e0eb3.jpg" srcset="/img/loading.gif" alt="img"></p><p>如下图所示，Executor有若干个实现类，为Executor赋予了不同的能力，大家可以根据类名，自行学习每个类的基本作用。</p><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/83326eb3.jpg" srcset="/img/loading.gif" alt="img"></p><p>在一级缓存的源码分析中，主要学习<code>BaseExecutor</code>的内部实现。</p><p><strong>BaseExecutor</strong>： <code>BaseExecutor</code>是一个实现了Executor接口的抽象类，定义若干抽象方法，在执行的时候，把具体的操作委托给子类进行执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">int</span> <span class="hljs-title">doUpdate</span><span class="hljs-params">(MappedStatement ms, Object parameter)</span> <span class="hljs-keyword">throws</span> SQLException</span>;<br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">abstract</span> List&lt;BatchResult&gt; <span class="hljs-title">doFlushStatements</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span> isRollback)</span> <span class="hljs-keyword">throws</span> SQLException</span>;<br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">abstract</span> &lt;E&gt; <span class="hljs-function">List&lt;E&gt; <span class="hljs-title">doQuery</span><span class="hljs-params">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql)</span> <span class="hljs-keyword">throws</span> SQLException</span>;<br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">abstract</span> &lt;E&gt; <span class="hljs-function">Cursor&lt;E&gt; <span class="hljs-title">doQueryCursor</span><span class="hljs-params">(MappedStatement ms, Object parameter, RowBounds rowBounds, BoundSql boundSql)</span> <span class="hljs-keyword">throws</span> SQLException</span>;<br></code></pre></td></tr></table></figure><p>在一级缓存的介绍中提到对<code>Local Cache</code>的查询和写入是在<code>Executor</code>内部完成的。在阅读<code>BaseExecutor</code>的代码后发现<code>Local Cache</code>是<code>BaseExecutor</code>内部的一个成员变量，如下代码所示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BaseExecutor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Executor</span> </span>&#123;<br><span class="hljs-keyword">protected</span> ConcurrentLinkedQueue&lt;DeferredLoad&gt; deferredLoads;<br><span class="hljs-keyword">protected</span> PerpetualCache localCache;<br></code></pre></td></tr></table></figure><p><strong>Cache</strong>： MyBatis中的Cache接口，提供了和缓存相关的最基本的操作，如下图所示：</p><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/793031d0.jpg" srcset="/img/loading.gif" alt="img"></p><p>有若干个实现类，使用装饰器模式互相组装，提供丰富的操控缓存的能力，部分实现类如下图所示：</p><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/cdb21712.jpg" srcset="/img/loading.gif" alt="img"></p><p><code>BaseExecutor</code>成员变量之一的<code>PerpetualCache</code>，是对Cache接口最基本的实现，其实现非常简单，内部持有HashMap，对一级缓存的操作实则是对HashMap的操作。如下代码所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PerpetualCache</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Cache</span> </span>&#123;<br>  <span class="hljs-keyword">private</span> String id;<br>  <span class="hljs-keyword">private</span> Map&lt;Object, Object&gt; cache = <span class="hljs-keyword">new</span> HashMap&lt;Object, Object&gt;();<br></code></pre></td></tr></table></figure><p>在阅读相关核心类代码后，从源代码层面对一级缓存工作中涉及到的相关代码，出于篇幅的考虑，对源码做适当删减，读者朋友可以结合本文，后续进行更详细的学习。</p><p>为执行和数据库的交互，首先需要初始化<code>SqlSession</code>，通过<code>DefaultSqlSessionFactory</code>开启<code>SqlSession</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> SqlSession <span class="hljs-title">openSessionFromDataSource</span><span class="hljs-params">(ExecutorType execType, TransactionIsolationLevel level, <span class="hljs-keyword">boolean</span> autoCommit)</span> </span>&#123;<br>    ............<br>    <span class="hljs-keyword">final</span> Executor executor = configuration.newExecutor(tx, execType);     <br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> DefaultSqlSession(configuration, executor, autoCommit);<br>&#125;<br></code></pre></td></tr></table></figure><p>在初始化<code>SqlSesion</code>时，会使用<code>Configuration</code>类创建一个全新的<code>Executor</code>，作为<code>DefaultSqlSession</code>构造函数的参数，创建Executor代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> Executor <span class="hljs-title">newExecutor</span><span class="hljs-params">(Transaction transaction, ExecutorType executorType)</span> </span>&#123;<br>    executorType = executorType == <span class="hljs-keyword">null</span> ? defaultExecutorType : executorType;<br>    executorType = executorType == <span class="hljs-keyword">null</span> ? ExecutorType.SIMPLE : executorType;<br>    Executor executor;<br>    <span class="hljs-keyword">if</span> (ExecutorType.BATCH == executorType) &#123;<br>      executor = <span class="hljs-keyword">new</span> BatchExecutor(<span class="hljs-keyword">this</span>, transaction);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ExecutorType.REUSE == executorType) &#123;<br>      executor = <span class="hljs-keyword">new</span> ReuseExecutor(<span class="hljs-keyword">this</span>, transaction);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      executor = <span class="hljs-keyword">new</span> SimpleExecutor(<span class="hljs-keyword">this</span>, transaction);<br>    &#125;<br>    <span class="hljs-comment">// 尤其可以注意这里，如果二级缓存开关开启的话，是使用CahingExecutor装饰BaseExecutor的子类</span><br>    <span class="hljs-keyword">if</span> (cacheEnabled) &#123;<br>      executor = <span class="hljs-keyword">new</span> CachingExecutor(executor);                      <br>    &#125;<br>    executor = (Executor) interceptorChain.pluginAll(executor);<br>    <span class="hljs-keyword">return</span> executor;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>SqlSession</code>创建完毕后，根据Statment的不同类型，会进入<code>SqlSession</code>的不同方法中，如果是<code>Select</code>语句的话，最后会执行到<code>SqlSession</code>的<code>selectList</code>，代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> &lt;E&gt; <span class="hljs-function">List&lt;E&gt; <span class="hljs-title">selectList</span><span class="hljs-params">(String statement, Object parameter, RowBounds rowBounds)</span> </span>&#123;<br>      MappedStatement ms = configuration.getMappedStatement(statement);<br>      <span class="hljs-keyword">return</span> executor.query(ms, wrapCollection(parameter), rowBounds, Executor.NO_RESULT_HANDLER);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>SqlSession</code>把具体的查询职责委托给了Executor。如果只开启了一级缓存的话，首先会进入<code>BaseExecutor</code>的<code>query</code>方法。代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> &lt;E&gt; <span class="hljs-function">List&lt;E&gt; <span class="hljs-title">query</span><span class="hljs-params">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler)</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br>    BoundSql boundSql = ms.getBoundSql(parameter);<br>    CacheKey key = createCacheKey(ms, parameter, rowBounds, boundSql);<br>    <span class="hljs-keyword">return</span> query(ms, parameter, rowBounds, resultHandler, key, boundSql);<br>&#125;<br></code></pre></td></tr></table></figure><p>在上述代码中，会先根据传入的参数生成CacheKey，进入该方法查看CacheKey是如何生成的，代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">CacheKey cacheKey = <span class="hljs-keyword">new</span> CacheKey();<br>cacheKey.update(ms.getId());<br>cacheKey.update(rowBounds.getOffset());<br>cacheKey.update(rowBounds.getLimit());<br>cacheKey.update(boundSql.getSql());<br><span class="hljs-comment">//后面是update了sql中带的参数</span><br>cacheKey.update(value);<br></code></pre></td></tr></table></figure><p>在上述的代码中，将<code>MappedStatement</code>的Id、SQL的offset、SQL的limit、SQL本身以及SQL中的参数传入了CacheKey这个类，最终构成CacheKey。以下是这个类的内部结构：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> DEFAULT_MULTIPLYER = <span class="hljs-number">37</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> DEFAULT_HASHCODE = <span class="hljs-number">17</span>;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> multiplier;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> hashcode;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> checksum;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> count;<br><span class="hljs-keyword">private</span> List&lt;Object&gt; updateList;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">CacheKey</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.hashcode = DEFAULT_HASHCODE;<br>    <span class="hljs-keyword">this</span>.multiplier = DEFAULT_MULTIPLYER;<br>    <span class="hljs-keyword">this</span>.count = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">this</span>.updateList = <span class="hljs-keyword">new</span> ArrayList&lt;Object&gt;();<br>&#125;<br></code></pre></td></tr></table></figure><p>首先是成员变量和构造函数，有一个初始的<code>hachcode</code>和乘数，同时维护了一个内部的<code>updatelist</code>。在<code>CacheKey</code>的<code>update</code>方法中，会进行一个<code>hashcode</code>和<code>checksum</code>的计算，同时把传入的参数添加进<code>updatelist</code>中。如下代码所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(Object object)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> baseHashCode = object == <span class="hljs-keyword">null</span> ? <span class="hljs-number">1</span> : ArrayUtil.hashCode(object); <br>    count++;<br>    checksum += baseHashCode;<br>    baseHashCode *= count;<br>    hashcode = multiplier * hashcode + baseHashCode;<br>    <br>    updateList.add(object);<br>&#125;<br></code></pre></td></tr></table></figure><p>同时重写了<code>CacheKey</code>的<code>equals</code>方法，代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object object)</span> </span>&#123;<br>    .............<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; updateList.size(); i++) &#123;<br>      Object thisObject = updateList.get(i);<br>      Object thatObject = cacheKey.updateList.get(i);<br>      <span class="hljs-keyword">if</span> (!ArrayUtil.equals(thisObject, thatObject)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>除去hashcode、checksum和count的比较外，只要updatelist中的元素一一对应相等，那么就可以认为是CacheKey相等。只要两条SQL的下列五个值相同，即可以认为是相同的SQL。</p><blockquote><p>Statement Id + Offset + Limmit + Sql + Params</p></blockquote><p>BaseExecutor的query方法继续往下走，代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">list = resultHandler == <span class="hljs-keyword">null</span> ? (List&lt;E&gt;) localCache.getObject(key) : <span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">if</span> (list != <span class="hljs-keyword">null</span>) &#123;<br>    <span class="hljs-comment">// 这个主要是处理存储过程用的。</span><br>    handleLocallyCachedOutputParameters(ms, key, parameter, boundSql);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>    list = queryFromDatabase(ms, parameter, rowBounds, resultHandler, key, boundSql);<br>&#125;<br></code></pre></td></tr></table></figure><p>如果查不到的话，就从数据库查，在<code>queryFromDatabase</code>中，会对<code>localcache</code>进行写入。</p><p>在<code>query</code>方法执行的最后，会判断一级缓存级别是否是<code>STATEMENT</code>级别，如果是的话，就清空缓存，这也就是<code>STATEMENT</code>级别的一级缓存无法共享<code>localCache</code>的原因。代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (configuration.getLocalCacheScope() == LocalCacheScope.STATEMENT) &#123;<br>        clearLocalCache();<br>&#125;<br></code></pre></td></tr></table></figure><p>在源码分析的最后，我们确认一下，如果是<code>insert/delete/update</code>方法，缓存就会刷新的原因。</p><p><code>SqlSession</code>的<code>insert</code>方法和<code>delete</code>方法，都会统一走<code>update</code>的流程，代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">insert</span><span class="hljs-params">(String statement, Object parameter)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> update(statement, parameter);<br>  &#125;<br>   <span class="hljs-meta">@Override</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">delete</span><span class="hljs-params">(String statement)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> update(statement, <span class="hljs-keyword">null</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>update</code>方法也是委托给了<code>Executor</code>执行。<code>BaseExecutor</code>的执行方法如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">update</span><span class="hljs-params">(MappedStatement ms, Object parameter)</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br>    ErrorContext.instance().resource(ms.getResource()).activity(<span class="hljs-string">"executing an update"</span>).object(ms.getId());<br>    <span class="hljs-keyword">if</span> (closed) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ExecutorException(<span class="hljs-string">"Executor was closed."</span>);<br>    &#125;<br>    clearLocalCache();<br>    <span class="hljs-keyword">return</span> doUpdate(ms, parameter);<br>&#125;<br></code></pre></td></tr></table></figure><p>每次执行<code>update</code>前都会清空<code>localCache</code>。</p><p>至此，一级缓存的工作流程讲解以及源码分析完毕。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>MyBatis一级缓存的生命周期和SqlSession一致。</li><li>MyBatis一级缓存内部设计简单，只是一个没有容量限定的HashMap，在缓存的功能性上有所欠缺。</li><li>MyBatis的一级缓存最大范围是SqlSession内部，有多个SqlSession或者分布式的环境下，数据库写操作会引起脏数据，建议设定缓存级别为Statement。</li></ol><h2 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h2><h3 id="二级缓存介绍"><a href="#二级缓存介绍" class="headerlink" title="二级缓存介绍"></a>二级缓存介绍</h3><p>在上文中提到的一级缓存中，其最大的共享范围就是一个SqlSession内部，如果多个SqlSession之间需要共享缓存，则需要使用到二级缓存。开启二级缓存后，会使用CachingExecutor装饰Executor，进入一级缓存的查询流程前，先在CachingExecutor进行二级缓存的查询，具体的工作流程如下所示。</p><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/28399eba.png" srcset="/img/loading.gif" alt="img"></p><p>二级缓存开启后，同一个namespace下的所有操作语句，都影响着同一个Cache，即二级缓存被多个SqlSession共享，是一个全局的变量。</p><p>当开启缓存后，数据的查询执行的流程就是 二级缓存 -&gt; 一级缓存 -&gt; 数据库。</p><h3 id="二级缓存配置"><a href="#二级缓存配置" class="headerlink" title="二级缓存配置"></a>二级缓存配置</h3><p>要正确的使用二级缓存，需完成如下配置的。</p><ol><li>在MyBatis的配置文件中开启二级缓存。</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"cacheEnabled"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"true"</span>/&gt;</span><br></code></pre></td></tr></table></figure><ol><li>在MyBatis的映射XML中配置cache或者 cache-ref 。</li></ol><p>cache标签用于声明这个namespace使用二级缓存，并且可以自定义配置。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">cache</span>/&gt;</span><br></code></pre></td></tr></table></figure><ul><li><code>type</code>：cache使用的类型，默认是<code>PerpetualCache</code>，这在一级缓存中提到过。</li><li><code>eviction</code>： 定义回收的策略，常见的有FIFO，LRU。</li><li><code>flushInterval</code>： 配置一定时间自动刷新缓存，单位是毫秒。</li><li><code>size</code>： 最多缓存对象的个数。</li><li><code>readOnly</code>： 是否只读，若配置可读写，则需要对应的实体类能够序列化。</li><li><code>blocking</code>： 若缓存中找不到对应的key，是否会一直blocking，直到有对应的数据进入缓存。</li></ul><p><code>cache-ref</code>代表引用别的命名空间的Cache配置，两个命名空间的操作使用的是同一个Cache。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">cache-ref</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">"mapper.StudentMapper"</span>/&gt;</span><br></code></pre></td></tr></table></figure><h3 id="二级缓存实验"><a href="#二级缓存实验" class="headerlink" title="二级缓存实验"></a>二级缓存实验</h3><p>接下来我们通过实验，了解MyBatis二级缓存在使用上的一些特点。</p><p>在本实验中，id为1的学生名称初始化为点点。</p><h4 id="实验1-1"><a href="#实验1-1" class="headerlink" title="实验1"></a>实验1</h4><p>测试二级缓存效果，不提交事务，<code>sqlSession1</code>查询完数据后，<code>sqlSession2</code>相同的查询是否会从缓存中获取数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testCacheWithoutCommitOrClose</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        SqlSession sqlSession1 = factory.openSession(<span class="hljs-keyword">true</span>); <br>        SqlSession sqlSession2 = factory.openSession(<span class="hljs-keyword">true</span>); <br>        <br>        StudentMapper studentMapper = sqlSession1.getMapper(StudentMapper<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;<br>        StudentMapper studentMapper2 = sqlSession2.getMapper(StudentMapper<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;<br><br>        System.out.println(<span class="hljs-string">"studentMapper读取数据: "</span> + studentMapper.getStudentById(<span class="hljs-number">1</span>));<br>        System.out.println(<span class="hljs-string">"studentMapper2读取数据: "</span> + studentMapper2.getStudentById(<span class="hljs-number">1</span>));<br>&#125;<br></code></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/71e2bfdc.jpg" srcset="/img/loading.gif" alt="img"></p><p>我们可以看到，当<code>sqlsession</code>没有调用<code>commit()</code>方法时，二级缓存并没有起到作用。</p><h4 id="实验2-1"><a href="#实验2-1" class="headerlink" title="实验2"></a>实验2</h4><p>测试二级缓存效果，当提交事务时，<code>sqlSession1</code>查询完数据后，<code>sqlSession2</code>相同的查询是否会从缓存中获取数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testCacheWithCommitOrClose</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        SqlSession sqlSession1 = factory.openSession(<span class="hljs-keyword">true</span>); <br>        SqlSession sqlSession2 = factory.openSession(<span class="hljs-keyword">true</span>); <br>        <br>        StudentMapper studentMapper = sqlSession1.getMapper(StudentMapper<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;<br>        StudentMapper studentMapper2 = sqlSession2.getMapper(StudentMapper<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;<br><br>        System.out.println(<span class="hljs-string">"studentMapper读取数据: "</span> + studentMapper.getStudentById(<span class="hljs-number">1</span>));<br>        sqlSession1.commit();<br>        System.out.println(<span class="hljs-string">"studentMapper2读取数据: "</span> + studentMapper2.getStudentById(<span class="hljs-number">1</span>));<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/f366f34e.jpg" srcset="/img/loading.gif" alt="img"></p><p>从图上可知，<code>sqlsession2</code>的查询，使用了缓存，缓存的命中率是0.5。</p><h4 id="实验3-1"><a href="#实验3-1" class="headerlink" title="实验3"></a>实验3</h4><p>测试<code>update</code>操作是否会刷新该<code>namespace</code>下的二级缓存。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testCacheWithUpdate</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        SqlSession sqlSession1 = factory.openSession(<span class="hljs-keyword">true</span>); <br>        SqlSession sqlSession2 = factory.openSession(<span class="hljs-keyword">true</span>); <br>        SqlSession sqlSession3 = factory.openSession(<span class="hljs-keyword">true</span>); <br>        <br>        StudentMapper studentMapper = sqlSession1.getMapper(StudentMapper<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;<br>        StudentMapper studentMapper2 = sqlSession2.getMapper(StudentMapper<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;<br>        StudentMapper studentMapper3 = sqlSession3.getMapper(StudentMapper<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;<br>        <br>        System.out.println(<span class="hljs-string">"studentMapper读取数据: "</span> + studentMapper.getStudentById(<span class="hljs-number">1</span>));<br>        sqlSession1.commit();<br>        System.out.println(<span class="hljs-string">"studentMapper2读取数据: "</span> + studentMapper2.getStudentById(<span class="hljs-number">1</span>));<br>        <br>        studentMapper3.updateStudentName(<span class="hljs-string">"方方"</span>,<span class="hljs-number">1</span>);<br>        sqlSession3.commit();<br>        System.out.println(<span class="hljs-string">"studentMapper2读取数据: "</span> + studentMapper2.getStudentById(<span class="hljs-number">1</span>));<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/3ad93c3a.jpg" srcset="/img/loading.gif" alt="img"></p><p>我们可以看到，在<code>sqlSession3</code>更新数据库，并提交事务后，<code>sqlsession2</code>的<code>StudentMapper namespace</code>下的查询走了数据库，没有走Cache。</p><h4 id="实验4"><a href="#实验4" class="headerlink" title="实验4"></a>实验4</h4><p>验证MyBatis的二级缓存不适应用于映射文件中存在多表查询的情况。</p><p>通常我们会为每个单表创建单独的映射文件，由于MyBatis的二级缓存是基于<code>namespace</code>的，多表查询语句所在的<code>namspace</code>无法感应到其他<code>namespace</code>中的语句对多表查询中涉及的表进行的修改，引发脏数据问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testCacheWithDiffererntNamespace</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        SqlSession sqlSession1 = factory.openSession(<span class="hljs-keyword">true</span>); <br>        SqlSession sqlSession2 = factory.openSession(<span class="hljs-keyword">true</span>); <br>        SqlSession sqlSession3 = factory.openSession(<span class="hljs-keyword">true</span>); <br>    <br>        StudentMapper studentMapper = sqlSession1.getMapper(StudentMapper<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;<br>        StudentMapper studentMapper2 = sqlSession2.getMapper(StudentMapper<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;<br>        ClassMapper classMapper = sqlSession3.getMapper(ClassMapper<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;<br>        <br>        System.out.println(<span class="hljs-string">"studentMapper读取数据: "</span> + studentMapper.getStudentByIdWithClassInfo(<span class="hljs-number">1</span>));<br>        sqlSession1.close();<br>        System.out.println(<span class="hljs-string">"studentMapper2读取数据: "</span> + studentMapper2.getStudentByIdWithClassInfo(<span class="hljs-number">1</span>));<br><br>        classMapper.updateClassName(<span class="hljs-string">"特色一班"</span>,<span class="hljs-number">1</span>);<br>        sqlSession3.commit();<br>        System.out.println(<span class="hljs-string">"studentMapper2读取数据: "</span> + studentMapper2.getStudentByIdWithClassInfo(<span class="hljs-number">1</span>));<br>&#125;<br></code></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/5265ed97.jpg" srcset="/img/loading.gif" alt="img"></p><p>在这个实验中，我们引入了两张新的表，一张class，一张classroom。class中保存了班级的id和班级名，classroom中保存了班级id和学生id。我们在<code>StudentMapper</code>中增加了一个查询方法<code>getStudentByIdWithClassInfo</code>，用于查询学生所在的班级，涉及到多表查询。在<code>ClassMapper</code>中添加了<code>updateClassName</code>，根据班级id更新班级名的操作。</p><p>当<code>sqlsession1</code>的<code>studentmapper</code>查询数据后，二级缓存生效。保存在StudentMapper的namespace下的cache中。当<code>sqlSession3</code>的<code>classMapper</code>的<code>updateClassName</code>方法对class表进行更新时，<code>updateClassName</code>不属于<code>StudentMapper</code>的<code>namespace</code>，所以<code>StudentMapper</code>下的cache没有感应到变化，没有刷新缓存。当<code>StudentMapper</code>中同样的查询再次发起时，从缓存中读取了脏数据。</p><h4 id="实验5"><a href="#实验5" class="headerlink" title="实验5"></a>实验5</h4><p>为了解决实验4的问题呢，可以使用Cache ref，让<code>ClassMapper</code>引用<code>StudenMapper</code>命名空间，这样两个映射文件对应的SQL操作都使用的是同一块缓存了。</p><p>执行结果：</p><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/a2e4c2d8.jpg" srcset="/img/loading.gif" alt="img"></p><p>不过这样做的后果是，缓存的粒度变粗了，多个<code>Mapper namespace</code>下的所有操作都会对缓存使用造成影响。</p><h3 id="二级缓存源码分析"><a href="#二级缓存源码分析" class="headerlink" title="二级缓存源码分析"></a>二级缓存源码分析</h3><p>MyBatis二级缓存的工作流程和前文提到的一级缓存类似，只是在一级缓存处理前，用<code>CachingExecutor</code>装饰了<code>BaseExecutor</code>的子类，在委托具体职责给<code>delegate</code>之前，实现了二级缓存的查询和写入功能，具体类关系图如下图所示。</p><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/090216b1.jpg" srcset="/img/loading.gif" alt="img"></p><h4 id="源码分析-1"><a href="#源码分析-1" class="headerlink" title="源码分析"></a>源码分析</h4><p>源码分析从<code>CachingExecutor</code>的<code>query</code>方法展开，源代码走读过程中涉及到的知识点较多，不能一一详细讲解，读者朋友可以自行查询相关资料来学习。</p><p><code>CachingExecutor</code>的<code>query</code>方法，首先会从<code>MappedStatement</code>中获得在配置初始化时赋予的Cache。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Cache cache = ms.getCache();<br></code></pre></td></tr></table></figure><p>本质上是装饰器模式的使用，具体的装饰链是：</p><blockquote><p>SynchronizedCache -&gt; LoggingCache -&gt; SerializedCache -&gt; LruCache -&gt; PerpetualCache。</p></blockquote><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/1f5233b2.jpg" srcset="/img/loading.gif" alt="img"></p><p>以下是具体这些Cache实现类的介绍，他们的组合为Cache赋予了不同的能力。</p><ul><li><code>SynchronizedCache</code>：同步Cache，实现比较简单，直接使用synchronized修饰方法。</li><li><code>LoggingCache</code>：日志功能，装饰类，用于记录缓存的命中率，如果开启了DEBUG模式，则会输出命中率日志。</li><li><code>SerializedCache</code>：序列化功能，将值序列化后存到缓存中。该功能用于缓存返回一份实例的Copy，用于保存线程安全。</li><li><code>LruCache</code>：采用了Lru算法的Cache实现，移除最近最少使用的Key/Value。</li><li><code>PerpetualCache</code>： 作为为最基础的缓存类，底层实现比较简单，直接使用了HashMap。</li></ul><p>然后是判断是否需要刷新缓存，代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">flushCacheIfRequired(ms);<br></code></pre></td></tr></table></figure><p>在默认的设置中<code>SELECT</code>语句不会刷新缓存，<code>insert/update/delte</code>会刷新缓存。进入该方法。代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">flushCacheIfRequired</span><span class="hljs-params">(MappedStatement ms)</span> </span>&#123;<br>    Cache cache = ms.getCache();<br>    <span class="hljs-keyword">if</span> (cache != <span class="hljs-keyword">null</span> &amp;&amp; ms.isFlushCacheRequired()) &#123;      <br>      tcm.clear(cache);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>MyBatis的<code>CachingExecutor</code>持有了<code>TransactionalCacheManager</code>，即上述代码中的tcm。</p><p><code>TransactionalCacheManager</code>中持有了一个Map，代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Map&lt;Cache, TransactionalCache&gt; transactionalCaches = <span class="hljs-keyword">new</span> HashMap&lt;Cache, TransactionalCache&gt;();<br></code></pre></td></tr></table></figure><p>这个Map保存了Cache和用<code>TransactionalCache</code>包装后的Cache的映射关系。</p><p><code>TransactionalCache</code>实现了Cache接口，<code>CachingExecutor</code>会默认使用他包装初始生成的Cache，作用是如果事务提交，对缓存的操作才会生效，如果事务回滚或者不提交事务，则不对缓存产生影响。</p><p>在<code>TransactionalCache</code>的clear，有以下两句。清空了需要在提交时加入缓存的列表，同时设定提交时清空缓存，代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">clear</span><span class="hljs-params">()</span> </span>&#123;<br>clearOnCommit = <span class="hljs-keyword">true</span>;<br>entriesToAddOnCommit.clear();<br>&#125;<br></code></pre></td></tr></table></figure><p><code>CachingExecutor</code>继续往下走，<code>ensureNoOutParams</code>主要是用来处理存储过程的，暂时不用考虑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (ms.isUseCache() &amp;&amp; resultHandler == <span class="hljs-keyword">null</span>) &#123;<br>ensureNoOutParams(ms, parameterObject, boundSql);<br></code></pre></td></tr></table></figure><p>之后会尝试从tcm中获取缓存的列表。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;E&gt; list = (List&lt;E&gt;) tcm.getObject(cache, key);<br></code></pre></td></tr></table></figure><p>在<code>getObject</code>方法中，会把获取值的职责一路传递，最终到<code>PerpetualCache</code>。如果没有查到，会把key加入Miss集合，这个主要是为了统计命中率。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Object object = delegate.getObject(key);<br><span class="hljs-keyword">if</span> (object == <span class="hljs-keyword">null</span>) &#123;<br>entriesMissedInCache.add(key);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>CachingExecutor</code>继续往下走，如果查询到数据，则调用<code>tcm.putObject</code>方法，往缓存中放入值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (list == <span class="hljs-keyword">null</span>) &#123;<br>list = delegate.&lt;E&gt; query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);<br>tcm.putObject(cache, key, list); <span class="hljs-comment">// issue #578 and #116</span><br>&#125;<br></code></pre></td></tr></table></figure><p>tcm的<code>put</code>方法也不是直接操作缓存，只是在把这次的数据和key放入待提交的Map中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">putObject</span><span class="hljs-params">(Object key, Object object)</span> </span>&#123;<br>    entriesToAddOnCommit.put(key, object);<br>&#125;<br></code></pre></td></tr></table></figure><p>从以上的代码分析中，我们可以明白，如果不调用<code>commit</code>方法的话，由于<code>TranscationalCache</code>的作用，并不会对二级缓存造成直接的影响。因此我们看看<code>Sqlsession</code>的<code>commit</code>方法中做了什么。代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">commit</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span> force)</span> </span>&#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      executor.commit(isCommitOrRollbackRequired(force));<br></code></pre></td></tr></table></figure><p>因为我们使用了CachingExecutor，首先会进入CachingExecutor实现的commit方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">commit</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span> required)</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br>    delegate.commit(required);<br>    tcm.commit();<br>&#125;<br></code></pre></td></tr></table></figure><p>会把具体commit的职责委托给包装的<code>Executor</code>。主要是看下<code>tcm.commit()</code>，tcm最终又会调用到<code>TrancationalCache</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">commit</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (clearOnCommit) &#123;<br>      delegate.clear();<br>    &#125;<br>    flushPendingEntries();<br>    reset();<br>&#125;<br></code></pre></td></tr></table></figure><p>看到这里的<code>clearOnCommit</code>就想起刚才<code>TrancationalCache</code>的<code>clear</code>方法设置的标志位，真正的清理Cache是放到这里来进行的。具体清理的职责委托给了包装的Cache类。之后进入<code>flushPendingEntries</code>方法。代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">flushPendingEntries</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (Map.Entry&lt;Object, Object&gt; entry : entriesToAddOnCommit.entrySet()) &#123;<br>      delegate.putObject(entry.getKey(), entry.getValue());<br>    &#125;<br>    ................<br>&#125;<br></code></pre></td></tr></table></figure><p>在<code>flushPending</code>Entries中，将待提交的Map进行循环处理，委托给包装的Cache类，进行<code>putObject</code>的操作。</p><p>后续的查询操作会重复执行这套流程。如果是<code>insert|update|delete</code>的话，会统一进入<code>CachingExecutor</code>的<code>update</code>方法，其中调用了这个函数，代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">flushCacheIfRequired</span><span class="hljs-params">(MappedStatement ms)</span></span><br></code></pre></td></tr></table></figure><p>在二级缓存执行流程后就会进入一级缓存的执行流程，因此不再赘述。</p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><ol><li>MyBatis的二级缓存相对于一级缓存来说，实现了<code>SqlSession</code>之间缓存数据的共享，同时粒度更加的细，能够到<code>namespace</code>级别，通过Cache接口实现类不同的组合，对Cache的可控性也更强。</li><li>MyBatis在多表查询时，极大可能会出现脏数据，有设计上的缺陷，安全使用二级缓存的条件比较苛刻。</li><li>在分布式环境下，由于默认的MyBatis Cache实现都是基于本地的，分布式环境下必然会出现读取到脏数据，需要使用集中式缓存将MyBatis的Cache接口实现，有一定的开发成本，直接使用Redis、Memcached等分布式缓存可能成本更低，安全性也更高。</li></ol><h2 id="全文总结"><a href="#全文总结" class="headerlink" title="全文总结"></a>全文总结</h2><p>本文对介绍了MyBatis一二级缓存的基本概念，并从应用及源码的角度对MyBatis的缓存机制进行了分析。最后对MyBatis缓存机制做了一定的总结，个人建议MyBatis缓存特性在生产环境中进行关闭，单纯作为一个ORM框架使用可能更为合适。</p><blockquote><p>原文链接：<a href="https://tech.meituan.com/2018/01/19/mybatis-cache.html" target="_blank" rel="noopener">https://tech.meituan.com/2018/01/19/mybatis-cache.html</a></p></blockquote><p><strong>欢迎关注微信公众号 ：</strong></p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006y8mN6gy1g7d3llw1nkj30b40b4wee.jpg" srcset="/img/loading.gif" alt="欢迎关注公众号" style="width: 100px" />]]></content>
    
    
    <categories>
      
      <category>MyBatis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>MyBatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决Catalina打开应用很慢的问题</title>
    <link href="/2020/10/16/%E8%A7%A3%E5%86%B3Catalina%E6%89%93%E5%BC%80%E5%BA%94%E7%94%A8%E5%BE%88%E6%85%A2%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2020/10/16/%E8%A7%A3%E5%86%B3Catalina%E6%89%93%E5%BC%80%E5%BA%94%E7%94%A8%E5%BE%88%E6%85%A2%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>此方法用于解决应用一直在dock上跳，打开耗时久的问题</p><p>将 <code>0.0.0.0 ocsp.apple.com</code> 写入<code>/etc/hosts</code>即可解决</p><p><strong>欢迎关注微信公众号 ：</strong></p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006y8mN6gy1g7d3llw1nkj30b40b4wee.jpg" srcset="/img/loading.gif" alt="欢迎关注公众号" style="width: 100px" />]]></content>
    
    
    <categories>
      
      <category>Mac</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mac</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Learn_2.1：RESTful接口与http协议状态表述</title>
    <link href="/2020/10/15/LearnSpringBoot_2.1/"/>
    <url>/2020/10/15/LearnSpringBoot_2.1/</url>
    
    <content type="html"><![CDATA[<div class="note note-danger">            <p>本文转自<a href="https://www.kancloud.cn/hanxt/springboot2/1177585" target="_blank" rel="noopener"><strong>字母哥SpringBoot2.X教程</strong></a><br>很良心的教程文档，作者很有一套，有兴趣的可以去看看</p>          </div><h3 id="一、RESTful风格API的好处"><a href="#一、RESTful风格API的好处" class="headerlink" title="一、RESTful风格API的好处"></a>一、RESTful风格API的好处</h3><p>API（Application Programming Interface），顾名思义：是一组编程接口规范，客户端与服务端通过请求响应进行数据通信。<br>REST（Representational State Transfer）表述性状态传递，决定了接口的形式与规则。<br><strong>RESTful是基于http方法的API设计风格，而不是一种新的技术.</strong></p><ol><li>看Url就知道要什么资源</li><li>看http method就知道针对资源干什么</li><li>看http status code就知道结果如何</li></ol><p>对接口开发提供了一种可以广泛适用的规范，为前端后端交互减少了接口交流的口舌成本，是约定大于配置的体现。通过下面的设计，大家来理解一下这三句话。</p><div class="note note-success">            <p>当然也不是所有的接口，都能用REST的形式来表述。<br>在实际工作中灵活运用，我们用RESTful风格的目的是为大家提供统一标准，避免不必要的沟通成本的浪费，形成一种通用的风格。<br>就好比大家都知道：伸出大拇指表示“你很棒“的意思，绝大部分人都明白，因为你了解了这种风格习惯。但是不排除有些地区伸出大拇指表示其他意思，就不适合使用！</p>          </div><h3 id="二、RESTful-API的设计风格"><a href="#二、RESTful-API的设计风格" class="headerlink" title="二、RESTful API的设计风格"></a>二、RESTful API的设计风格</h3><h4 id="2-1、RESTful是面向资源的（名词）"><a href="#2-1、RESTful是面向资源的（名词）" class="headerlink" title="2.1、RESTful是面向资源的（名词）"></a>2.1、RESTful是面向资源的（名词）</h4><p>REST 通过 URI 暴露资源时，会强调不要在 URI 中出现动词。比如：</p><table><thead><tr><th>不符合REST的接口URI</th><th>符合REST接口URI</th><th>功能</th></tr></thead><tbody><tr><td>GET /api/getDogs/{id}</td><td>GET /api/dogs/{id}</td><td>获取一个小狗</td></tr><tr><td>GET /api/getDogs</td><td>GET /api/dogs</td><td>获取所有小狗</td></tr><tr><td>GET /api/addDogs</td><td>POST /api/dogs</td><td>添加一个小狗</td></tr><tr><td>GET /api/editDogs/{id}</td><td>PUT /api/dogs/{id}</td><td>修改一个小狗</td></tr><tr><td>GET /api/deleteDogs/{id}</td><td>DELETE /api/dogs/{id}</td><td>删除一个小狗</td></tr></tbody></table><h4 id="2-2、用HTTP方法体现对资源的操作（动词）"><a href="#2-2、用HTTP方法体现对资源的操作（动词）" class="headerlink" title="2.2、用HTTP方法体现对资源的操作（动词）"></a>2.2、用HTTP方法体现对资源的操作（动词）</h4><ul><li>GET    ： 获取、读取资源</li><li>POST   ： 添加资源</li><li>PUT    ： 修改资源</li><li>DELETE ： 删除资源</li></ul><p><img src="https://img.kancloud.cn/77/8c/778c1a6b6927d9d4d1b0b038fecf0e38_955x422.png" srcset="/img/loading.gif" alt="Http操作"></p><p>实际上，这四个动词实际上就对应着增删改查四个操作，这就利用了HTTP动词来表示对资源的操作。</p><h4 id="2-3-HTTP状态码"><a href="#2-3-HTTP状态码" class="headerlink" title="2.3. HTTP状态码"></a>2.3. HTTP状态码</h4><p>通过HTTP状态码体现动作的结果,不要自定义</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">200 </span>OK <br><span class="hljs-symbol">400 </span>Bad Request <br><span class="hljs-symbol">500 </span>Internal Server <span class="hljs-keyword">Error</span><br></code></pre></td></tr></table></figure><p>在 APP 与 API 的交互当中，其结果逃不出这三种状态：</p><ul><li>所有事情都按预期正确执行完毕 - 成功</li><li>APP 发生了一些错误 – 客户端错误（如：校验用户输入身份证，结果输入的是军官证，就是客户端输入错误）</li><li>API 发生了一些错误 – 服务器端错误（各种编码bug或服务内部自己导致的异常）</li></ul><p>这三种状态与上面的状态码是一一对应的。如果你觉得这三种状态，分类处理结果太宽泛，http-status code还有很多。<br>建议还是要遵循KISS(Keep It Stupid and Simple)原则，上面的三种状态码完全可以覆盖99%以上的场景。<br>这三个状态码大家都记得住，而且非常常用，多了就不一定了。</p><h4 id="2-4-Get方法和查询参数不应该改变数据"><a href="#2-4-Get方法和查询参数不应该改变数据" class="headerlink" title="2.4. Get方法和查询参数不应该改变数据"></a>2.4. Get方法和查询参数不应该改变数据</h4><p>改变数据的事交给POST、PUT、DELETE</p><h4 id="2-5-使用复数名词"><a href="#2-5-使用复数名词" class="headerlink" title="2.5. 使用复数名词"></a>2.5. 使用复数名词</h4><p>/dogs 而不是 /dog</p><h4 id="2-6-复杂资源关系的表达"><a href="#2-6-复杂资源关系的表达" class="headerlink" title="2.6. 复杂资源关系的表达"></a>2.6. 复杂资源关系的表达</h4><p>GET /cars/711/drivers/ 返回 使用过编号711汽车的所有司机<br>GET /cars/711/drivers/4 返回 使用过编号711汽车的4号司机</p><h4 id="2-7-高级用法-HATEOAS"><a href="#2-7-高级用法-HATEOAS" class="headerlink" title="2.7. 高级用法:HATEOAS"></a>2.7. 高级用法:HATEOAS</h4><p><strong>HATEOAS</strong>:Hypermedia as the Engine of Application State 超媒体作为应用状态的引擎。<br>RESTful API最好做到HATEOAS，<strong>即返回结果中提供链接，连向其他API方法，使得用户不查文档，也知道下一步应该做什么。</strong><br>比如，当用户向api.example.com的根目录发出请求，会得到这样一个文档。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<span class="hljs-attr">"link"</span>: &#123;<br>  <span class="hljs-attr">"rel"</span>:   <span class="hljs-string">"collection https://www.example.com/zoos"</span>,<br>  <span class="hljs-attr">"href"</span>:  <span class="hljs-string">"https://api.example.com/zoos"</span>,<br>  <span class="hljs-attr">"title"</span>: <span class="hljs-string">"List of zoos"</span>,<br>  <span class="hljs-attr">"type"</span>:  <span class="hljs-string">"application/vnd.yourformat+json"</span><br>&#125;&#125;<br></code></pre></td></tr></table></figure><p>上面代码表示，文档中有一个link属性，用户读取这个属性就知道下一步该调用什么API或者可以调用什么API了。</p><h4 id="2-8-资源过滤、排序、选择和分页的表述"><a href="#2-8-资源过滤、排序、选择和分页的表述" class="headerlink" title="2.8.资源过滤、排序、选择和分页的表述"></a>2.8.资源过滤、排序、选择和分页的表述</h4><table><thead><tr><th>资源功能表述</th><th>例子</th><th>详细说明</th></tr></thead><tbody><tr><td>资源数据过滤</td><td>GET /cars?color=red</td><td>获取红色的汽车</td></tr><tr><td>资源数据过滤</td><td>GET /cars?seats&lt;=4</td><td>获取小于四座位的汽车</td></tr><tr><td>资源数据排序</td><td>GET /cars?sort=-manufactorer,+model</td><td>获取汽车资源数据，先按照生产者降序排序、再按照车架模型升序排序</td></tr><tr><td>资源数据字段选择</td><td>GET /cars?fields=manufactorer,model,id,color</td><td>只选取其中一些字段，给API消费者一个选择字段的能力，这会降低网络流量</td></tr><tr><td>资源数据分页</td><td>GET /cars?offset=10&amp;limit=5</td><td>使用limit和offset，实现分页、缺省</td></tr><tr><td>#### 2.9. 版本化你的API</td><td></td><td></td></tr><tr><td>强制性增加API版本声明，不要发布无版本的API。如：/api/v1/blog</td><td></td><td></td></tr><tr><td><strong>面向扩展开放，面向修改关闭</strong>：也就是说一个版本的接口开发完成测试上线之后，我们一般不会对接口进行修改，如果有新的需求就开发新的接口进行功能扩展。</td><td></td><td></td></tr><tr><td>这样做的目的是：当你的新接口上线后，不会影响使用老接口的用户。如果新接口目的是替换老接口，也不要在v1版本原接口上修改，而是开发v2版本接口，并声明v1接口废弃！</td><td></td><td></td></tr></tbody></table><h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><p>关于HTTP RESTful风格API设计的更多例子，请大家参考：<a href="http://httpbin.org/" target="_blank" rel="noopener">http://httpbin.org/</a></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>SpringBoot</tag>
      
      <tag>API</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Brew安装常用软件</title>
    <link href="/2020/10/15/Brew%E5%AE%89%E8%A3%85%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6/"/>
    <url>/2020/10/15/Brew%E5%AE%89%E8%A3%85%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h5 id="1-安装mysql"><a href="#1-安装mysql" class="headerlink" title="1  安装mysql"></a>1  安装mysql</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew install mysql<br></code></pre></td></tr></table></figure><p>安装完后会提示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">To have launchd start mysql now and restart at login:<br><br>  brew services start mysql<br><br>Or, <span class="hljs-keyword">if</span> you don<span class="hljs-string">'t want/need a background service you can just run:</span><br><span class="hljs-string"></span><br><span class="hljs-string">  mysql.server start</span><br></code></pre></td></tr></table></figure><p>根据需要选择自己要的</p><p>这样就安装完了，执行<code>mysql.server start</code>，服务就起来了，可以用</p><p><code>mysql -uroot</code> 进去看看</p><p>之前还以为要初始化mysql， 实际上是不用的，那样只是重新在别的地方安装了一个db起来而已</p><p>不过密码还是要修改一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /usr/<span class="hljs-built_in">local</span>/opt/mysql/<br>./bin/mysql_secure_installation<br></code></pre></td></tr></table></figure><p>然后按照提示进行修改密码即可</p><h5 id="2-安装redis"><a href="#2-安装redis" class="headerlink" title="2 安装redis"></a>2 安装redis</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew install redis<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">To have launchd start redis now and restart at login:<br><br>  brew services start redis<br><br>Or, <span class="hljs-keyword">if</span> you don<span class="hljs-string">'t want/need a background service you can just run:</span><br><span class="hljs-string"></span><br><span class="hljs-string">  redis-server /usr/local/etc/redis.conf</span><br></code></pre></td></tr></table></figure><p>redis 配置文件的位置<br><code>/usr/local/etc/redis.conf</code></p><h5 id="3-安装zookeeper"><a href="#3-安装zookeeper" class="headerlink" title="3 安装zookeeper"></a>3 安装zookeeper</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew info zookeeper<br><br>brew install zookeeper<br></code></pre></td></tr></table></figure><p>安装完毕提示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">To have launchd start zookeeper now and restart at login:<br><br>  brew services start zookeeper<br><br>Or, <span class="hljs-keyword">if</span> you don<span class="hljs-string">'t want/need a background service you can just run:</span><br><span class="hljs-string"></span><br><span class="hljs-string">  zkServer start</span><br></code></pre></td></tr></table></figure><p>配置文件地址：</p><p><code>/usr/local/etc/zookeeper/zoo.cfg</code></p><h5 id="4-安装activemq"><a href="#4-安装activemq" class="headerlink" title="4 安装activemq"></a>4 安装activemq</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew install activemq<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">To have launchd start activemq now and restart at login:<br><br>  brew services start activemq<br><br>Or, <span class="hljs-keyword">if</span> you don<span class="hljs-string">'t want/need a background service you can just run:</span><br><span class="hljs-string"></span><br><span class="hljs-string">  activemq start</span><br></code></pre></td></tr></table></figure><h5 id="5-安装nginx"><a href="#5-安装nginx" class="headerlink" title="5 安装nginx"></a>5 安装nginx</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew info nginx<br><br>brew install nginx<br></code></pre></td></tr></table></figure><p>装完以后提示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">The default port has been <span class="hljs-built_in">set</span> <span class="hljs-keyword">in</span> /usr/<span class="hljs-built_in">local</span>/etc/nginx/nginx.conf to 8080 so that<br><br>nginx can run without sudo.<br><br> <br><br>nginx will load all files <span class="hljs-keyword">in</span> /usr/<span class="hljs-built_in">local</span>/etc/nginx/servers/.<br><br> <br><br>To have launchd start nginx now and restart at login:<br><br>  brew services start nginx<br><br>Or, <span class="hljs-keyword">if</span> you don<span class="hljs-string">'t want/need a background service you can just run:</span><br><span class="hljs-string"></span><br><span class="hljs-string">  nginx</span><br></code></pre></td></tr></table></figure><p><strong>欢迎关注微信公众号 ：</strong></p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006y8mN6gy1g7d3llw1nkj30b40b4wee.jpg" srcset="/img/loading.gif" alt="欢迎关注公众号" style="width: 100px" />]]></content>
    
    
    <categories>
      
      <category>MacOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mac</tag>
      
      <tag>Brew</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>李诞说过什么精辟的话</title>
    <link href="/2020/10/12/%E6%9D%8E%E8%AF%9E%E8%AF%B4%E8%BF%87%E4%BB%80%E4%B9%88%E7%B2%BE%E8%BE%9F%E7%9A%84%E8%AF%9D/"/>
    <url>/2020/10/12/%E6%9D%8E%E8%AF%9E%E8%AF%B4%E8%BF%87%E4%BB%80%E4%B9%88%E7%B2%BE%E8%BE%9F%E7%9A%84%E8%AF%9D/</url>
    
    <content type="html"><![CDATA[<blockquote><p>1、不好说喜欢，只是看见你会乱。</p></blockquote><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/10/12/v2-2a06c7a8efadfd984b13a6e3de93a553_hd.jpg" srcset="/img/loading.gif" alt="img"></p><blockquote><p>2、不好说想娶，只是想永远和你在一起。</p></blockquote><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/10/12/v2-560be75fbe2314c064a34942b120d7d2_hd.jpg" srcset="/img/loading.gif" alt="img"></p><blockquote><p>3、赚钱的目的就是为了，有些钱不用去赚。</p></blockquote><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/10/12/v2-538a69532c25abcf3e96bd44d311a34a_hd.jpg" srcset="/img/loading.gif" alt="img"></p><blockquote><p>4、没有朋友多孤独啊？有了也一样。</p></blockquote><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/10/12/v2-545979f79f769ec9db495ae02abccf4a_hd.jpg" srcset="/img/loading.gif" alt="img"></p><blockquote><p>5、我没有初心，我的初心就是想躺着，千万别跟我说勿忘初心，我正奋斗呢，你一劝，当场就躺。</p></blockquote><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/10/12/v2-7260d1c6514462e8128ba91ecf4c243c_hd.jpg" srcset="/img/loading.gif" alt="img"></p><blockquote><p>6、人生在世，你只要知道两件事。一，这世上绝对存在不需要读书也很聪明，不需要努力也过得很好，甚至不需要钱就能快乐的人。二，那个人绝对不是你。</p></blockquote><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/10/12/v2-cadd30309a06eef80aba341ba682991f_hd.jpg" srcset="/img/loading.gif" alt="img"></p><blockquote><p>7、再互相憎恨的人，也得睡在同一个夜里。</p></blockquote><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/10/12/v2-02b8c1d18d52b9c5c201782c3880ce8c_hd.jpg" srcset="/img/loading.gif" alt="img"></p><blockquote><p>8、仪式感，就是给没意义的事情找意义。</p></blockquote><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/10/12/v2-cad69bd5f39e3ba5feb5ccd56ae0a4fd_hd.jpg" srcset="/img/loading.gif" alt="img"></p><blockquote><p>9、骂人的时候，没必要那么严谨。</p></blockquote><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/10/12/v2-413ea4a84dd2ab48cb3061882e0d4c18_hd.jpg" srcset="/img/loading.gif" alt="img"></p><blockquote><p>10、人是活出来的，不是想出来的。</p></blockquote><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/10/12/v2-440f8edb3cbac39ac45ec706924757e2_hd.jpg" srcset="/img/loading.gif" alt="img"></p><blockquote><p>11、抬头一片茫茫，想到，我们看星星，看到的不是星星，是自己视力的极限。</p></blockquote><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/10/12/v2-36f668b83172affbfc1e943593ef0329_hd.jpg" srcset="/img/loading.gif" alt="img"></p><blockquote><p>12、我很久不给你写情话了，我想，我是个普通人，怎么能那么爱你。</p></blockquote><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/10/12/v2-c42c9c51ffd47d07498514412ade4344_hd.jpg" srcset="/img/loading.gif" alt="img"></p><blockquote><p>13、起初，你拉我一起看雨，大雨里百鬼夜行，我们混在其中，比鬼还高兴。</p></blockquote><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/10/12/v2-0ea8acd9255c0e8cf24344a9cbdccf5c_hd.jpg" srcset="/img/loading.gif" alt="img"></p><blockquote><p>14、每次见你都会惶恐，每次见你，脑袋里都是一句没头没尾的烂台词——你从人群中走来。</p></blockquote><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/10/12/v2-596df6a1f61e7e4b393473218900eba4_hd.jpg" srcset="/img/loading.gif" alt="img"></p><blockquote><p>15、大部分人，都有一个经不起推敲的幻觉，认为只要换换环境，自己的人生就会有起色。</p></blockquote><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/10/12/v2-8b109bf1b5ed21ce78c3116999bb77a6_hd.jpg" srcset="/img/loading.gif" alt="img"></p><blockquote><p>16、人生的真相是这样的：我敢骂政府，骂世界，骂他妈的上帝；我毁佛谤祖，我睥睨天下，但是我不敢骂楼上每个周末都在装修的邻居。</p></blockquote><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/10/12/v2-6036a8cbbb9cad569200a765f55496ef_hd.jpg" srcset="/img/loading.gif" alt="img"></p><blockquote><p>17、人生只有一种结局，就是我们都知道的那种。你没到那一天，你就好好活着。</p></blockquote><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/10/12/v2-f0d714431dd791e50b70f7d1f5907f99_hd.jpg" srcset="/img/loading.gif" alt="img"></p><blockquote><p>18、你这样理直气壮的很好，我喜欢你这样。但我不行，我就做你的退路了。</p></blockquote><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/10/12/v2-324ef65db24fdc83b560cc9172b2562f_hd.jpg" srcset="/img/loading.gif" alt="img"></p><blockquote><p>19、人生还是稍微有点难的，你要有所准备，“加油”能解决的问题不多。</p></blockquote><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/10/12/v2-957b955ba89700d7a7682b9b633a9774_hd.jpg" srcset="/img/loading.gif" alt="img"></p><blockquote><p>20、小北，我咳嗽的时候，喝吐的时候，被鱼刺卡着的时候，有点难过的时候，你都要拍拍我的背，力度稍有不同，但都没什么用，是吧？但你总要做点什么，是吧？</p></blockquote><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/10/12/v2-084c7cc7d6f8b0a68627c28b039f1c81_hd.jpg" srcset="/img/loading.gif" alt="img"></p><hr><p>1、</p><blockquote><p><strong>日常生活中没什么可说但非得说点儿什么的时刻。</strong></p></blockquote><p>2、</p><blockquote><p>没有朋友多孤独啊？ 有了也一样。</p></blockquote><p>3、</p><blockquote><p><strong>我人生可以说是一帆风顺，没经历过什么挫折。 我活得这么丧，基本上是全靠自己的想象力。</strong></p></blockquote><p>4、</p><blockquote><p>人生的真相是这样的：我敢骂政府，骂世界，骂他妈的上帝； 我毁佛谤祖，我睥睨天下，                                                                                                    但是我不敢骂楼上每个周末都在装修的邻居。</p></blockquote><p>5、</p><blockquote><p><strong>大部分人都有一个经不起推敲的幻觉， 认为只要换换环境，自己的人生就会有起色。</strong></p></blockquote><p>6、</p><blockquote><p>我的柔情，你永远不懂装懂。</p></blockquote><p>7、</p><blockquote><p><strong>小北，我似乎从来没有过为了什么一定要怎么样的时候， 从来没有那么热烈过，即使是给你写的情书，也是压着手腕写。</strong><br><strong>当然你很好，你这样理直气壮的很好，我喜欢你这样，但是我不行，我就做你的退路好了。</strong></p></blockquote><p>8、</p><blockquote><p>“师傅，被人激怒了怎么办？特别怒，忍不了的那种。”</p></blockquote><p>9、</p><blockquote><p><strong>小北，每次见你都会惶恐，每次见你，脑子里都是一句没头没尾的烂台——你从人群中走来。</strong></p></blockquote><p>10、</p><blockquote><p>她：“我都不知道你今天走。”<br>我：“那天喝酒没说啊？”<br>她：“你吐得一塌糊涂。”<br>我：“我次次都是一塌糊涂。”</p></blockquote><p>11、</p><blockquote><p>“师父，可我觉得淡泊名利很酷啊。”“你这是吃饱了。”</p></blockquote><p>12、</p><blockquote><p><strong>小北，我咳嗽的时候，喝吐的时候，</strong><br><strong>被鱼刺卡着的时候，有点难过的时候，</strong><br><strong>你都要拍拍我的背，力度稍有不同，</strong><br><strong>但都没什么用，是吧？</strong><br><strong>但你总要做点什么，是吧？</strong></p></blockquote><p>13、</p><blockquote><p>小李发现，人们不愿意相信简单的事儿，                                                                                似乎相信了简单的事儿，自己那点儿智商就被浪费了。</p></blockquote><p>14、</p><blockquote><p><strong>开心点朋友们，人间不值得。</strong></p></blockquote><p>15、</p><blockquote><p>小北，我很久不给你写情话了，<br>我想，我是个普通人，怎么能那么爱你。</p></blockquote><p>16、</p><blockquote><p><strong>今夜无雨，各地的晚风都如释重负。</strong></p></blockquote><p>17、</p><blockquote><p>人生最重要的时刻就是你突然发现自己是错的那一刻，                                                           就是你转变掉观点的那一刻。</p></blockquote><p>18、</p><blockquote><p><strong>我喜欢人类，人类真的特别了不起，</strong><br><strong>进化出了智力，但很多时候选择不用。很潇洒的物种。</strong></p></blockquote><p>19、</p><blockquote><p>“结婚为什么要放爆竹啊？”<br>“想必是给自己壮胆吧。”</p></blockquote><p>20、</p><blockquote><p><strong>他吻我那天抽了红塔山，我到现在舌头上都是红塔山味儿。</strong></p></blockquote><p>21、</p><blockquote><p>小北，我说我喜欢你，你说然后呢，我说和你在一起，<br>你说然后呢，然后然后，哪儿有那么多的然后，<br>然后就一起活着啊，不然怎么样。</p></blockquote><p>22、</p><blockquote><p><strong>人生在世，你只要知道两件事。</strong><br><strong>第一件是这世上绝对存在不需要读书也很聪明，不需要努力也过得很好，</strong><br><strong>甚至不需要钱就能快乐的人。</strong><br><strong>第二件就是那个人绝对不是你。</strong></p></blockquote><p>23、</p><blockquote><p>想到，健身跑步，跟炼丹采药，追求的实在是一样的东西。</p></blockquote><p>24、</p><blockquote><p><strong>你这点儿内心世界都丰富在脸上了。</strong></p></blockquote><p>25、</p><blockquote><p>头疼，我一想到自己要做不想做的事，就会导致连想做的事都不想做了。</p></blockquote><p>26、</p><blockquote><p>都在健身，健身的人都颇自喜。</p></blockquote><p>27、</p><blockquote><p><strong>王大爷说，自己在家炖肉，在快熟的时候，会听见炖肉说，孤孤独独，孤孤，独独。</strong></p></blockquote><p>28、</p><blockquote><p>一切规律都是宇宙大王定下的，<br>有重力是因为他需要把海水按在地上，<br>有浮力是因为他认为鱼有资格飞行。</p></blockquote><p>29、</p><blockquote><p>小北，我想你，没有特别的花样，可说出来就显得很悲壮。</p></blockquote><p>30、</p><blockquote><p><strong>我没有初心，我的初心就是想躺着，</strong><br><strong>千万别跟我说勿忘初心，我正奋斗呢，你一劝，当场就躺下了。</strong></p></blockquote><p>31、</p><blockquote><p>开心点吧朋友们，人间不值得。</p></blockquote><p>32、</p><blockquote><p><strong>正是“要做有趣的人”这一追求的广为流传，</strong><br><strong>使世界上多了好多无趣还很努力的人。</strong></p></blockquote><p>33、</p><blockquote><p>人与人难以交流是怕熟知终会导致全面的乏味，<br>人与人相爱是让人在活着时就能体验死亡。</p></blockquote><p>34、</p><blockquote><p><strong>朋友说，我无端发笑的次数越来越多了。</strong><br><strong>可我想念你的次数却没有减少。</strong></p></blockquote><p>35、</p><blockquote><p>他们有许多关于爱的道理，我有你。</p></blockquote><p>36、</p><blockquote><p><strong>未曾开言，我先笑场。笑场完了，听我诉一诉衷肠。</strong></p></blockquote><p>37、</p><blockquote><p>人要多脆弱，才会宣告自己热爱某一样东西。</p></blockquote><p>38、</p><blockquote><p>土地，归于耕种的人；耕种的人，归于掌权的人；<br>掌权的人，归于空虚。</p></blockquote><p>39、</p><blockquote><p><strong>忍不了也要逼自己冷静，心里从一数到十，做二十个深呼吸，</strong><br><strong>默诵大悲咒，回想生命里美好的东西，</strong><br><strong>感觉自己的心态慢慢平和下来，然后再捅他比较准头。</strong></p></blockquote><p>40、</p><blockquote><p>这世上能给人选的多数都是假象，其中最假的就是让人以为。</p></blockquote><p>41、</p><blockquote><p><strong>天花板后面是星空，星空后面是我想象力受辱的地方，</strong><br><strong>风中的人都自以为坚毅，却都缩着脖子。</strong></p></blockquote><p>42、</p><blockquote><p><strong>天青色等烟雨，而我在等你。</strong></p></blockquote><hr><blockquote><p>1、仪式感，就是给没意义的事情找意义。</p><p>2、有人觉得吃方便面很幸福，有人觉得吃方便面很不幸。世上大概就是这么两种人。</p><p>3、佛祖能教你的道理，概率论都能教得更好</p><p>4、我已经懂得了此处和别处并无什么不同。”懂了这个，就懂了很多。”</p><p>5、在个人思考史上，意识到自己错了，是最具启发性的时刻。</p><p>6、对于死去的人来说，死去的是我们。</p><p>7.都知道圣诞老人是骗局，你知道这个骗局是谁编的吗?是驯鹿——想成为传说却不想做主角，很多人都是这样的性格。</p><p>8、“热爱、欲望、幸福，都是一种能力，不是你做到什么什么事会自动来的，要自己训教，这是我快五十岁了能告诉你的一个简单的道理。</p><p>9、“没有朋友多孤独啊？”“有了也一样。</p><p>10、有天赋天赋就是个负担，没有天赋生命就是个负担啊。</p><p>11、我们都是从一个幻觉到另一个幻觉。有的人幻觉看起来比较高级，耗费了更多的努力，就以为找到真实了。</p><p>12、与人为善是笨蛋为了弥补自己的愚蠢采取的策略。</p><p>13、我有足够证据证明我们此刻就生活在地狱里，证据就是我们居然认为还存在天堂。</p><p>14、我没有初心，我的初心就是想躺着，千万别跟我说勿忘初心，我正奋斗呢，你一劝，当场就躺下了。</p><p>15、风中的人都自以为坚毅。却都缩着脖子。</p><p>16、众生平等，不是说众生都有一样的价值，而是说众生都一样没有价值。</p><p>17、“骂人的时候，没必要那么严谨。”</p><p>18、我喜欢人类，人类真的特别了不起，进化出了智力，但很多时候选择不用。很潇洒的物种。</p><p>19、我人生可以说是一帆风顺，没经历过什么挫折。我活得这么丧，基本上是全靠自己的想象力。</p><p>20、人生在世，你只要知道两件事。一，这世上绝对存在不需要读书也很聪明，不需要努力也过得很好，甚至不需要钱就能快乐的人。二，那个人绝对不是你。</p><p>21、大部分人都有一个经不起推敲的幻觉，认为只要换换环境，自己的人生就会有起色。</p><p>22、正是“要做有趣的人”这一追求的广为流传，使世界上多了好多无趣还很努力的人。</p><p>23、再互相憎恨的人 也得睡在同一个夜里</p><p>24、人是活出来的，不是想出来的。</p><p>25、可能这就是问题的关键 。我们爱的是月亮 ，不是月球。</p><p>26、这世上能给人选的多数都是假象，其中最假的就是让人以为自己有得选。</p><p>27、不明白你们遇到好事为什么要掐腿揉眼睛，真醒了怎么办？</p><p>28、头疼，我一想到自己要做不想做的事，就会导致连想做的事都不想做了。</p><p>29、想到这已经是人类历史上最好的时代了，你是不是更绝望了。</p></blockquote><hr><blockquote><p>1.人生的真相是这样的：我敢骂政府，骂世界，骂他妈的上帝；我毁佛谤祖，我睥睨天下，但是我不敢骂楼上每个周末都在装修的邻居。</p><p>2.“没有朋友多孤独啊？”“有了也一样。”</p><p>3.大部分人都有一个经不起推敲的幻觉，认为只要换换环境，自己的人生就会有起色。</p><p>4.我人生可以说是一帆风顺，没经历过什么挫折。我活得这么丧，基本上是全靠自己的想象力。</p><p>5.仪式感，就是给没意义的事情找意义</p><p>6.春风得意的脸很难看呀</p><p>7.看到好多人慢慢疯了，纷纷崩溃，从此过上幸福生活</p><p>8.我们对真相无能为力，除了了解它</p><p>9.“热爱、欲望、幸福，都是一种能力，不是你做到什么什么事会自动来的，要自己训教，这是我快五十岁了能告诉你的一个简单的道理。</p></blockquote><hr><p><strong>01</strong></p><blockquote><p>有人觉得吃方便面很幸福，有人觉得吃方便面很不幸。世上大概就是这么两种人。</p></blockquote><p><strong>02</strong></p><blockquote><p>“没有朋友多孤独啊？”“有了也一样。”</p></blockquote><p><strong>03</strong></p><blockquote><p>人生的真相是这样的：我敢骂政府，骂世界，骂他妈的上帝；我毁佛谤祖，我睥睨天下，但是我不敢骂楼上每个周末都在装修的邻居。</p></blockquote><p><strong>04</strong></p><blockquote><p>“结婚为什么要放爆竹啊？”“想必是给自己壮胆吧。”</p></blockquote><p><strong>05</strong></p><blockquote><p>不明白你们遇到好事为什么要掐腿揉眼睛，真醒了怎么办？</p></blockquote><p><strong>06</strong></p><blockquote><p>我已经懂得了此处和别处并无什么不同。”“懂了这个，就懂了很多。”</p></blockquote><p><strong>07</strong></p><blockquote><p>有天赋天赋就是个负担，没有天赋生命就是个负担啊。</p></blockquote><p><strong>08</strong></p><blockquote><p>我很怕遇到真相时，当它是另一个幻觉。</p></blockquote><p><strong>09</strong></p><blockquote><p>我没有初心，我的初心就是想躺着，千万别跟我说勿忘初心，我正奋斗呢，你一劝，当场就躺</p></blockquote><p><strong>10</strong></p><blockquote><p>想到这已经是人类历史上最好的时代了，你是不是更绝望了。</p></blockquote><p><strong>11</strong></p><blockquote><p>我喜欢人类，人类真的特别了不起，进化出了智力，但很多时候选择不用。很潇洒的物种。</p></blockquote><p><strong>12</strong></p><blockquote><p>人生在世，你只要知道两件事。一，这世上绝对存在不需要读书也很聪明，不需要努力也过得很好，甚至不需要钱就能快乐的人。二，那个人绝对不是你。</p></blockquote><p><strong>13</strong></p><blockquote><p>佛祖能教你的道理，概率论都能教得更好。</p></blockquote><p><strong>14</strong></p><blockquote><p>条条大路通罗马，可是我不想去罗马。。</p></blockquote><p><strong>15</strong></p><blockquote><p>再互相憎恨的人 也得睡在同一个夜里。</p></blockquote><p><strong>16</strong></p><blockquote><p>头疼，我一想到自己要做不想做的事，就会导致连想做的事都不想做。</p></blockquote><p><strong>17</strong></p><blockquote><p>大部分人都有一个经不起推敲的幻觉，认为只要换换环境，自己的人生就会有起色。</p></blockquote><p><strong>18</strong></p><blockquote><p>风中的人都自以为坚毅。却都缩着脖子。</p></blockquote><p><strong>19</strong></p><blockquote><p>众生平等，不是说众生都有一样的价值，而是说众生都一样没有价值。</p></blockquote><p><strong>20</strong></p><blockquote><p>对于死去的人来说，死去的是我们。</p></blockquote><h2 id="番外话"><a href="#番外话" class="headerlink" title="番外话:"></a>番外话:</h2><p><strong>01</strong></p><blockquote><p>人间不值得</p></blockquote><p><strong>02</strong></p><blockquote><p>买不起你们怎么不去死</p></blockquote><hr><blockquote><p>1、我想你，没有什么特别的花样，可说出来就显得很悲壮。</p><p>2、你这样理直气壮的很好，我喜欢你这样，但若不行，我就做你的退路好了。</p><p>3、我很久不给你写情话了，我想，我是个普通人，怎么能那么爱你。</p><p>4、他们有许多关于爱的道理，我有你。</p><p>5、他吻我的那天抽了红塔山 我到现在舌头上都是红塔山味儿</p><p>6、朋友说，我无端发笑的次数越来越多了。可我想念你的次数却没有减少。</p><p>7、不好说喜欢，只是看见你会乱。</p><p>8、不好说想娶，只是想永远和你在一起。</p><p>9、只有你见过我笨嘴拙舌的。</p><p>10、于是我们相爱，手心湿得像海。</p><p>11、酒劲儿就要退下去了，我还没有想到不吵醒你的抒情的方式。</p><p>12、每次见你都会惶恐，每次见你，脑袋里都是一句没头没尾的烂台词——你从人群中走来</p><p>13、我很久不说轻薄的话了，无论是对世界还是对你。</p><p>14、起初，你拉我一起看雨，大雨里百鬼夜行，我们混在其中，比鬼还高兴</p><p>15、我很俗，我很丧，但我想给你快乐，除了快乐我什么都给不了你</p></blockquote><p><strong>欢迎关注微信公众号 ：</strong></p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006y8mN6gy1g7d3llw1nkj30b40b4wee.jpg" srcset="/img/loading.gif" alt="欢迎关注公众号" style="width: 100px" />]]></content>
    
    
    <categories>
      
      <category>Other</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Other</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kafka查看topic、consumer group状态命令</title>
    <link href="/2020/09/25/Kafka%E6%9F%A5%E7%9C%8Btopic%E3%80%81consumer-group%E7%8A%B6%E6%80%81%E5%91%BD%E4%BB%A4/"/>
    <url>/2020/09/25/Kafka%E6%9F%A5%E7%9C%8Btopic%E3%80%81consumer-group%E7%8A%B6%E6%80%81%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/09/25/gRRkFv.jpg" srcset="/img/loading.gif" alt="1"></p><p>以下命令中使用的zookeeper配置地址为127.0.0.1:2181，bootstrap–server(即broker)地址为: 127.0.0.1:9292</p><p>1，查看kafka topic列表，使用–list参数</p><p><code>bin/kafka-topics.sh --zookeeper 127.0.0.1:2181 —list</code><br> __consumer_offsets<br> lx_test_topic<br> test<br> 2，查看kafka特定topic的详情，使用–topic与–describe参数</p><p><code>bin/kafka-topics.sh --zookeeper 127.0.0.1:2181 --topic lx_test_topic --describe</code><br> Topic:lx_test_topic     PartitionCount:1        ReplicationFactor:1     Configs:<br> Topic: lx_test_topic    Partition: 0    Leader: 0       Replicas: 0     Isr: 0<br> 列出了lx_test_topic的parition数量、replica因子以及每个partition的leader、replica信息</p><p>3，查看consumer group列表，使用–list参数</p><p>查看consumer group列表有新、旧两种命令，分别查看新版(信息保存在broker中)consumer列表和老版(信息保存在zookeeper中)consumer列表，因而需要区分指定bootstrap–server和zookeeper参数：</p><p><code>bin/kafka-consumer-groups.sh --new-consumer --bootstrap-server 127.0.0.1:9292 --list</code><br> lx_test<br> bin/kafka-consumer-groups.sh –zookeeper 127.0.0.1:2181 –list<br> console-consumer-86845<br> console-consumer-11967</p><p>4，查看特定consumer group 详情，使用–group与–describe参数</p><p>同样根据新/旧版本的consumer，分别指定bootstrap-server与zookeeper参数:</p><p><code>bin/kafka-consumer-groups.sh --new-consumer --bootstrap-server 127.0.0.1:9292 --group lx_test --describe</code><br> GROUP                          TOPIC                          PARTITION  CURRENT-OFFSET  LOG-END-OFFSET  LAG             OWNER<br> lx_test                        lx_test_topic             0          465             465             0               kafka-python-1.3.1_/127.0.0.1<br> bin/kafka-consumer-groups.sh –zookeeper 127.0.0.1:2181 –group console-consumer-11967 –describe<br> GROUP                          TOPIC                          PARTITION  CURRENT-OFFSET  LOG-END-OFFSET  LAG             OWNER<br> Could not fetch offset from zookeeper for group console-consumer-11967 partition [lx_test_topic,0] due to missing offset data in zookeeper.<br> console-consumer-11967         lx_test_topic             0          unknown         465             unknown         console-consumer-11967_aws-lx-1513787888172-d3a91f05-0</p><p> 其中依次展示group名称、消费的topic名称、partition id、consumer group最后一次提交的offset、最后提交的生产消息offset、消费offset与生产offset之间的差值、当前消费topic-partition的group成员id(不一定包含hostname)</p><p>上面示例中console-consumer-11967是为了测试临时起的一个console consumer，缺少在zookeeper中保存的current_offset信息。</p><p><strong>欢迎关注微信公众号 ：</strong></p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006y8mN6gy1g7d3llw1nkj30b40b4wee.jpg" srcset="/img/loading.gif" alt="欢迎关注公众号" style="width: 100px" />]]></content>
    
    
    <categories>
      
      <category>Kafka</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kafka</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>帮助乔布斯写出斯坦福演讲稿的人走了</title>
    <link href="/2020/06/27/%E5%B8%AE%E5%8A%A9%E4%B9%94%E5%B8%83%E6%96%AF%E5%86%99%E5%87%BA%E6%96%AF%E5%9D%A6%E7%A6%8F%E6%BC%94%E8%AE%B2%E7%A8%BF%E7%9A%84%E4%BA%BA%E8%B5%B0%E4%BA%86/"/>
    <url>/2020/06/27/%E5%B8%AE%E5%8A%A9%E4%B9%94%E5%B8%83%E6%96%AF%E5%86%99%E5%87%BA%E6%96%AF%E5%9D%A6%E7%A6%8F%E6%BC%94%E8%AE%B2%E7%A8%BF%E7%9A%84%E4%BA%BA%E8%B5%B0%E4%BA%86/</url>
    
    <content type="html"><![CDATA[<p>帮助乔布斯写出斯坦福演讲稿的人走了。再见，霍利（Michael Hawley）教授。</p><p>也许很多人会觉得奇怪：这不是乔布斯自己的经典演说吗？2005 年 6 月 12 日，乔布斯受邀在斯坦福大学毕业典礼上发表演说，以自己辍学、创业和患病的亲身经历，鼓励学生们把握短暂的人生，努力改变世界。</p><p>这场演说留下了太多的经典名句，尤其是引用七十年代杂志《全球通揽》(The Whole Earth Catalog)上的那句 “求知若渴，虚心若愚”（Stay Hungry，Stay Foolish）。</p><p>那场演说的确是乔布斯自己写的，他并没有找人代笔，但乔布斯的一位好友也提供了诸多帮助。本周刚刚去世的麻省理工大学媒体实验室教授霍利帮助乔布斯修改了演讲稿的结尾，提炼了画龙点睛的句子，完美概括了乔布斯的毕生追求与梦想。</p><p>《乔布斯传》关于这篇演讲稿的部分并没有提到霍利，外界也始终不知道这背后的故事。美国知名编剧索尔金 (Anron Sorkin)后来回忆说，乔布斯曾经想找自己写演讲稿，但自己却让乔布斯亲自动笔。乔布斯直到最后一周才决定自己来写，成文之后发给索尔金看了一眼。索尔金并不知道乔布斯找了霍利来润色稿件。</p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/06/27/e234-ivmqpck2084862.png" srcset="/img/loading.gif" alt="帮助乔布斯写出斯坦福演讲稿的人走了"></p><p>十多年时间过去了，极其低调的霍利从来没有对外界透露过相关信息。直到去年，乔布斯演说中提到的《全球通揽》主编斯图尔特 · 布兰德 (Steward Brand)才透露，其实霍利帮助乔布斯写就了这篇伟大的演说词，包括修改演说最后结尾部分。</p><p>随后在媒体追问下，霍利才承认自己的确参与了演讲稿。但他却请媒体不要过多报道，“这件事我不想公开说。这只是在帮好朋友的忙，他需要一个人给点建议。”(这是 Cult Of Mac 记者在霍利去世之后回忆的去年采访内容)。</p><p>58 岁的霍利教授本周因为结肠癌在他位于马萨诸塞州剑桥的家中去世，他的小儿子还不满三岁。在他生命的最后时刻，他的好友们在网上组织了一场活动，一一向霍利教授告别。已经 81 岁的布兰德再次提到了斯坦福演讲，称这是霍利最不为人知却可能是影响最大的一件作品。</p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/06/27/2d56-ivmqpck2085782.png" srcset="/img/loading.gif" alt="帮助乔布斯写出斯坦福演讲稿的人走了"></p><p>乔布斯的小儿子、28 岁的里德 · 乔布斯 (Reed Jobs)也在网上和霍利告别，再次证实了霍利对那篇演讲稿帮助很大。里德亲自念了乔布斯在演讲前五天给霍利写的邮件，“真是让人尴尬。我真的不擅长这种演讲，从来没做过毕业演讲。我给你发一些我写的东西，你可千万别吐。”(I’ll send you something. But please don’t puke.)霍利幽默的回复说，“看来斯坦福本科生不是唯一熬夜的人群了。”(脾气暴躁的乔布斯能用这种语气写邮件，可见两人关系有多亲密。)</p><p>在看过初稿之后，霍利对乔布斯表示，“就像一个伟大的喜剧演员说笑话，一个杰出的作曲家作曲一样，你需要在结尾有画龙点睛的句子。我觉得你需要多想想结尾部分。我很喜欢你初稿里提到《全球概揽》杂志，我也是看着这杂志成长的。Hungry Foolish 的真言实际上来自于一个印度教神话。我试着重写了这部分…… 只是一些想法。祝你好运！”</p><p>在两人邮件互动的最后，乔布斯回复说，“天啊，我都没多少时间了，还有好多事要做。”(Gosh, I have far to go and not much time.)说到这里，里德似乎想到了自己九年前逝去的父亲和即将告别的霍利，伤感地对霍利说，“我只想告诉你，我们都爱你。我们曾经相处的时间一直很美好，感谢你一直是这么不可思议的人。”</p><p>实际上，霍利不仅帮助乔布斯润色写出了斯坦福演说，后来还帮助好友谷歌联合创始人拉里 · 佩奇写出了 2009 年的密歇根大学演说辞。不过，霍利给这个世界带来的，远远不止几篇激动人心的演说辞。</p><p>才华横溢的霍利就像是 “人文和科技的十字路口”的最好诠释。他是这个世界为数不多同时拥有极高艺术和计算机造诣的人。他的爱好兴趣如此广泛，却又触类旁通，他同时兼具大学教授、软件程序员、钢琴家、摄影师、旅行家、登山者等诸多身份，更预见和亲自打造了电子书、电子字典、物联网等诸多未来技术潮流。</p><p>霍利的父亲是大名鼎鼎的贝尔实验室工程师。早在少年时，霍利就在贝尔实验室实习。上世纪八十年代初，他获得了耶鲁大学的音乐和计算机科学双学位。毕业后霍利去了法国，加入了蓬皮杜艺术中心声学音乐研究协作学院 (IRCAM)，帮助音乐大师布勒兹 (Pierre Boulez)打造出了全球最早的乐谱编辑软件；随后他来到旧金山湾区加入了电影大师乔治 · 卢卡斯 (George Lucas)的卢卡斯电影公司 (Lucasfilm)，参与打造出了音频工作室 SoundDroid。</p><p>乔布斯是在卢卡斯电影公司认识霍利的。他离开苹果后创办了教育行业电脑创业公司 NeXT，也把霍利带到了这里。在 NeXT 工作期间，霍利帮助乔布斯打造了全球第一个数字图书馆，将莎士比亚、达尔文等诸多巨作制作成电子版；他的工作还包括了打造出第一部电子版韦氏词典。</p><p>伊萨克森根据乔布斯口述写出的那本《乔布斯传》里，也有关于霍利的记录。“乔布斯希望在 NeXT 电脑里加入有价值的内容。工程师霍利为他打造了一本电子词典。霍利还从牛津大学出版社的朋友那里得知他们正在重订莎士比亚作品，他马上就想到把莎士比亚的作品输入 NeXT 电脑的内存。霍利给乔布斯打电话说了此事，后者对此非常感兴趣。两人随后就飞到了英国牛津，乔布斯开出了高价谈下了版权。他们还去了英国伟大诗人拜伦常去的酒吧喝酒庆祝。”</p><p>乔布斯是如此器重同时拥有艺术和电脑天分的霍利，甚至曾经让他在自己家里小住。乔布斯似乎特别器重有艺术气息和良好品味的人，对苹果前首席设计师乔纳森 · 艾维 (Jonathan Ive)也是敬佩有加。</p><p>据乔布斯小儿子里德回忆说，硅谷 Palo Alto 的那个乔布斯故居，都是霍利陪乔布斯在八十年代买的。1989 年乔布斯遇到未来妻子劳伦娜 (Laurene Jobs)的时候，也和霍利咨询过建议。(现在乔布斯遗孀已经搬到旧金山市区的新豪宅居住了。)</p><p>霍利后来回麻省理工学院拿到了电子工程博士学位，导师是被称为 “人工智能之父”的明斯基教授 (Marvin Minsky，2016 年去世)。1993 年，麻省理工学院教授尼葛洛庞蒂 (Nicholas Negroponte)亲自招徕霍利来到大名鼎鼎的 MIT媒体实验室。</p><p>在 MIT媒体实验室担任特别项目主管的时间里，霍利的研究项目横跨了新闻学、心理学、视频制作、人机交互、纪实摄影等等。(现年 76 岁的尼葛洛庞蒂也是互联网时代的先驱人物，九十年代中期的《数字化生存》一书预见到了未来的互联网时代生活方式。相信年过不惑的人都看过或者听说过这本书。)</p><p>用霍利自己的话来说，他在 MIT实验室的研究项目致力于 “创造性拓展数字化基础架构，将智能嵌入到所有人工产品中，推进它们的通信”。他领导 MIT实验室先后推出了 GO Expeditions、Things That Think、Toys of Tomorrow、Counter Intelligence 等诸多项目，预见了未来万物互联的物联网趋势。霍利在 MIT媒体实验室期间，还打造出了全球第一个心率探测器。</p><p>在过去的十多年时间，离开麻省理工学院的霍利一方面担任科技公司的董事，一方面专注于自己的非营利性教育机构 Friendly Planet。</p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/06/27/20200627084848_9456.jpg" srcset="/img/loading.gif" alt="image.png"></p><p>值得一提的是，音乐专业毕业的霍利还是一位接近专业的钢琴和管风琴演奏师。他在马萨诸塞州剑桥的家中拥有三架价格不菲的钢琴。2002 年，霍利曾经获得过钢琴大师范克立本 (Van Cliburn)基金会主办的第三届全球业余钢琴比赛冠军。</p><p>此外，霍利改编了音乐大师伯恩斯坦 (Leonard Bernstein)的《西区故事》(West Side story)交响乐曲的钢琴版。他的玩票经历还包括在管弦乐团亲自出任钢琴演奏师，在音乐家汀达尔 (Blair Tindall)的婚礼上和大提琴家马友友联袂演出。</p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/06/27/2391-ivmqpck2087812.png" srcset="/img/loading.gif" alt="帮助乔布斯写出斯坦福演讲稿的人走了"></p><p>除了艺术天分，霍利还是一位旅行家、马拉松和登山爱好者。他走过全球六个大陆的六十多个国家，参加过多次马拉松比赛，组织了对珠穆朗玛峰的科考登山。他的婚礼也是在不丹最古老的寺庙祈楚寺中举办的，妻子是一位柬埔寨出生的亚裔女士。</p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/06/27/c1dd-ivmqpck2088467.png" srcset="/img/loading.gif" alt="帮助乔布斯写出斯坦福演讲稿的人走了"></p><p>霍利在旅行人文摄影方面也颇有造诣，曾经为《国家地理》、《时代杂志》等诸多主流媒体撰写稿件和拍摄照片，2003 年他为不丹制作了世界上最大的画册。由于在数码摄影方面的兴趣，霍利还曾经担任过柯达公司的董事。</p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/06/27/5230-ivmqpck2089778.png" srcset="/img/loading.gif" alt="帮助乔布斯写出斯坦福演讲稿的人走了"></p><p>虽然一生成就颇丰，但霍利却认为自己最大的成就感来自家庭生活。去年十月，被检测出结肠癌的霍利在一次演讲中表示，“在拥有我们梦想的孩子之后，我却被检测出了癌症，我的身体经历了手术化疗，体重减轻了 60 磅 (约合 54 斤)。我觉得看待这段人生经历的最好方式是，这是一种礼物，因为它会给你带来同理心，让你知道一些事情比你想象的更重要。你和人的关系才是最重要的。”</p><p>在上文提到，由于新冠疫情的原因，在霍利生命的最后时刻，他的朋友们无法亲自来告别。尼葛洛庞蒂教授因此组织了一场网上聚会，让霍利的朋友们一一和他最后作别，其中包括了互联网缔造者之一的克莱恩洛克 (Leonard Kleinrock)、加拿大建筑师萨夫迪 (Moshe Safdie)、明斯基教授的遗孀以及 MIT媒体实验室的老同事们。</p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/06/27/a31a-ivmqpck2090722.png" srcset="/img/loading.gif" alt="帮助乔布斯写出斯坦福演讲稿的人走了"></p><p>在告别会的最后，已经病入膏肓的霍利表示，“我一直是个害羞的人，我认识你们很久了，我爱你们。谢谢你们给我组织这场告别，很抱歉我没有太多时间一一感谢你们的善意。演奏钢琴有很多场所，可以在喧闹的酒吧，也可以在宏大的音乐厅。但我最喜欢的场合却是 15-16 个好友相聚的小型室内音乐会。最重要的不是钢琴曲，也不是钢琴师。真正的音乐是相聚的人们，这让我们的记忆如此深刻和美好。”</p><p>附上乔布斯斯坦福演讲稿的最后部分：</p><p>你们的时间都有限，所以不要按照别人的意愿去活，这是浪费时间。不要囿于成见，那是在按照别人设想的结果而活。不要让别人观点的聒噪声淹没自己的心声。最主要的是，要有跟着自己感觉和直觉走的勇气。无论如何，感觉和直觉早就知道你到底想成为什么样的人，其他都是次要的。</p><p>我年轻时有一本非常好的刊物，叫《全球概览》（The WholeEarth Catalog），这是我那代人的宝书之一，创办人名叫斯图尔特 · 布兰德 (StewartBrand)，就住在离这儿不远的门洛帕克市。他用诗一般的语言把刊物办得生动活泼。那是 20 世纪 60 年代末，还没有个人电脑和桌面印刷系统，全靠打字机、剪刀和宝丽莱照相机（Polaroid）。它就像一种纸质的 Google，却比 Google 早问世了 35 年。这份刊物太完美了，查阅手段齐备、构思不凡。</p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/06/27/20200627084823_2445.jpg" srcset="/img/loading.gif" alt="image.png"></p><p>斯图尔特和他的同事们出了好几期《全球概览》，到最后办不下去时，他们出了最后一期。那是 20 世纪 70 年代中期，我也就是你们现在的年纪。最后一期的封底上是一张清晨乡间小路的照片，就是那种爱冒险的人等在那儿搭便车的那种小路。照片下面写道：好学若饥、谦卑若愚。那是他们停刊前的告别辞。求知若渴，大智若愚。这也是我一直想做到的。</p><p>眼下正值诸位大学毕业、开始新生活之际，我同样愿大家：<strong>好学若饥、谦卑若愚</strong>。</p><p><strong>扫码获取更多：</strong></p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006y8mN6gy1g7d3llw1nkj30b40b4wee.jpg" srcset="/img/loading.gif" alt="欢迎关注公众号" style="width: 100px" />]]></content>
    
    
    <categories>
      
      <category>Other</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Other</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>私人珍藏网站</title>
    <link href="/2020/06/24/%E7%A7%81%E4%BA%BA%E7%8F%8D%E8%97%8F%E7%BD%91%E7%AB%99/"/>
    <url>/2020/06/24/%E7%A7%81%E4%BA%BA%E7%8F%8D%E8%97%8F%E7%BD%91%E7%AB%99/</url>
    
    <content type="html"><![CDATA[<p><strong>1、多吉搜索（🐂）</strong></p><p><a href="https://www.dogedoge.com/" target="_blank" rel="noopener">https://www.dogedoge.com/</a></p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/06/24/640.png" srcset="/img/loading.gif" alt="img"></p><p><strong>功能</strong>：比百度、搜狗<strong>更简洁，无追踪、不误导、注重用户的隐私。</strong>主界面和搜索界面简洁清新，搜索体验更佳。</p><p><strong>2、Magi（🐂）</strong></p><p><a href="https://magi.com/" target="_blank" rel="noopener">https://magi.com/</a></p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/06/24/640-20200624204951165.png" srcset="/img/loading.gif" alt="img"></p><p><strong>功能</strong>：类似于民用版的IBM Watson或非学术版的Wolfram Alpha,鼠标放在右侧的<strong>“主要学习来源”</strong>上，Magi会给出佐证标签的来源。让知识结构化，了解它们之间的关联性。</p><p><strong>3、大数据导航（🐂）</strong></p><p><a href="http://hao.199it.com/" target="_blank" rel="noopener">http://hao.199it.com/</a></p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/06/24/640-20200624204956474.png" srcset="/img/loading.gif" alt="img"></p><p><strong>功能</strong>：大数据导航，收录了大量的大数据分析站：<strong>百度指数、微信指数、头条指数；统计机构、教育数据、互联网趋势等</strong>，点击网页分析更加方便，有助于用户分析。</p><p><strong>分类网站</strong></p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/06/24/zmm7mw.jpg" srcset="/img/loading.gif" alt="img"></p><p><strong>电影网</strong> </p><p><strong>1、美剧鸟</strong></p><p><a href="http://www.meijuniao.com" target="_blank" rel="noopener">http://www.meijuniao.com</a></p><p><strong>2、美剧在线</strong></p><p><a href="https://lvnvl.cn" target="_blank" rel="noopener">https://lvnvl.cn</a></p><p><strong>3、电影猫</strong></p><p><a href="http://www.mvcat.com" target="_blank" rel="noopener">http://www.mvcat.com</a></p><p><strong>4、音范丝</strong></p><p><a href="http://www.yinfans.me" target="_blank" rel="noopener">http://www.yinfans.me</a></p><p><strong>5、想看剧</strong></p><p><a href="https://www.xiangkanju.cc" target="_blank" rel="noopener">https://www.xiangkanju.cc</a></p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/06/24/DJGxlL.jpg" srcset="/img/loading.gif" alt="img"></p><p><strong>无损音乐下载</strong> </p><p><strong>1、疯狂音乐</strong></p><p><a href="https://music.ifkdy.com" target="_blank" rel="noopener">https://music.ifkdy.com</a></p><p><strong>2、51无损音乐</strong></p><p><a href="http://www.51ape.com" target="_blank" rel="noopener">http://www.51ape.com</a></p><p><strong>3、果汁音乐</strong></p><p><a href="http://guozhivip.com/yinyue/" target="_blank" rel="noopener">http://guozhivip.com/yinyue/</a></p><p><strong>4、tunefind（国外音乐）</strong></p><p><a href="http://tunefind.com" target="_blank" rel="noopener">http://tunefind.com</a></p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/06/24/p4Bu8z.jpg" srcset="/img/loading.gif" alt=""></p><p><strong>插件网</strong> </p><p><strong>1、极简插件</strong></p><p><a href="https://chrome.zzzmh.cn" target="_blank" rel="noopener">https://chrome.zzzmh.cn</a></p><p><strong>2、extfans插件</strong></p><p><a href="https://www.extfans.com" target="_blank" rel="noopener">https://www.extfans.com</a></p><p><strong>3、gugeapps插件</strong></p><p><a href="https://www.gugeapps.net" target="_blank" rel="noopener">https://www.gugeapps.net</a></p><p><strong>4、谷歌插件英雄榜</strong></p><p><a href="https://zhaoolee.gitbooks.io/chrome/content/" target="_blank" rel="noopener">https://zhaoolee.gitbooks.io/chrome/content/</a></p><p><strong>5、油猴网</strong></p><p><a href="https://www.tampermonkey.net" target="_blank" rel="noopener">https://www.tampermonkey.net</a></p><p><strong>6、脚本网</strong></p><p><a href="https://greasyfork.org/zh-CN" target="_blank" rel="noopener">https://greasyfork.org/zh-CN</a></p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/06/24/YgKxue.jpg" srcset="/img/loading.gif" alt="img"></p><p><strong>软件网</strong> </p><p><strong>1、正版中国</strong></p><p><a href="https://getitfree.cn/" target="_blank" rel="noopener">https://getitfree.cn/</a></p><p><strong>2、吾爱破解</strong></p><p><a href="https://www.52pojie.cn/" target="_blank" rel="noopener">https://www.52pojie.cn/</a></p><p><strong>4、ZD423</strong></p><p><a href="http://www.zdfans.com" target="_blank" rel="noopener">http://www.zdfans.com</a></p><p><strong>5、少数派</strong></p><p><a href="https://sspai.com" target="_blank" rel="noopener">https://sspai.com</a></p><p><strong>6、最美应用</strong></p><p><a href="http://zuimeia.com" target="_blank" rel="noopener">http://zuimeia.com</a></p><p><strong>7、软件缘</strong></p><p><a href="https://www.appcgn.com" target="_blank" rel="noopener">https://www.appcgn.com</a></p><p><strong>8、微博@vposy</strong>（Adobe系列）</p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/06/24/eQm6r9.jpg" srcset="/img/loading.gif" alt="img4"></p><p><strong>素材网</strong> </p><p><strong>1、极简简历</strong></p><p><a href="https://www.polebrief.com/" target="_blank" rel="noopener">https://www.polebrief.com/</a></p><p><strong>2、插画库</strong></p><p><a href="http://undraw.co/illustrations" target="_blank" rel="noopener">http://undraw.co/illustrations</a></p><p><strong>3、优品PPT</strong></p><p><a href="http://www.ypppt.com/" target="_blank" rel="noopener">http://www.ypppt.com/</a></p><p>4、符号库</p><p><a href="http://www.fuhaoku.com/" target="_blank" rel="noopener">http://www.fuhaoku.com/</a></p><p>5、wallhaven壁纸</p><p><a href="https://wallhaven.cc/" target="_blank" rel="noopener">https://wallhaven.cc/</a></p><p>6、头像网</p><p><a href="http://www.gx8899.com" target="_blank" rel="noopener">http://www.gx8899.com</a></p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/06/24/widow-flower-5181497_960_720.jpg" srcset="/img/loading.gif" alt="Widow Flower, Flower, Purple, Spring"></p><p><strong>壁纸网</strong> </p><p><strong>1、wallhaven</strong></p><p><a href="https://wallhaven.cc/" target="_blank" rel="noopener">https://wallhaven.cc/</a></p><p><strong>2、pixabay</strong></p><p><a href="https://pixabay.com/" target="_blank" rel="noopener">https://pixabay.com/</a></p><p><strong>3、wallpaper</strong></p><p><a href="https://www.wallpaperup.com/" target="_blank" rel="noopener">https://www.wallpaperup.com/</a></p><p><strong>4、pexels</strong></p><p><a href="https://www.pexels.com/" target="_blank" rel="noopener">https://www.pexels.com/</a></p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/06/24/girl-3033718_960_720.jpg" srcset="/img/loading.gif" alt="女孩"></p><p><strong>学术网</strong> </p><p>1、<strong>万千合集站</strong></p><p><a href="http://toplinks.cc/s/" target="_blank" rel="noopener">http://toplinks.cc/s/</a></p><p><strong>2、科塔学术导航</strong></p><p><a href="https://site.sciping.com" target="_blank" rel="noopener">https://site.sciping.com</a></p><p><strong>3、仿知网</strong></p><p><a href="https://cn-ki.net" target="_blank" rel="noopener">https://cn-ki.net</a></p><p><strong>4、正版中国</strong></p><p><a href="https://getitfree.cn" target="_blank" rel="noopener">https://getitfree.cn</a></p><p><strong>5、wikiHow</strong></p><p><a href="http://zh.wikihow.com" target="_blank" rel="noopener">http://zh.wikihow.com</a></p><p><strong>6、猿学</strong></p><p><a href="https://yuanxue365.com" target="_blank" rel="noopener">https://yuanxue365.com</a></p><p><strong>7、壹课堂</strong></p><p><a href="https://1ketang.com" target="_blank" rel="noopener">https://1ketang.com</a></p><p><strong>8、问答库</strong></p><p><a href="http://asklib.com" target="_blank" rel="noopener">http://asklib.com</a></p><p><strong>9、译学馆</strong></p><p><a href="http://yxapp.com" target="_blank" rel="noopener">http://yxapp.com</a></p><p><strong>10、Coursade</strong></p><p><a href="https://coursade.com" target="_blank" rel="noopener">https://coursade.com</a></p><p><img src="https://cdn.pixabay.com/photo/2014/05/03/00/50/flower-child-336658_960_720.jpg" srcset="/img/loading.gif" alt="太阳镜"></p><p><strong>工具网</strong> </p><p><strong>1、PPT超级市场</strong></p><p><a href="https://www.dogedoge.com/" target="_blank" rel="noopener">https://www.dogedoge.com/</a></p><p><strong>2、canva</strong></p><p><a href="https://www.canva.cn" target="_blank" rel="noopener">https://www.canva.cn</a></p><p><strong>3、思维导图</strong></p><p><a href="https://gitmind.cn" target="_blank" rel="noopener">https://gitmind.cn</a></p><p><strong>4、pdf派</strong></p><p><a href="https://www.pdfpai.com/" target="_blank" rel="noopener">https://www.pdfpai.com/</a></p><p><strong>5、腾讯文档</strong></p><p><a href="https://docs.qq.com" target="_blank" rel="noopener">https://docs.qq.com</a></p><p><strong>6、幕享（屏幕互联）</strong></p><p><a href="https://letsview.com/zh/" target="_blank" rel="noopener">https://letsview.com/zh/</a></p><p><strong>7、全网页视频下载</strong></p><p><a href="https://www.urlgot.net" target="_blank" rel="noopener">https://www.urlgot.net</a></p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/06/24/beautiful-1869208_960_720.jpg" srcset="/img/loading.gif" alt="灰色的头发"></p><p><strong>小工具聚合网</strong> </p><p><strong>1、好工具网</strong></p><p><a href="http://www.nicetool.net" target="_blank" rel="noopener">http://www.nicetool.net</a></p><p><strong>2、哇哇工具</strong></p><p><a href="https://www.iamwawa.cn" target="_blank" rel="noopener">https://www.iamwawa.cn</a></p><p><strong>3、在线工具</strong></p><p><a href="https://tool.lu" target="_blank" rel="noopener">https://tool.lu</a></p><p><strong>4、工具合集网</strong></p><p><a href="https://miku.tools" target="_blank" rel="noopener">https://miku.tools</a></p><p><strong>5、工具123网</strong></p><p><a href="http://www.gjw123.com/" target="_blank" rel="noopener">http://www.gjw123.com/</a></p><p><strong>6、兔二工具</strong></p><p><a href="https://www.tool2.cn/" target="_blank" rel="noopener">https://www.tool2.cn/</a></p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/06/24/portrait-3050076_960_720.jpg" srcset="/img/loading.gif" alt="肖像"></p><p><strong>矢量图标库</strong> </p><p><strong>1、阿里巴巴矢量图库</strong></p><p><a href="https://iconfont.cn" target="_blank" rel="noopener">https://iconfont.cn</a></p><p><strong>2、IconFinder</strong></p><p><a href="https://iconfinder.com" target="_blank" rel="noopener">https://iconfinder.com</a></p><p><strong>3、Find icons</strong></p><p><a href="https://findicons.com" target="_blank" rel="noopener">https://findicons.com</a></p><p><strong>4、Vexels</strong></p><p><a href="https://vexels.com" target="_blank" rel="noopener">https://vexels.com</a></p><p><strong>5、Icons8</strong></p><p><a href="https://icons8.com" target="_blank" rel="noopener">https://icons8.com</a></p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/06/24/roses-1868669_960_720.jpg" srcset="/img/loading.gif" alt="玫瑰"></p><p><strong>其他待分类</strong> </p><p><strong>1、知妖</strong></p><p><a href="https://www.cbaigui.com" target="_blank" rel="noopener">https://www.cbaigui.com</a></p><p><strong>2、超级书库</strong> </p><p><a href="https://shuayouxi.cn/" target="_blank" rel="noopener">https://shuayouxi.cn/</a></p><p><strong>3、随机网站</strong></p><p><a href="http://theuselessweb.com" target="_blank" rel="noopener">http://theuselessweb.com</a></p><p><strong>4、兰客导航</strong></p><p><a href="http://lackk.com/nav/" target="_blank" rel="noopener">http://lackk.com/nav/</a></p><p><strong>5、文章生成器</strong></p><p><a href="https://suulnuka.github.io" target="_blank" rel="noopener">https://suulnuka.github.io</a></p><p><strong>6、字魂</strong></p><p><a href="https://izihun.com" target="_blank" rel="noopener">https://izihun.com</a></p><p><strong>7、字体天下</strong></p><p><a href="http://www.fonts.net.cn" target="_blank" rel="noopener">http://www.fonts.net.cn</a></p><p><strong>8、在线抠图</strong></p><p><a href="https://remove.bg/zh" target="_blank" rel="noopener">https://remove.bg/zh</a></p><p><strong>9、指尖上（720°全景看天下）</strong></p><p><a href="https://www.zhijianshang.com" target="_blank" rel="noopener">https://www.zhijianshang.com</a></p><p><strong>10、全历史</strong></p><p><a href="https://www.allhistory.com" target="_blank" rel="noopener">https://www.allhistory.com</a></p><p><strong>11、lines</strong></p><p><a href="http://www.moage.cn" target="_blank" rel="noopener">http://www.moage.cn</a></p><p><strong>12、wordart</strong></p><p><a href="https://wordart.com" target="_blank" rel="noopener">https://wordart.com</a></p><p><strong>13、彩虹屁生成器</strong></p><p><a href="https://chp.shadiao.app" target="_blank" rel="noopener">https://chp.shadiao.app</a></p><p><strong>14、毒鸡汤生成器</strong></p><p><a href="http://www.nows.fun" target="_blank" rel="noopener">http://www.nows.fun</a></p><p><strong>15、百度网盘搜索</strong></p><p><a href="http://www.99baiduyun.com" target="_blank" rel="noopener">http://www.99baiduyun.com</a></p><p><strong>欢迎关注微信公众号 ：</strong></p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006y8mN6gy1g7d3llw1nkj30b40b4wee.jpg" srcset="/img/loading.gif" alt="欢迎关注公众号" style="width: 100px" />]]></content>
    
    
    <categories>
      
      <category>Other</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Other</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>分身有术Pro破解教程</title>
    <link href="/2020/06/08/%E5%88%86%E8%BA%AB%E6%9C%89%E6%9C%AFPro%E7%A0%B4%E8%A7%A3%E6%95%99%E7%A8%8B/"/>
    <url>/2020/06/08/%E5%88%86%E8%BA%AB%E6%9C%89%E6%9C%AFPro%E7%A0%B4%E8%A7%A3%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>练手官方包下载地址<a href="https://www.coolapk.com/apk/com.droi.adocker.pro" target="_blank" rel="noopener">https://www.coolapk.com/apk/com.droi.adocker.pro</a>  </p><p>需要工具:MT管理器<a href="https://www.coolapk.com/apk/bin.mt.plus" target="_blank" rel="noopener">https://www.coolapk.com/apk/bin.mt.plus</a>  </p><p>注:手机号为虚拟号码  我们来看看修改前VIP功能<br><img src="https://github.com/alterem/picFB/raw/master/pics/2020/06/08/101122xqfhnbh5on5rxrra.jpg" srcset="/img/loading.gif" alt="img"><br><img src="https://github.com/alterem/picFB/raw/master/pics/2020/06/08/101129s77g7j796pobzqy7.jpg" srcset="/img/loading.gif" alt="img"><br>点击VIP功能跳转到支付页面<br><img src="https://github.com/alterem/picFB/raw/master/pics/2020/06/08/101143xqjv7zx5vj2s2lhe.jpg" srcset="/img/loading.gif" alt="img"> 下面教程开始    需要登录  1.去除签名验证加强版(不会的看我上一个帖子，AccuBattery解锁专业版教程)，dex++搜索VIP方法名<br><img src="https://github.com/alterem/picFB/raw/master/pics/2020/06/08/101154wlma0w9d9m9pwm99.jpg" srcset="/img/loading.gif" alt="img"><br>2.选择第3个<br><img src="https://github.com/alterem/picFB/raw/master/pics/2020/06/08/101158gc88ci5wiclr2w82.jpg" srcset="/img/loading.gif" alt="img"><br>3.赋值const-wide v0, 0x3BB2B0C6018L也就是<a href="https://www.52pojie.cn/tel:20991231" target="_blank" rel="noopener">2099-12-31</a>的意思<br><img src="https://github.com/alterem/picFB/raw/master/pics/2020/06/08/101204j4ckmxpm49zctxlk.jpg" srcset="/img/loading.gif" alt="img"><br>4.教程完毕   下面我们来试试VIP功能<br><img src="https://github.com/alterem/picFB/raw/master/pics/2020/06/08/101218s06365hzj5ot5gl6.jpg" srcset="/img/loading.gif" alt="img"><br><img src="https://github.com/alterem/picFB/raw/master/pics/2020/06/08/101322m7zy3gaga7m8b93o.jpg" srcset="/img/loading.gif" alt="img"><br><img src="https://github.com/alterem/picFB/raw/master/pics/2020/06/08/101328pre782z3r6xq268p.jpg" srcset="/img/loading.gif" alt="img"></p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><p><strong>欢迎关注微信公众号 ：</strong></p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006y8mN6gy1g7d3llw1nkj30b40b4wee.jpg" srcset="/img/loading.gif" alt="欢迎关注公众号" style="width: 100px" />]]></content>
    
    
    <categories>
      
      <category>Other</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Other</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>轻颜相机修改免登录永久会员加去强制更新教程</title>
    <link href="/2020/06/08/%E8%BD%BB%E9%A2%9C%E7%9B%B8%E6%9C%BA%E4%BF%AE%E6%94%B9%E5%85%8D%E7%99%BB%E5%BD%95%E6%B0%B8%E4%B9%85%E4%BC%9A%E5%91%98%E5%8A%A0%E5%8E%BB%E5%BC%BA%E5%88%B6%E6%9B%B4%E6%96%B0%E6%95%99%E7%A8%8B/"/>
    <url>/2020/06/08/%E8%BD%BB%E9%A2%9C%E7%9B%B8%E6%9C%BA%E4%BF%AE%E6%94%B9%E5%85%8D%E7%99%BB%E5%BD%95%E6%B0%B8%E4%B9%85%E4%BC%9A%E5%91%98%E5%8A%A0%E5%8E%BB%E5%BC%BA%E5%88%B6%E6%9B%B4%E6%96%B0%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>由于之前大神破解的旧版现已被强制更新而无法使用<br>这次带来了解锁会员和去更新教程，可永久使用<br>教程开始：<br>1.解锁永久会员功能<br>dex编辑器＋＋勾选全选，搜索“isVipUser”，上滑到底部选择最后一个搜索结果，然后赋值const/4 v0, 0x1，一路返回保存。<br><img src="https://github.com/alterem/picFB/raw/master/pics/2020/06/08/113850kgt9ghdg6r198jw6.png" srcset="/img/loading.gif" alt="img"> <img src="https://github.com/alterem/picFB/raw/master/pics/2020/06/08/113855hekp1pgvdk6xkwhd.jpg" srcset="/img/loading.gif" alt="img"><br>2.去永久更新教程</p><h2 id="dex编辑器＋＋勾选全选，搜索“upsdk-choice-update”，进入如图红框搜索结果，将1172行的“if-eqz-v0-cond-1b”改为“goto-cond-1b”，返回一路保存，签名安装。教程结束"><a href="#dex编辑器＋＋勾选全选，搜索“upsdk-choice-update”，进入如图红框搜索结果，将1172行的“if-eqz-v0-cond-1b”改为“goto-cond-1b”，返回一路保存，签名安装。教程结束" class="headerlink" title="dex编辑器＋＋勾选全选，搜索“upsdk_choice_update”，进入如图红框搜索结果，将1172行的“if-eqz v0, :cond_1b”改为“goto :cond_1b”，返回一路保存，签名安装。教程结束"></a>dex编辑器＋＋勾选全选，搜索“upsdk_choice_update”，进入如图红框搜索结果，将1172行的“if-eqz v0, :cond_1b”改为“goto :cond_1b”，返回一路保存，签名安装。教程结束</h2><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/06/08/113858jc289z9iijr89r29.png" srcset="/img/loading.gif" alt="img"> <img src="https://github.com/alterem/picFB/raw/master/pics/2020/06/08/113902h1qryqy1dyz8p8dd.jpg" srcset="/img/loading.gif" alt="img"> <img src="https://github.com/alterem/picFB/raw/master/pics/2020/06/08/113907q4zkvk280z242kpp.jpg" srcset="/img/loading.gif" alt="img"><br>我们来看看成品和效果图<br>成品：<a href="https://rjc6.lanzous.com/icvhfpa" target="_blank" rel="noopener">https://rjc6.lanzous.com/icvhfpa</a><br><img src="https://github.com/alterem/picFB/raw/master/pics/2020/06/08/113910nwwijinizi9y6zir.jpg" srcset="/img/loading.gif" alt="img"></p><p><strong>欢迎关注微信公众号 ：</strong></p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006y8mN6gy1g7d3llw1nkj30b40b4wee.jpg" srcset="/img/loading.gif" alt="欢迎关注公众号" style="width: 100px" />]]></content>
    
    
    <categories>
      
      <category>Other</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Other</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何修改Git已提交的日志</title>
    <link href="/2020/05/29/%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9Git%E5%B7%B2%E6%8F%90%E4%BA%A4%E7%9A%84%E6%97%A5%E5%BF%97/"/>
    <url>/2020/05/29/%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9Git%E5%B7%B2%E6%8F%90%E4%BA%A4%E7%9A%84%E6%97%A5%E5%BF%97/</url>
    
    <content type="html"><![CDATA[<h3 id="情况一：最后一次提交且未-push"><a href="#情况一：最后一次提交且未-push" class="headerlink" title="情况一：最后一次提交且未 push"></a>情况一：最后一次提交且未 push</h3><p>执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git commit --amend<br></code></pre></td></tr></table></figure><p>git 会打开 $EDITOR 编辑器，它会加载这次提交的日志，这样我们就可以在上面编辑，编辑后保存即完成此次的修改。</p><h3 id="情况二：最后一次提交且已-push-到服务器"><a href="#情况二：最后一次提交且已-push-到服务器" class="headerlink" title="情况二：最后一次提交且已 push 到服务器"></a>情况二：最后一次提交且已 push 到服务器</h3><p>执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git commit --amend<br>git push origin master --force<br></code></pre></td></tr></table></figure><p>和情况一的做法一样。使用 push 推送到远程服务器是需要加上 –force，让服务器更新历史记录。</p><p>** 需要注意的是：把修改后的日志强制 push 到 Git 服务器，如果别人本地的副本有修改，很有可能会导致他们同步不了，所以最好和他们核对下。**</p><h3 id="情况三：旧的提交且未推送"><a href="#情况三：旧的提交且未推送" class="headerlink" title="情况三：旧的提交且未推送"></a>情况三：旧的提交且未推送</h3><p>假设 commit 是倒数第 3 次提交，这个可以使用 git log 查看，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git <span class="hljs-built_in">log</span><br>commit b1b451d218cc23b6c769f373164f2b89cf54d0aa<br>Author: clcaza &lt;clcaza@sina.cn&gt;<br>Date:  Sat Mar 10 19:09:08 2018 +0800<br><br>  添加内容 d<br><br>commit 04f0d1809d5d31cc6e930efcba47a5f3f7e93319<br>Author: clcaza &lt;clcaza@sina.cn&gt;<br>Date:  Sat Mar 10 19:08:24 2018 +0800<br><br>  添加内容 c<br><br>commit 94fc8feb916442d56b558d5c370f18f057298921<br>Author: clcaza &lt;clcaza@sina.cn&gt;<br>Date:  Sat Mar 10 19:07:08 2018 +0800<br><br>  添加内容 a<br><br>commit fd517efa9faf6a5ec71d0eac38fbcfa0cd689f40<br>Author: clcaza &lt;clcaza@sina.cn&gt;<br>Date:  Sat Mar 10 19:06:21 2018 +0800<br><br>  init<br></code></pre></td></tr></table></figure><p>执行 rebase</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git rebase -i HEAD~3<br></code></pre></td></tr></table></figure><p>它会打开一个编辑器，它会把最后前 3 次的提交显示出来，类似于：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">pick 94fc8fe 添加内容 a<br>pick 04f0d18 添加内容 c<br>pick b1b451d 添加内容 d<br></code></pre></td></tr></table></figure><p>你会看到，它是按提交的顺序显示的，与 git log 显示的顺序相反。定位到你要编辑日志的那一行，把 pick 修改为 edit，然后保存。</p><p>接着就是修改日志内容了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git commit --amend<br></code></pre></td></tr></table></figure><p>完成编辑日志后，记得执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git rebase --<span class="hljs-built_in">continue</span><br></code></pre></td></tr></table></figure><p>Rebase 目的是打开提交的历史记录，让您选择要修改的内容。 Git 会让你在一个新的分支修改内容。 git rebase –continue 则是让你重新回到之前的分支。</p><h3 id="情况四：旧的提交且已-push-到服务器"><a href="#情况四：旧的提交且已-push-到服务器" class="headerlink" title="情况四：旧的提交且已 push 到服务器"></a>情况四：旧的提交且已 push 到服务器</h3><p>前面编辑日志的操作是和情况三是一样的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git rebase -i HEAD~X<br>git commit --amend<br>git rebase --<span class="hljs-built_in">continue</span><br></code></pre></td></tr></table></figure><p>X 表示倒数第几次提交。</p><p>完成编辑日志后，执行 push：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push origin master --force<br></code></pre></td></tr></table></figure><p><strong>欢迎关注微信公众号 ：</strong></p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006y8mN6gy1g7d3llw1nkj30b40b4wee.jpg" srcset="/img/loading.gif" alt="欢迎关注公众号" style="width: 100px" />]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux下清空用户登录记录和命令历史的方法</title>
    <link href="/2020/05/28/Linux%E4%B8%8B%E6%B8%85%E7%A9%BA%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E8%AE%B0%E5%BD%95%E5%92%8C%E5%91%BD%E4%BB%A4%E5%8E%86%E5%8F%B2%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <url>/2020/05/28/Linux%E4%B8%8B%E6%B8%85%E7%A9%BA%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E8%AE%B0%E5%BD%95%E5%92%8C%E5%91%BD%E4%BB%A4%E5%8E%86%E5%8F%B2%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p><strong>清除登陆系统成功的记录</strong>，也就是last命令看到的记录</p><p>[root@localhost root]# echo &gt; /var/log/wtmp 此文件默认打开时乱码的，里面可以看到ip等等信息</p><p>[root@localhost root]# echo &gt;/var/log/wtmp<br>[root@localhost root]# last</p><p>此时即看不到用户登录信息</p><p><strong>清除登陆系统失败的记录</strong>，也就是lastb命令看到的记录<br>[root@localhost root]# echo &gt; /var/log/btmp 此文件默认打开时乱码的</p><p>[root@localhost root]# echo &gt; /var/log/btmp<br>[root@localhost root]# lastb</p><p>此时就没有结果输出了</p><p><strong>清除历史执行命令</strong></p><p>[root@localhost root]# history -c </p><p>或者，清空用户目录下的这个文件即可</p><p>[root@localhost root]# echo &gt; ./.bash_history</p><p><a href="http://www.linuxidc.com/" target="_blank" rel="noopener"></a></p><p><strong>欢迎关注微信公众号 ：</strong></p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006y8mN6gy1g7d3llw1nkj30b40b4wee.jpg" srcset="/img/loading.gif" alt="欢迎关注公众号" style="width: 100px" />]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis 配置文件主要参数解析参考</title>
    <link href="/2020/05/26/Redis-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%B8%BB%E8%A6%81%E5%8F%82%E6%95%B0%E8%A7%A3%E6%9E%90%E5%8F%82%E8%80%83/"/>
    <url>/2020/05/26/Redis-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%B8%BB%E8%A6%81%E5%8F%82%E6%95%B0%E8%A7%A3%E6%9E%90%E5%8F%82%E8%80%83/</url>
    
    <content type="html"><![CDATA[<figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># redis进程是否以守护进程的方式运行，yes为是，no为否(不以守护进程的方式运行会占用一个终端)。</span><br><span class="hljs-attr">daemonize</span> <span class="hljs-string">no</span><br><span class="hljs-comment"># 指定redis进程的PID文件存放位置</span><br><span class="hljs-attr">pidfile</span> <span class="hljs-string">/var/run/redis.pid</span><br><span class="hljs-comment"># redis进程的端口号</span><br><span class="hljs-attr">port</span> <span class="hljs-string">6379</span><br><span class="hljs-comment"># 绑定的主机地址</span><br><span class="hljs-attr">bind</span> <span class="hljs-string">127.0.0.1</span><br><span class="hljs-comment"># 客户端闲置多长时间后关闭连接，默认此参数为0即关闭此功能</span><br><span class="hljs-attr">timeout</span> <span class="hljs-string">300</span><br><span class="hljs-comment"># redis日志级别，可用的级别有debug.verbose.notice.warning</span><br><span class="hljs-attr">loglevel</span> <span class="hljs-string">verbose</span><br><span class="hljs-comment"># log文件输出位置，如果进程以守护进程的方式运行，此处又将输出文件设置为stdout的话，就会将日志信息输出到/dev/null里面去了</span><br><span class="hljs-attr">logfile</span> <span class="hljs-string">stdout</span><br><span class="hljs-comment"># 设置数据库的数量，默认为0可以使用select &lt;dbid&gt;命令在连接上指定数据库id</span><br><span class="hljs-attr">databases</span> <span class="hljs-string">16</span><br><span class="hljs-comment"># 指定在多少时间内刷新次数达到多少的时候会将数据同步到数据文件</span><br><span class="hljs-attr">save</span> <span class="hljs-string">&lt;seconds&gt; &lt;changes&gt;</span><br><span class="hljs-comment"># 指定存储至本地数据库时是否压缩文件，默认为yes即启用存储</span><br><span class="hljs-attr">rdbcompression</span> <span class="hljs-string">yes</span><br><span class="hljs-comment"># 指定本地数据库文件名</span><br><span class="hljs-attr">dbfilename</span> <span class="hljs-string">dump.db</span><br><span class="hljs-comment"># 指定本地数据问就按存放位置</span><br><span class="hljs-attr">dir</span> <span class="hljs-string">./</span><br><span class="hljs-comment"># 指定当本机为slave服务时，设置master服务的IP地址及端口，在redis启动的时候他会自动跟master进行数据同步</span><br><span class="hljs-attr">slaveof</span> <span class="hljs-string">&lt;masterip&gt; &lt;masterport&gt;</span><br><span class="hljs-comment"># 当master设置了密码保护时，slave服务连接master的密码</span><br><span class="hljs-attr">masterauth</span> <span class="hljs-string">&lt;master-password&gt;</span><br><span class="hljs-comment"># 设置redis连接密码，如果配置了连接密码，客户端在连接redis是需要通过AUTH&lt;password&gt;命令提供密码，默认关闭</span><br><span class="hljs-attr">requirepass</span> <span class="hljs-string">footbared</span><br><span class="hljs-comment"># 设置同一时间最大客户连接数，默认无限制。redis可以同时连接的客户端数为redis程序可以打开的最大文件描述符，如果设置 maxclients 0，表示不作限制。当客户端连接数到达限制时，Redis会关闭新的连接并向客户端返回 max number of clients reached 错误信息</span><br><span class="hljs-attr">maxclients</span> <span class="hljs-string">128</span><br><span class="hljs-comment"># 指定Redis最大内存限制，Redis在启动时会把数据加载到内存中，达到最大内存后，Redis会先尝试清除已到期或即将到期的Key。当此方法处理后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。Redis新的vm机制，会把Key存放内存，Value会存放在swap区</span><br><span class="hljs-attr">maxmemory&lt;bytes&gt;</span><br><span class="hljs-comment"># 指定是否在每次更新操作后进行日志记录，Redis在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失。因为redis本身同步数据文件是按上面save条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认为no。</span><br><span class="hljs-attr">appendonly</span> <span class="hljs-string">no</span><br><span class="hljs-comment"># 指定跟新日志文件名默认为appendonly.aof</span><br><span class="hljs-attr">appendfilename</span> <span class="hljs-string">appendonly.aof</span><br><span class="hljs-comment"># 指定更新日志的条件，有三个可选参数 - no：表示等操作系统进行数据缓存同步到磁盘(快)，always：表示每次更新操作后手动调用fsync()将数据写到磁盘(慢，安全)， everysec：表示每秒同步一次(折衷，默认值)；</span><br><span class="hljs-attr">appendfsync</span> <span class="hljs-string">everysec</span><br></code></pre></td></tr></table></figure><ul><li>设置后台启动</li></ul><p>由于 <code>Redis</code> 默认是 <strong>前台启动</strong>，不建议使用。修改 <code>Redis</code> 配置文件，把 <code>daemonize no</code> 改为 <code>daemonize yes</code>。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">daemonize</span> <span class="hljs-string">yes</span><br></code></pre></td></tr></table></figure><ul><li>设置远程访问</li></ul><p><code>Redis</code> 默认只允许 <strong>本机访问</strong>，把 <code>bind</code> 修改为 <code>bind 0.0.0.0</code> 此设置会变成 <strong>允许所有远程访问</strong>。如果想指定限制访问，可设置对应的 <code>IP</code>。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">bind</span> <span class="hljs-string">0.0.0.0</span><br></code></pre></td></tr></table></figure><ul><li>配置 <code>Redis</code> 日志记录</li></ul><p>找到 <code>logfile</code> 配置，默认是：<code>logfile &quot;&quot;</code>，改为自定义日志文件路径。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">logfile</span> <span class="hljs-string">/var/log/redis_6379.log</span><br></code></pre></td></tr></table></figure><ul><li>设置 <code>Redis</code> 请求密码</li></ul><p>把 <code>requirepass</code> 修改为 <code>123456</code>，修改之后重启下服务</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">requirepass</span> <span class="hljs-string">"123456"</span><br></code></pre></td></tr></table></figure><p>有了密码之后，进入客户端，就得这样访问：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">$</span> <span class="hljs-string">redis-cli -h 127.0.0.1 -p 6379 -a 123456</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常见安全算法</title>
    <link href="/2020/05/25/%E5%B8%B8%E8%A7%81%E5%AE%89%E5%85%A8%E7%AE%97%E6%B3%95/"/>
    <url>/2020/05/25/%E5%B8%B8%E8%A7%81%E5%AE%89%E5%85%A8%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>本文整理了常见的安全算法，包括MD5、SHA、DES、AES、RSA等，并写了完整的工具类（Java 版），工具类包含测试。 </p><h2 id="一、数字摘要算法"><a href="#一、数字摘要算法" class="headerlink" title="一、数字摘要算法"></a>一、数字摘要算法</h2><blockquote><p>数字摘要也称为消息摘要，它是一个唯一对应一个消息或文本的固定长度的值，它由一个单向Hash函数对消息进行计算而产生。如果消息在传递的途中改变了，接收者通过对收到消息采用相同的Hash重新计算，新产生的摘要与原摘要进行比较，就可知道消息是否被篡改了，因此消息摘要能够验证消息的完整性。消息摘要采用单向Hash函数将需要计算的内容”摘要”成固定长度的串，这个串亦称为数字指纹。这个串有固定的长度，且不同的明文摘要成密文，其结果总是不同的(相对的)，而同样的明文其摘要必定一致。这样这串摘要便可成为验证明文是否是”真身”的”指纹”了。     </p></blockquote><h3 id="1-Md5"><a href="#1-Md5" class="headerlink" title="1. Md5"></a>1. Md5</h3><p>MD5即Message Digest Algorithm 5(信息摘要算法5)，是数字摘要算法一种实现，用于确保信息传输完整性和一致性，摘要长度为128位。 MD5由MD4、 MD3、 MD2改进而来，主要增强算法复杂度和不可逆性，该算法因其普遍、稳定、快速的特点，在产业界得到了极为广泛的使用，目前主流的编程语言普遍都已有MD5算法实现。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.security.MessageDigest;<br><span class="hljs-keyword">import</span> java.security.NoSuchAlgorithmException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Message Digest Algorithm 5(信息摘要算法5)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MD5Util</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Constructs the MD5Util object and sets the string whose MD5Util is to be</span><br><span class="hljs-comment">     * computed.</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> inStr</span><br><span class="hljs-comment">     *    the &lt;code&gt;String&lt;/code&gt; whose MD5Util is to be computed</span><br><span class="hljs-comment">     */</span><br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> String COMMON_KEY=<span class="hljs-string">"zhongzhuoxin#@!321"</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MD5Util</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">str2MD5</span><span class="hljs-params">(String inStr)</span> </span>&#123;<br>        <span class="hljs-keyword">char</span> hexDigits[] = &#123; <span class="hljs-string">'0'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'2'</span>, <span class="hljs-string">'3'</span>, <span class="hljs-string">'4'</span>, <span class="hljs-string">'5'</span>, <span class="hljs-string">'6'</span>, <span class="hljs-string">'7'</span>, <span class="hljs-string">'8'</span>, <span class="hljs-string">'9'</span>,<br>                <span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'c'</span>, <span class="hljs-string">'d'</span>, <span class="hljs-string">'e'</span>, <span class="hljs-string">'f'</span> &#125;;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">byte</span>[] strTemp = inStr.getBytes(<span class="hljs-string">"UTF-8"</span>);<br>            MessageDigest mdTemp = MessageDigest.getInstance(<span class="hljs-string">"MD5"</span>);<br>            mdTemp.update(strTemp);<br>            <span class="hljs-keyword">byte</span>[] md = mdTemp.digest();<br>            <span class="hljs-keyword">int</span> j = md.length;<br>            <span class="hljs-keyword">char</span> str[] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[j * <span class="hljs-number">2</span>];<br>            <span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; j; i++) &#123;<br>                <span class="hljs-keyword">byte</span> byte0 = md[i];<br>                str[k++] = hexDigits[byte0 &gt;&gt;&gt; <span class="hljs-number">4</span> &amp; <span class="hljs-number">0xf</span>];<br>                str[k++] = hexDigits[byte0 &amp; <span class="hljs-number">0xf</span>];<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> String(str);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//--MD5Util</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">char</span> HEX_DIGITS[] = &#123; <span class="hljs-string">'0'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'2'</span>, <span class="hljs-string">'3'</span>, <span class="hljs-string">'4'</span>, <span class="hljs-string">'5'</span>,<br>            <span class="hljs-string">'6'</span>, <span class="hljs-string">'7'</span>, <span class="hljs-string">'8'</span>, <span class="hljs-string">'9'</span>, <span class="hljs-string">'A'</span>, <span class="hljs-string">'B'</span>, <span class="hljs-string">'C'</span>, <span class="hljs-string">'D'</span>, <span class="hljs-string">'E'</span>, <span class="hljs-string">'F'</span> &#125;;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">toHexString</span><span class="hljs-params">(<span class="hljs-keyword">byte</span>[] b)</span> </span>&#123; <span class="hljs-comment">// String to byte</span><br>        StringBuilder sb = <span class="hljs-keyword">new</span> StringBuilder(b.length * <span class="hljs-number">2</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; b.length; i++) &#123;<br>            sb.append(HEX_DIGITS[(b[i] &amp; <span class="hljs-number">0xf0</span>) &gt;&gt;&gt; <span class="hljs-number">4</span>]);<br>            sb.append(HEX_DIGITS[b[i] &amp; <span class="hljs-number">0x0f</span>]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> sb.toString();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">AndroidMd5</span><span class="hljs-params">(String s)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// Create MD5Util Hash</span><br>            MessageDigest digest = MessageDigest<br>                    .getInstance(<span class="hljs-string">"MD5"</span>);<br>            digest.update(s.getBytes());<br>            <span class="hljs-keyword">byte</span> messageDigest[] = digest.digest();<br><br>            <span class="hljs-keyword">return</span> toHexString(messageDigest);<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchAlgorithmException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">""</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        String m = MD5Util.str2MD5(<span class="hljs-string">"swwwwwwwwwwdkinner"</span>);<br><br>        System.out.print(m.length() + <span class="hljs-string">"    "</span>);<br>        System.out.println(m);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-SHA"><a href="#2-SHA" class="headerlink" title="2.SHA"></a>2.SHA</h3><p>SHA的全称是Secure Hash Algorithm，即安全散列算法。 1993年，安全散列算法(SHA)由美国国家标准和技术协会（NIST)提出，并作为联邦信息处理标准(FIPS PUB 180)公布， 1995年又发布了一个修订版FIPS PUB 180-1，通常称之为SHA-1。 SHA-1是基于MD4算法的，现在已成为公认的最安全的散列算法之一，并被广泛使用。SHA-1算法生成的摘要信息的长度为160位，由于生成的摘要信息更长，运算的过程更加复杂，在相同的硬件上， SHA-1的运行速度比MD5更慢，但是也更为安全。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.google.common.base.Strings;<br><br><span class="hljs-keyword">import</span> java.security.MessageDigest;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * SHA的全称是Secure Hash Algorithm，即安全散列算法</span><br><span class="hljs-comment"> * Created by fangzhipeng on 2017/3/21.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SHAUtil</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 定义加密方式</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> String KEY_SHA = <span class="hljs-string">"SHA"</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> String KEY_SHA1 = <span class="hljs-string">"SHA-1"</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 全局数组</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> String[] hexDigits = &#123; <span class="hljs-string">"0"</span>, <span class="hljs-string">"1"</span>, <span class="hljs-string">"2"</span>, <span class="hljs-string">"3"</span>, <span class="hljs-string">"4"</span>, <span class="hljs-string">"5"</span>,<br>            <span class="hljs-string">"6"</span>, <span class="hljs-string">"7"</span>, <span class="hljs-string">"8"</span>, <span class="hljs-string">"9"</span>, <span class="hljs-string">"a"</span>, <span class="hljs-string">"b"</span>, <span class="hljs-string">"c"</span>, <span class="hljs-string">"d"</span>, <span class="hljs-string">"e"</span>, <span class="hljs-string">"f"</span> &#125;;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 构造函数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">SHAUtil</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * SHA 加密</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data 需要加密的字节数组</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 加密之后的字节数组</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">byte</span>[] encryptSHA(<span class="hljs-keyword">byte</span>[] data) <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 创建具有指定算法名称的信息摘要</span><br><span class="hljs-comment">//        MessageDigest sha = MessageDigest.getInstance(KEY_SHA);</span><br>        MessageDigest sha = MessageDigest.getInstance(KEY_SHA1);<br>        <span class="hljs-comment">// 使用指定的字节数组对摘要进行最后更新</span><br>        sha.update(data);<br>        <span class="hljs-comment">// 完成摘要计算并返回</span><br>        <span class="hljs-keyword">return</span> sha.digest();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * SHA 加密</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data 需要加密的字符串</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 加密之后的字符串</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">encryptSHA</span><span class="hljs-params">(String data)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">// 验证传入的字符串</span><br>        <span class="hljs-keyword">if</span> (Strings.isNullOrEmpty(data)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">""</span>;<br>        &#125;<br>        <span class="hljs-comment">// 创建具有指定算法名称的信息摘要</span><br>        MessageDigest sha = MessageDigest.getInstance(KEY_SHA);<br>        <span class="hljs-comment">// 使用指定的字节数组对摘要进行最后更新</span><br>        sha.update(data.getBytes());<br>        <span class="hljs-comment">// 完成摘要计算</span><br>        <span class="hljs-keyword">byte</span>[] bytes = sha.digest();<br>        <span class="hljs-comment">// 将得到的字节数组变成字符串返回</span><br>        <span class="hljs-keyword">return</span> byteArrayToHexString(bytes);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将一个字节转化成十六进制形式的字符串</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> b 字节数组</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 字符串</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">byteToHexString</span><span class="hljs-params">(<span class="hljs-keyword">byte</span> b)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> ret = b;<br>        <span class="hljs-comment">//System.out.println("ret = " + ret);</span><br>        <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>) &#123;<br>            ret += <span class="hljs-number">256</span>;<br>        &#125;<br>        <span class="hljs-keyword">int</span> m = ret / <span class="hljs-number">16</span>;<br>        <span class="hljs-keyword">int</span> n = ret % <span class="hljs-number">16</span>;<br>        <span class="hljs-keyword">return</span> hexDigits[m] + hexDigits[n];<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 转换字节数组为十六进制字符串</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> bytes 字节数组</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 十六进制字符串</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">byteArrayToHexString</span><span class="hljs-params">(<span class="hljs-keyword">byte</span>[] bytes)</span> </span>&#123;<br>        StringBuffer sb = <span class="hljs-keyword">new</span> StringBuffer();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; bytes.length; i++) &#123;<br>            sb.append(byteToHexString(bytes[i]));<br>        &#125;<br>        <span class="hljs-keyword">return</span> sb.toString();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 测试方法</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> args</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        String key = <span class="hljs-string">"123"</span>;<br>        System.out.println(encryptSHA(key));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二、对称加密"><a href="#二、对称加密" class="headerlink" title="二、对称加密"></a>二、对称加密</h2><blockquote><p>对称加密算法是应用较早的加密算法，技术成熟。在对称加密算法中，数据发送方将明文(原始数据)和加密密钥一起经过特殊加密算法处理后，生成复杂的加密密文进行发送，数据接收方收到密文后，若想读取原文，则需要使用加密使用的密钥及相同算法的逆算法对加密的密文进行解密，才能使其恢复成可读明文。在对称加密算法中，使用的密钥只有一个，发送和接收双方都使用这个密钥对数据进行加密和解密，这就要求加密和解密方事先都必须知道加密的密钥。     </p></blockquote><h3 id="1-DES算法"><a href="#1-DES算法" class="headerlink" title="1. DES算法"></a>1. DES算法</h3><p>1973 年，美国国家标准局(NBS)在认识到建立数据保护标准既明显又急迫的情况下，开始征集联邦数据加密标准的方案。 1975 年3月17日， NBS公布了IBM公司提供的密码算法，以标准建议的形式在全国范围内征求意见。经过两年多的公开讨论之后， 1977 年7月15日， NBS宣布接受这建议，作为联邦信息处理标准46 号数据加密标准(Data Encryptin Standard)，即DES正式颁布，供商业界和非国防性政府部门使用。DES算法属于对称加密算法，明文按64位进行分组，密钥长64位，但事实上只有56位参与DES<br>运算(第8、 16、 24、 32、 40、 48、 56、 64位是校验位，使得每个密钥都有奇数个1),分组后的明文和56位的密钥按位替代或交换的方法形成密文。由于计算机运算能力的增强，原版DES密码的密钥长度变得容易被暴力破解，因此演变出了3DES算法。 3DES是DES向AES过渡的加密算法，它使用3条56位的密钥对数据进行三次加密，是DES的一个更安全的变形。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.security.SecureRandom;<br><br><span class="hljs-keyword">import</span> javax.crypto.Cipher;<br><span class="hljs-keyword">import</span> javax.crypto.SecretKey;<br><span class="hljs-keyword">import</span> javax.crypto.SecretKeyFactory;<br><span class="hljs-keyword">import</span> javax.crypto.spec.DESKeySpec;<br><br><br><span class="hljs-keyword">import</span> sun.misc.BASE64Decoder;<br><span class="hljs-keyword">import</span> sun.misc.BASE64Encoder;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Data Encryptin Standard</span><br><span class="hljs-comment"> * 数据加密标准</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DESUtil</span> </span>&#123;<br><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> String DES = <span class="hljs-string">"DES"</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Description 根据键值进行加密</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key  加密键byte数组</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">encrypt</span><span class="hljs-params">(String data, String key)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-keyword">byte</span>[] bt = encrypt(data.getBytes(), key.getBytes());<br>        String strs = <span class="hljs-keyword">new</span> BASE64Encoder().encode(bt);<br>        <span class="hljs-keyword">return</span> strs;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Description 根据键值进行解密</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key  加密键byte数组</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">decrypt</span><span class="hljs-params">(String data, String key)</span> <span class="hljs-keyword">throws</span> Exception,</span><br><span class="hljs-function">            Exception </span>&#123;<br>        <span class="hljs-keyword">if</span> (data == <span class="hljs-keyword">null</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        BASE64Decoder decoder = <span class="hljs-keyword">new</span> BASE64Decoder();<br>        <span class="hljs-keyword">byte</span>[] buf = decoder.decodeBuffer(data);<br>        <span class="hljs-keyword">byte</span>[] bt = decrypt(buf, key.getBytes());<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> String(bt);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Description 根据键值进行加密</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key  加密键byte数组</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">byte</span>[] encrypt(<span class="hljs-keyword">byte</span>[] data, <span class="hljs-keyword">byte</span>[] key) <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 生成一个可信任的随机数源</span><br>        SecureRandom sr = <span class="hljs-keyword">new</span> SecureRandom();<br><br>        <span class="hljs-comment">// 从原始密钥数据创建DESKeySpec对象</span><br>        DESKeySpec dks = <span class="hljs-keyword">new</span> DESKeySpec(key);<br><br>        <span class="hljs-comment">// 创建一个密钥工厂，然后用它把DESKeySpec转换成SecretKey对象</span><br>        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(DES);<br>        SecretKey securekey = keyFactory.generateSecret(dks);<br><br>        <span class="hljs-comment">// Cipher对象实际完成加密操作</span><br>        Cipher cipher = Cipher.getInstance(DES);<br><br>        <span class="hljs-comment">// 用密钥初始化Cipher对象</span><br>        cipher.init(Cipher.ENCRYPT_MODE, securekey, sr);<br><br>        <span class="hljs-keyword">return</span> cipher.doFinal(data);<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Description 根据键值进行解密</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key  加密键byte数组</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">byte</span>[] decrypt(<span class="hljs-keyword">byte</span>[] data, <span class="hljs-keyword">byte</span>[] key) <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 生成一个可信任的随机数源</span><br>        SecureRandom sr = <span class="hljs-keyword">new</span> SecureRandom();<br><br>        <span class="hljs-comment">// 从原始密钥数据创建DESKeySpec对象</span><br>        DESKeySpec dks = <span class="hljs-keyword">new</span> DESKeySpec(key);<br><br>        <span class="hljs-comment">// 创建一个密钥工厂，然后用它把DESKeySpec转换成SecretKey对象</span><br>        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(DES);<br>        SecretKey securekey = keyFactory.generateSecret(dks);<br><br>        <span class="hljs-comment">// Cipher对象实际完成解密操作</span><br>        Cipher cipher = Cipher.getInstance(DES);<br><br>        <span class="hljs-comment">// 用密钥初始化Cipher对象</span><br>        cipher.init(Cipher.DECRYPT_MODE, securekey, sr);<br><br>        <span class="hljs-keyword">return</span> cipher.doFinal(data);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[]args)</span><span class="hljs-keyword">throws</span> Exception</span>&#123;<br>       String  sStr=encrypt(<span class="hljs-string">"122222112222:12343232323:jajwwwwslwskwkkwksk"</span>,<span class="hljs-string">"wew2323w233321ws233w"</span>);<br>       System.out.println(sStr);<br>       String mStr=decrypt(sStr,<span class="hljs-string">"wew2323w233321ws233w"</span>);<br>       System.out.println(mStr);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-AES"><a href="#2-AES" class="headerlink" title="2. AES"></a>2. AES</h3><p>AES的全称是Advanced Encryption Standard，即高级加密标准，该算法由比利时密码学家Joan Daemen和Vincent Rijmen所设计，结合两位作者的名字，又称Rijndael加密算法，是美国联邦政府采用的一种对称加密标准，这个标准用来替代原先的DES算法，已经广为全世界所使用，已然成为对称加密算法中最流行的算法之一。AES算法作为新一代的数据加密标准汇聚了强安全性、高性能、高效率、易用和灵活等优<br>点，设计有三个密钥长度:128,192,256位，比DES算法的加密强度更高，更为安全。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.UnsupportedEncodingException;<br><span class="hljs-keyword">import</span> java.security.InvalidKeyException;<br><span class="hljs-keyword">import</span> java.security.NoSuchAlgorithmException;<br><span class="hljs-keyword">import</span> java.security.SecureRandom;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">import</span> javax.crypto.BadPaddingException;<br><span class="hljs-keyword">import</span> javax.crypto.Cipher;<br><span class="hljs-keyword">import</span> javax.crypto.IllegalBlockSizeException;<br><span class="hljs-keyword">import</span> javax.crypto.KeyGenerator;<br><span class="hljs-keyword">import</span> javax.crypto.NoSuchPaddingException;<br><span class="hljs-keyword">import</span> javax.crypto.SecretKey;<br><span class="hljs-keyword">import</span> javax.crypto.spec.SecretKeySpec;<br><br><span class="hljs-keyword">import</span> sun.misc.BASE64Decoder;<br><span class="hljs-keyword">import</span> sun.misc.BASE64Encoder;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Created by fangzhipeng on 2017/3/21.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AESUtil</span> </span>&#123;<br><br>    <span class="hljs-keyword">static</span>  <span class="hljs-keyword">byte</span>[]  key = <span class="hljs-string">"w@#$4@#$s^&amp;3*&amp;^4"</span>.getBytes();<br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> String algorithm=<span class="hljs-string">"AES"</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">encrypt</span><span class="hljs-params">(String data)</span></span>&#123;<br><br>        <span class="hljs-keyword">byte</span>[] dataToSend = data.getBytes();<br>        Cipher c = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            c = Cipher.getInstance(algorithm);<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchAlgorithmException e) &#123;<br>            <span class="hljs-comment">// TODO Auto-generated catch block</span><br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchPaddingException e) &#123;<br>            <span class="hljs-comment">// TODO Auto-generated catch block</span><br>            e.printStackTrace();<br>        &#125;<br>        SecretKeySpec k =  <span class="hljs-keyword">new</span> SecretKeySpec(key, algorithm);<br>        <span class="hljs-keyword">try</span> &#123;<br>            c.init(Cipher.ENCRYPT_MODE, k);<br>        &#125; <span class="hljs-keyword">catch</span> (InvalidKeyException e) &#123;<br>            <span class="hljs-comment">// TODO Auto-generated catch block</span><br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">byte</span>[] encryptedData = <span class="hljs-string">""</span>.getBytes();<br>        <span class="hljs-keyword">try</span> &#123;<br>            encryptedData = c.doFinal(dataToSend);<br>        &#125; <span class="hljs-keyword">catch</span> (IllegalBlockSizeException e) &#123;<br>            <span class="hljs-comment">// TODO Auto-generated catch block</span><br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (BadPaddingException e) &#123;<br>            <span class="hljs-comment">// TODO Auto-generated catch block</span><br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">byte</span>[] encryptedByteValue =     Base64.getEncoder().encode(encryptedData);<br>        <span class="hljs-keyword">return</span>  <span class="hljs-keyword">new</span> String(encryptedByteValue);<span class="hljs-comment">//.toString();</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">decrypt</span><span class="hljs-params">(String data)</span></span>&#123;<br><br>        <span class="hljs-keyword">byte</span>[] encryptedData  =  Base64.getDecoder().decode(data);<br>        Cipher c = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            c = Cipher.getInstance(algorithm);<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchAlgorithmException e) &#123;<br>            <span class="hljs-comment">// TODO Auto-generated catch block</span><br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchPaddingException e) &#123;<br>            <span class="hljs-comment">// TODO Auto-generated catch block</span><br>            e.printStackTrace();<br>        &#125;<br>        SecretKeySpec k =<br>                <span class="hljs-keyword">new</span> SecretKeySpec(key, algorithm);<br>        <span class="hljs-keyword">try</span> &#123;<br>            c.init(Cipher.DECRYPT_MODE, k);<br>        &#125; <span class="hljs-keyword">catch</span> (InvalidKeyException e1) &#123;<br>            <span class="hljs-comment">// TODO Auto-generated catch block</span><br>            e1.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">byte</span>[] decrypted = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            decrypted = c.doFinal(encryptedData);<br>        &#125; <span class="hljs-keyword">catch</span> (IllegalBlockSizeException e) &#123;<br>            <span class="hljs-comment">// TODO Auto-generated catch block</span><br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (BadPaddingException e) &#123;<br>            <span class="hljs-comment">// TODO Auto-generated catch block</span><br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> String(decrypted);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        String password=encrypt(<span class="hljs-string">"12233440988:1239874389888:dd333"</span>);<br>        System.out.println(password);<br>        System.out.println(decrypt(password));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="三、非对称加密"><a href="#三、非对称加密" class="headerlink" title="三、非对称加密"></a>三、非对称加密</h2><blockquote><p>非对称加密算法又称为公开密钥加密算法，它需要两个密钥，一个称为公开密钥(public key)，即公钥，另一个称为私有密钥(private key)，即私钥。公钥与私钥需要配对使用，如果用公钥对数据进行加密，只有用对应的私钥才能进行解密，而如果使用私钥对数据进行加密，那么只有用对应的公钥才能进行解密。因为加密和解密使用的是两个不同的密钥，所以这种算法称为非对称加密算法。非对称加密算法实现机密信息交换的基本过程是：甲方生成一对密钥并将其中的一把作为公钥向其它人公开，得到该公钥的乙方使用该密钥对机密信息进行加密后再发送给甲方，甲方再使用自己保存的另一把专用密钥，即私钥，对加密后的信息进行解密。     </p></blockquote><h3 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h3><p>RSA非对称加密算法是1977年由Ron Rivest、 Adi Shamirh和LenAdleman开发的， RSA取名来自开发他们三者的名字。 RSA是目前最有影响力的非对称加密算法，它能够抵抗到目前为止已知的所有密码攻击，已被ISO推荐为公钥数据加密标准。 RSA算法基于一个十分简单的数论事实：将两个大素数相乘十分容易，但反过来想要对其乘积进行因式分解却极其困难，因此可以将乘积公开作为加密密钥。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Created by fangzhipeng on 2017/3/21.</span><br><span class="hljs-comment"> * RSA ：RSA非对称加密算法是1977年由Ron Rivest、 Adi Shamirh和LenAdleman开发   *  的， RSA取名来</span><br><span class="hljs-comment"> *  自开发他们三者的名字。</span><br><span class="hljs-comment"> * 参考：http://blog.csdn.net/wangqiuyun/article/details/42143957</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.security.InvalidKeyException;<br><span class="hljs-keyword">import</span> java.security.KeyFactory;<br><span class="hljs-keyword">import</span> java.security.KeyPair;<br><span class="hljs-keyword">import</span> java.security.KeyPairGenerator;<br><span class="hljs-keyword">import</span> java.security.NoSuchAlgorithmException;<br><span class="hljs-keyword">import</span> java.security.SecureRandom;<br><br><span class="hljs-keyword">import</span> java.security.interfaces.RSAPrivateKey;<br><span class="hljs-keyword">import</span> java.security.interfaces.RSAPublicKey;<br><span class="hljs-keyword">import</span> java.security.spec.InvalidKeySpecException;<br><span class="hljs-keyword">import</span> java.security.spec.PKCS8EncodedKeySpec;<br><span class="hljs-keyword">import</span> java.security.spec.X509EncodedKeySpec;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><br><span class="hljs-keyword">import</span> javax.crypto.BadPaddingException;<br><span class="hljs-keyword">import</span> javax.crypto.Cipher;<br><span class="hljs-keyword">import</span> javax.crypto.IllegalBlockSizeException;<br><span class="hljs-keyword">import</span> javax.crypto.NoSuchPaddingException;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RSAUtil</span> </span>&#123;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 字节数据转字符串专用集合</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">char</span>[] HEX_CHAR = &#123; <span class="hljs-string">'0'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'2'</span>, <span class="hljs-string">'3'</span>, <span class="hljs-string">'4'</span>, <span class="hljs-string">'5'</span>, <span class="hljs-string">'6'</span>,<br>            <span class="hljs-string">'7'</span>, <span class="hljs-string">'8'</span>, <span class="hljs-string">'9'</span>, <span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'c'</span>, <span class="hljs-string">'d'</span>, <span class="hljs-string">'e'</span>, <span class="hljs-string">'f'</span> &#125;;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 随机生成密钥对</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">genKeyPair</span><span class="hljs-params">(String filePath)</span> </span>&#123;<br>        <span class="hljs-comment">// KeyPairGenerator类用于生成公钥和私钥对，基于RSA算法生成对象</span><br>        KeyPairGenerator keyPairGen = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            keyPairGen = KeyPairGenerator.getInstance(<span class="hljs-string">"RSA"</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchAlgorithmException e) &#123;<br>            <span class="hljs-comment">// TODO Auto-generated catch block</span><br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-comment">// 初始化密钥对生成器，密钥大小为96-1024位</span><br>        keyPairGen.initialize(<span class="hljs-number">1024</span>,<span class="hljs-keyword">new</span> SecureRandom());<br>        <span class="hljs-comment">// 生成一个密钥对，保存在keyPair中</span><br>        KeyPair keyPair = keyPairGen.generateKeyPair();<br>        <span class="hljs-comment">// 得到私钥</span><br>        RSAPrivateKey privateKey = (RSAPrivateKey) keyPair.getPrivate();<br>        <span class="hljs-comment">// 得到公钥</span><br>        RSAPublicKey publicKey = (RSAPublicKey) keyPair.getPublic();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 得到公钥字符串</span><br>            <span class="hljs-comment">// 得到私钥字符串</span><br>            String privateKeyString =<span class="hljs-keyword">new</span> String( Base64.getEncoder().encode(privateKey.getEncoded()));<br>            String publicKeyString =<span class="hljs-keyword">new</span> String( Base64.getEncoder().encode(publicKey.getEncoded()));<br>            <span class="hljs-comment">// 将密钥对写入到文件</span><br><br>            File file1=<span class="hljs-keyword">new</span> File(filePath + <span class="hljs-string">"publicKey.keystore"</span>);<br>            File file2=<span class="hljs-keyword">new</span> File(filePath + <span class="hljs-string">"privateKey.keystore"</span>);<br>            <span class="hljs-keyword">if</span>(!file1.exists()) &#123;<br>                file1.createNewFile();<br>            &#125;<br>            <span class="hljs-keyword">if</span>(!file2.exists()) &#123;<br>                file2.createNewFile();<br>            &#125;<br>            FileWriter pubfw = <span class="hljs-keyword">new</span> FileWriter(filePath + <span class="hljs-string">"/publicKey.keystore"</span>);<br>            FileWriter prifw = <span class="hljs-keyword">new</span> FileWriter(filePath + <span class="hljs-string">"/privateKey.keystore"</span>);<br>            BufferedWriter pubbw = <span class="hljs-keyword">new</span> BufferedWriter(pubfw);<br>            BufferedWriter pribw = <span class="hljs-keyword">new</span> BufferedWriter(prifw);<br>            pubbw.write(publicKeyString);<br>            pribw.write(privateKeyString);<br>            pubbw.flush();<br>            pubbw.close();<br>            pubfw.close();<br>            pribw.flush();<br>            pribw.close();<br>            prifw.close();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 从文件中输入流中加载公钥</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span></span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     *             加载公钥时产生的异常</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">loadPublicKeyByFile</span><span class="hljs-params">(String path)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            BufferedReader br = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> FileReader(path<br>                    + <span class="hljs-string">"/publicKey.keystore"</span>));<br>            String readLine = <span class="hljs-keyword">null</span>;<br>            StringBuilder sb = <span class="hljs-keyword">new</span> StringBuilder();<br>            <span class="hljs-keyword">while</span> ((readLine = br.readLine()) != <span class="hljs-keyword">null</span>) &#123;<br>                sb.append(readLine);<br>            &#125;<br>            br.close();<br>            <span class="hljs-keyword">return</span> sb.toString();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Exception(<span class="hljs-string">"公钥数据流读取错误"</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (NullPointerException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Exception(<span class="hljs-string">"公钥输入流为空"</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 从字符串中加载公钥</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> publicKeyStr</span><br><span class="hljs-comment">     *            公钥数据字符串</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     *             加载公钥时产生的异常</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> RSAPublicKey <span class="hljs-title">loadPublicKeyByStr</span><span class="hljs-params">(String publicKeyStr)</span></span><br><span class="hljs-function">            <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">byte</span>[] buffer = Base64.getDecoder().decode(publicKeyStr);<br>            KeyFactory keyFactory = KeyFactory.getInstance(<span class="hljs-string">"RSA"</span>);<br>            X509EncodedKeySpec keySpec = <span class="hljs-keyword">new</span> X509EncodedKeySpec(buffer);<br>            <span class="hljs-keyword">return</span> (RSAPublicKey) keyFactory.generatePublic(keySpec);<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchAlgorithmException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Exception(<span class="hljs-string">"无此算法"</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InvalidKeySpecException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Exception(<span class="hljs-string">"公钥非法"</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (NullPointerException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Exception(<span class="hljs-string">"公钥数据为空"</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 从文件中加载私钥</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span></span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 是否成功</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">loadPrivateKeyByFile</span><span class="hljs-params">(String path)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            BufferedReader br = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> FileReader(path<br>                    + <span class="hljs-string">"/privateKey.keystore"</span>));<br>            String readLine = <span class="hljs-keyword">null</span>;<br>            StringBuilder sb = <span class="hljs-keyword">new</span> StringBuilder();<br>            <span class="hljs-keyword">while</span> ((readLine = br.readLine()) != <span class="hljs-keyword">null</span>) &#123;<br>                sb.append(readLine);<br>            &#125;<br>            br.close();<br>            <span class="hljs-keyword">return</span> sb.toString();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Exception(<span class="hljs-string">"私钥数据读取错误"</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (NullPointerException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Exception(<span class="hljs-string">"私钥输入流为空"</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> RSAPrivateKey <span class="hljs-title">loadPrivateKeyByStr</span><span class="hljs-params">(String privateKeyStr)</span></span><br><span class="hljs-function">            <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">byte</span>[] buffer = Base64.getDecoder().decode(privateKeyStr);<br>            PKCS8EncodedKeySpec keySpec = <span class="hljs-keyword">new</span> PKCS8EncodedKeySpec(buffer);<br>            KeyFactory keyFactory = KeyFactory.getInstance(<span class="hljs-string">"RSA"</span>);<br>            <span class="hljs-keyword">return</span> (RSAPrivateKey) keyFactory.generatePrivate(keySpec);<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchAlgorithmException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Exception(<span class="hljs-string">"无此算法"</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InvalidKeySpecException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Exception(<span class="hljs-string">"私钥非法"</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (NullPointerException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Exception(<span class="hljs-string">"私钥数据为空"</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 公钥加密过程</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> publicKey</span><br><span class="hljs-comment">     *            公钥</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> plainTextData</span><br><span class="hljs-comment">     *            明文数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     *             加密过程中的异常信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">byte</span>[] encrypt(RSAPublicKey publicKey, <span class="hljs-keyword">byte</span>[] plainTextData)<br>            <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">if</span> (publicKey == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Exception(<span class="hljs-string">"加密公钥为空, 请设置"</span>);<br>        &#125;<br>        Cipher cipher = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 使用默认RSA</span><br>            cipher = Cipher.getInstance(<span class="hljs-string">"RSA"</span>);<br>            <span class="hljs-comment">// cipher= Cipher.getInstance("RSA", new BouncyCastleProvider());</span><br>            cipher.init(Cipher.ENCRYPT_MODE, publicKey);<br>            <span class="hljs-keyword">byte</span>[] output = cipher.doFinal(plainTextData);<br>            <span class="hljs-keyword">return</span> output;<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchAlgorithmException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Exception(<span class="hljs-string">"无此加密算法"</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchPaddingException e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (InvalidKeyException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Exception(<span class="hljs-string">"加密公钥非法,请检查"</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IllegalBlockSizeException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Exception(<span class="hljs-string">"明文长度非法"</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (BadPaddingException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Exception(<span class="hljs-string">"明文数据已损坏"</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 私钥加密过程</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> privateKey</span><br><span class="hljs-comment">     *            私钥</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> plainTextData</span><br><span class="hljs-comment">     *            明文数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     *             加密过程中的异常信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">byte</span>[] encrypt(RSAPrivateKey privateKey, <span class="hljs-keyword">byte</span>[] plainTextData)<br>            <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">if</span> (privateKey == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Exception(<span class="hljs-string">"加密私钥为空, 请设置"</span>);<br>        &#125;<br>        Cipher cipher = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 使用默认RSA</span><br>            cipher = Cipher.getInstance(<span class="hljs-string">"RSA"</span>);<br>            cipher.init(Cipher.ENCRYPT_MODE, privateKey);<br>            <span class="hljs-keyword">byte</span>[] output = cipher.doFinal(plainTextData);<br>            <span class="hljs-keyword">return</span> output;<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchAlgorithmException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Exception(<span class="hljs-string">"无此加密算法"</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchPaddingException e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (InvalidKeyException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Exception(<span class="hljs-string">"加密私钥非法,请检查"</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IllegalBlockSizeException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Exception(<span class="hljs-string">"明文长度非法"</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (BadPaddingException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Exception(<span class="hljs-string">"明文数据已损坏"</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 私钥解密过程</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> privateKey</span><br><span class="hljs-comment">     *            私钥</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> cipherData</span><br><span class="hljs-comment">     *            密文数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 明文</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     *             解密过程中的异常信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">byte</span>[] decrypt(RSAPrivateKey privateKey, <span class="hljs-keyword">byte</span>[] cipherData)<br>            <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">if</span> (privateKey == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Exception(<span class="hljs-string">"解密私钥为空, 请设置"</span>);<br>        &#125;<br>        Cipher cipher = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 使用默认RSA</span><br>            cipher = Cipher.getInstance(<span class="hljs-string">"RSA"</span>);<br>            <span class="hljs-comment">// cipher= Cipher.getInstance("RSA", new BouncyCastleProvider());</span><br>            cipher.init(Cipher.DECRYPT_MODE, privateKey);<br>            <span class="hljs-keyword">byte</span>[] output = cipher.doFinal(cipherData);<br>            <span class="hljs-keyword">return</span> output;<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchAlgorithmException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Exception(<span class="hljs-string">"无此解密算法"</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchPaddingException e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (InvalidKeyException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Exception(<span class="hljs-string">"解密私钥非法,请检查"</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IllegalBlockSizeException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Exception(<span class="hljs-string">"密文长度非法"</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (BadPaddingException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Exception(<span class="hljs-string">"密文数据已损坏"</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 公钥解密过程</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> publicKey</span><br><span class="hljs-comment">     *            公钥</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> cipherData</span><br><span class="hljs-comment">     *            密文数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 明文</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     *             解密过程中的异常信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">byte</span>[] decrypt(RSAPublicKey publicKey, <span class="hljs-keyword">byte</span>[] cipherData)<br>            <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">if</span> (publicKey == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Exception(<span class="hljs-string">"解密公钥为空, 请设置"</span>);<br>        &#125;<br>        Cipher cipher = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 使用默认RSA</span><br>            cipher = Cipher.getInstance(<span class="hljs-string">"RSA"</span>);<br>            <span class="hljs-comment">// cipher= Cipher.getInstance("RSA", new BouncyCastleProvider());</span><br>            cipher.init(Cipher.DECRYPT_MODE, publicKey);<br>            <span class="hljs-keyword">byte</span>[] output = cipher.doFinal(cipherData);<br>            <span class="hljs-keyword">return</span> output;<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchAlgorithmException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Exception(<span class="hljs-string">"无此解密算法"</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchPaddingException e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (InvalidKeyException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Exception(<span class="hljs-string">"解密公钥非法,请检查"</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IllegalBlockSizeException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Exception(<span class="hljs-string">"密文长度非法"</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (BadPaddingException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Exception(<span class="hljs-string">"密文数据已损坏"</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 字节数据转十六进制字符串</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data</span><br><span class="hljs-comment">     *            输入数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 十六进制内容</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">byteArrayToString</span><span class="hljs-params">(<span class="hljs-keyword">byte</span>[] data)</span> </span>&#123;<br>        StringBuilder stringBuilder = <span class="hljs-keyword">new</span> StringBuilder();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; data.length; i++) &#123;<br>            <span class="hljs-comment">// 取出字节的高四位 作为索引得到相应的十六进制标识符 注意无符号右移</span><br>            stringBuilder.append(HEX_CHAR[(data[i] &amp; <span class="hljs-number">0xf0</span>) &gt;&gt;&gt; <span class="hljs-number">4</span>]);<br>            <span class="hljs-comment">// 取出字节的低四位 作为索引得到相应的十六进制标识符</span><br>            stringBuilder.append(HEX_CHAR[(data[i] &amp; <span class="hljs-number">0x0f</span>)]);<br>            <span class="hljs-keyword">if</span> (i &lt; data.length - <span class="hljs-number">1</span>) &#123;<br>                stringBuilder.append(<span class="hljs-string">' '</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> stringBuilder.toString();<br>    &#125;<br><br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        String filepath=<span class="hljs-string">"F:/temp/"</span>;<br>        File file=<span class="hljs-keyword">new</span> File(filepath);<br>        <span class="hljs-keyword">if</span>(!file.exists())&#123;<br>            file.mkdir();<br>        &#125;<br>        genKeyPair(filepath);<br>        System.out.println(<span class="hljs-string">"--------------公钥加密私钥解密过程-------------------"</span>);<br>        String plainText=<span class="hljs-string">"1223333323:8783737321232:dewejj28i33e92hhsxxxx"</span>;<br>        <span class="hljs-comment">//公钥加密过程</span><br>        <span class="hljs-keyword">byte</span>[] cipherData=encrypt(loadPublicKeyByStr(loadPublicKeyByFile(filepath)),plainText.getBytes());<br>        String cipher=<span class="hljs-keyword">new</span> String(Base64.getEncoder().encode(cipherData));<br>        <span class="hljs-comment">//私钥解密过程</span><br>        <span class="hljs-keyword">byte</span>[] res=decrypt(loadPrivateKeyByStr(loadPrivateKeyByFile(filepath)), Base64.getDecoder().decode(cipher));<br>        String restr=<span class="hljs-keyword">new</span> String(res);<br>        System.out.println(<span class="hljs-string">"原文："</span>+plainText);<br>        System.out.println(<span class="hljs-string">"加密密文："</span>+cipher);<br>        System.out.println(<span class="hljs-string">"解密："</span>+restr);<br>        System.out.println();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>欢迎关注微信公众号 ：</strong></p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006y8mN6gy1g7d3llw1nkj30b40b4wee.jpg" srcset="/img/loading.gif" alt="欢迎关注公众号" style="width: 100px" />]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java IDE中设置作者日期等Javadoc注释信息</title>
    <link href="/2020/04/09/Java-IDE%E4%B8%AD%E8%AE%BE%E7%BD%AE%E4%BD%9C%E8%80%85%E6%97%A5%E6%9C%9F%E7%AD%89Javadoc%E6%B3%A8%E9%87%8A%E4%BF%A1%E6%81%AF/"/>
    <url>/2020/04/09/Java-IDE%E4%B8%AD%E8%AE%BE%E7%BD%AE%E4%BD%9C%E8%80%85%E6%97%A5%E6%9C%9F%E7%AD%89Javadoc%E6%B3%A8%E9%87%8A%E4%BF%A1%E6%81%AF/</url>
    
    <content type="html"><![CDATA[<p>在Java的IDE（Integrated Development Environment,集成开发环境）中，如Eclipse、Spring Tool Suite、IntelliJ IDEA等，都可以设置自动添加的Javadoc注释信息，可以添加@author 作者名、@version 版本标识、@date 日期等，新添加类或方法时会自动添加注释信息，很方便。/<em>*被注释语句</em>/ 就是专为Javadoc设计，可以被JDK内置的Javadoc工具支持和处理，下面就介绍下如何设置Javadoc注释信息和注释的规范。</p><h4 id="1、先来了解下Javadoc"><a href="#1、先来了解下Javadoc" class="headerlink" title="1、先来了解下Javadoc"></a>1、先来了解下Javadoc</h4><blockquote><p>Javadoc是Sun公司提供的一个技术，它从程序源代码中抽取类、方法、成员等注释形成一个和源代码配套的API帮助文档。也就是说，只要在编写程序时以一套特定的标签作注释，在程序编写完成后，通过Javadoc就可以同时形成程序的开发文档了。</p></blockquote><p>关键词列表：</p><ul><li>@author 作者名</li><li>@date 日期</li><li>@version 版本标识</li><li>@parameter 参数及其意义</li><li>@since 最早使用该方法/类/接口的JDK版本</li><li>@return 返回值</li><li>@throws 异常类及抛出条件</li><li>@deprecated 引起不推荐使用的警告</li><li>@see reference 查看引用</li><li>@override 重写</li></ul><p>更多Javadoc用法可以访问：<a href="http://baike.baidu.com/view/975838.htm" target="_blank" rel="noopener">百度百科</a>、<a href="http://www.oracle.com/technetwork/java/javase/documentation/index-jsp-135444.html" target="_blank" rel="noopener">官方文档</a>。</p><h4 id="2、Javadoc注释的规范"><a href="#2、Javadoc注释的规范" class="headerlink" title="2、Javadoc注释的规范"></a>2、Javadoc注释的规范</h4><p>附上Javadoc注释的规范，这才是本文的重点，${}的是变量，IDE会自动添加，当然也可以直接改为固定文字。</p><p>注释的规范如下：</p><p><strong>1、文件注释标签：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* &lt;p&gt;Title: $&#123;file_name&#125;&lt;/p&gt;</span><br><span class="hljs-comment">* &lt;p&gt;Description: &lt;/p&gt;</span><br><span class="hljs-comment">* &lt;p&gt;Copyright: Copyright (c) 2013&lt;/p&gt;</span><br><span class="hljs-comment">* &lt;p&gt;Company: www.izhangheng.com&lt;/p&gt;</span><br><span class="hljs-comment">* <span class="hljs-doctag">@author</span> zhangheng</span><br><span class="hljs-comment">* <span class="hljs-doctag">@date</span> $&#123;date&#125;</span><br><span class="hljs-comment">* <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p><strong>2、类型注释标签（类的注释）：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* &lt;p&gt;Title: $&#123;type_name&#125;&lt;/p&gt;</span><br><span class="hljs-comment">* &lt;p&gt;Description: &lt;/p&gt;</span><br><span class="hljs-comment">* &lt;p&gt;Company: www.izhangheng.com&lt;/p&gt;</span><br><span class="hljs-comment">* <span class="hljs-doctag">@author</span> zhangheng</span><br><span class="hljs-comment">* <span class="hljs-doctag">@date</span> $&#123;date&#125;</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p><strong>3、字段注释标签：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/** </span><br><span class="hljs-comment">* $&#123;field&#125;</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p><strong>4、构造函数标签：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* &lt;p&gt;Title: &lt;/p&gt;</span><br><span class="hljs-comment">* &lt;p&gt;Description: &lt;/p&gt;</span><br><span class="hljs-comment">* $&#123;tags&#125;</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p><strong>5、方法标签：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* &lt;p&gt;Title: $&#123;enclosing_method&#125;&lt;/p&gt;</span><br><span class="hljs-comment">* &lt;p&gt;Description: &lt;/p&gt;</span><br><span class="hljs-comment">* $&#123;tags&#125;</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p><strong>6、重写方法标签：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/** （非 Javadoc）</span><br><span class="hljs-comment">* &lt;p&gt;Title: $&#123;enclosing_method&#125;&lt;/p&gt;</span><br><span class="hljs-comment">* &lt;p&gt;Description: &lt;/p&gt;</span><br><span class="hljs-comment">* $&#123;tags&#125;</span><br><span class="hljs-comment">* $&#123;see_to_overridden&#125;</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p><strong>7、代表方法标签：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* $&#123;tags&#125;</span><br><span class="hljs-comment">* $&#123;see_to_target&#125;</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p><strong>8、getter方法标签：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* <span class="hljs-doctag">@return</span> $&#123;bare_field_name&#125;</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p><strong>9、setter方法标签：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> $&#123;param&#125; 要设置的 $&#123;bare_field_name&#125;</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p><strong>欢迎关注微信公众号 ：</strong></p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006y8mN6gy1g7d3llw1nkj30b40b4wee.jpg" srcset="/img/loading.gif" alt="欢迎关注公众号" style="width: 100px" />]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>JavaDoc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IntelliJIDEA生成JavaDoc</title>
    <link href="/2020/04/09/IntelliJIDEA%E7%94%9F%E6%88%90JavaDoc/"/>
    <url>/2020/04/09/IntelliJIDEA%E7%94%9F%E6%88%90JavaDoc/</url>
    
    <content type="html"><![CDATA[<p>IntelliJ IDEA，本身提供了很好的 JavaDoc 生成功能，以及标准 JavaDoc 注释转换功能，其实质是在代码编写过程中，按照标准 JavaDoc 的注释要求，为需要暴露给使用者的类、方法以及其他成员编写注释。然后使用 IDEA 的功能自动调用 javadoc（JDK 自带的工具）根据源代码中的注释内容自动生成 JavaDoc 文档（超文本格式）。</p><ol><li><p>IDEA 的 JavaDoc 生成功能在菜单 Tools -&gt; Generate JavaDoc 项里面。</p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/09/image-20200409111759947.png" srcset="/img/loading.gif" alt="image-20200409111759947"></p></li><li><p>点击上述菜单项后，会出现生成 JavaDoc 的对话框，一般的选项都很直观，不必细说。但是要注意生成 JavaDoc 的源代码对象的选择，一般以模块（Module）为主，必要时可以单独选择必要的 Java 源代码文件</p></li><li><p>里面有一个 Locale 可选填项，表示的是需要生成的 JavaDoc 以何种语言版本展示，根据 javadoc 的帮助说明，这其实对应的就是 javadoc 的 -locale 参数，如果不填，默认可能是英文或者是当前操作系统的语言，既然是国人，建议在此填写 zh_CN，这样生成的 JavaDoc 就是中文版本的，当然指的是 JavaDoc 的框架中各种通用的固定显示区域都是中文的。你自己编写的注释转换的内容还是根据你注释的内容来。</p></li><li><p>还有一个 “Other command line arguments:” 可选填项，非常重要，是填写直接向 javadoc 传递的参数内容。因为有一些重要的设置，只能通过直接参数形式向 javadoc 传递。这里必须要填写如下参数：</p><p><code>-encoding UTF-8 -charset UTF-8 -windowtitle&quot;YKXClouds Docs&quot;-link http://docs.Oracle.com/javase/8/docs/api</code></p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/09/image-20200409112213039.png" srcset="/img/loading.gif" alt="image-20200409112213039"></p></li><li><p>第一个参数 <code>-encoding UTF-8</code>  表示你的源代码（含有符合 JavaDoc 标准的注释）是基于 UTF-8 编码的，以免处理过程中出现中文等非英语字符乱码；第二个参数 -charset UTF-8 表示在处理并生成 JavaDoc 超文本时使用的字符集也是以 UTF-8 为编码，目前所有浏览器都支持 UTF-8，这样最具有通用性，支持中文非常好；第三个参数 -windowtitle 表示生成的 JavaDoc 超文本在浏览器中打开时，浏览器窗口标题栏显示的文字内容；第四个参数 -link 很重要，它表示你生成的 JavaDoc 中涉及到很多对其他外部 Java 类的引用，是使用全限定名称还是带有超链接的短名称，举个例子，我创建了一个方法 public void func (String arg)，这个方法在生成 JavaDoc 时如果不指定 -link 参数，则 JavaDoc 中对该方法的表述就会自动变为 public void func (java.lang.String arg)，因为 String 这个类对我自己实现的类来讲就是外部引用的类，虽然它是 Java 标准库的类。</p></li><li><p>如果指定了 <code>-link http://docs.oracle.com/javase/8/docs/api</code> 参数，则 javadoc 在生成 JavaDoc 时，会使用 String 这样的短名称而非全限定名称 java.lang.String，同时自动为 String 短名称生成一个超链接，指向官方 JavaSE 标准文档 <a href="http://docs.oracle.com/javase/8/docs/api" target="_blank" rel="noopener">http://docs.oracle.com/javase/8/docs/api</a> 中对 String 类的详细文档地址。-link 实质上是告诉 javadoc 根据提供的外部引用类的 JavaDoc 地址去找一个叫 package-list 的文本文件，在这个文本文件中包含了所有外部引用类的全限定名称，因此生成的新 JavaDoc 不必使用外部引用类的全限定名，只需要使用短名称，同时可以自动创建指向其外部引用 JavaDoc 中的详细文档超链接。每个 JavaDoc 都会在根目录下有一个 package-list 文件，包括我们自己生成的 JavaDoc。如果指定了 -link <a href="http://docs.oracle.com/javase/8/docs/api" target="_blank" rel="noopener">http://docs.oracle.com/javase/8/docs/api</a> 参数，则 javadoc 在生成 JavaDoc 时，会使用 String 这样的短名称而非全限定名称 java.lang.String，同时自动为 String 短名称生成一个超链接，指向官方 JavaSE 标准文档 <a href="http://docs.oracle.com/javase/8/docs/api" target="_blank" rel="noopener">http://docs.oracle.com/javase/8/docs/api</a> 中对 String 类的详细文档地址。-link 实质上是告诉 javadoc 根据提供的外部引用类的 JavaDoc 地址去找一个叫 package-list 的文本文件，在这个文本文件中包含了所有外部引用类的全限定名称，因此生成的新 JavaDoc 不必使用外部引用类的全限定名，只需要使用短名称，同时可以自动创建指向其外部引用 JavaDoc 中的详细文档超链接。每个 JavaDoc 都会在根目录下有一个 package-list 文件，包括我们自己生成的 JavaDoc。</p></li><li><p>JavaDoc 生成完毕，即可在其根目录下找到 index.html 文件，打开它就可以看到我们自己的标准 JavaDoc API 文档啦。</p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/09/image-20200409112314666.png" srcset="/img/loading.gif" alt="image-20200409112314666"></p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/09/image-20200409112442451.png" srcset="/img/loading.gif" alt="image-20200409112442451"></p></li><li><p><code>使用鼠标 + CTRL 选择多个模块，再去点击 Tools-&gt;Generate JavaDoc，生成的文档只会是你选择的多个模块，而不是单个模块，也不是这个项目源码的文档。</code></p></li></ol><p><strong>欢迎关注微信公众号：</strong></p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006y8mN6gy1g7d3llw1nkj30b40b4wee.jpg" srcset="/img/loading.gif" alt="欢迎关注公众号" style="width: 100px" />]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>JavaDoc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用线程</title>
    <link href="/2020/04/02/%E4%BD%BF%E7%94%A8%E7%BA%BF%E7%A8%8B/"/>
    <url>/2020/04/02/%E4%BD%BF%E7%94%A8%E7%BA%BF%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="一、使用线程"><a href="#一、使用线程" class="headerlink" title="一、使用线程"></a>一、使用线程</h1><p>有三种使用线程的方法：</p><ul><li>实现 Runnable 接口；</li><li>实现 Callable 接口；</li><li>继承 Thread 类。</li></ul><p>实现 Runnable 和 Callable 接口的类只能当做一个可以在线程中运行的任务，不是真正意义上的线程，因此最后还需要通过 Thread 来调用。可以理解为任务是通过线程驱动从而执行的。</p><h2 id="实现-Runnable-接口"><a href="#实现-Runnable-接口" class="headerlink" title="实现 Runnable 接口"></a>实现 Runnable 接口</h2><p>需要实现接口中的 run() 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyRunnable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// ...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用 Runnable 实例再创建一个 Thread 实例，然后调用 Thread 实例的 start() 方法来启动线程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    MyRunnable instance = <span class="hljs-keyword">new</span> MyRunnable();<br>    Thread thread = <span class="hljs-keyword">new</span> Thread(instance);<br>    thread.start();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="实现-Callable-接口"><a href="#实现-Callable-接口" class="headerlink" title="实现 Callable 接口"></a>实现 Callable 接口</h2><p>与 Runnable 相比，Callable 可以有返回值，返回值通过 FutureTask 进行封装。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyCallable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Callable</span>&lt;<span class="hljs-title">Integer</span>&gt; </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">call</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">123</span>;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException </span>&#123;<br>    MyCallable mc = <span class="hljs-keyword">new</span> MyCallable();<br>    FutureTask&lt;Integer&gt; ft = <span class="hljs-keyword">new</span> FutureTask&lt;&gt;(mc);<br>    Thread thread = <span class="hljs-keyword">new</span> Thread(ft);<br>    thread.start();<br>    System.out.println(ft.get());<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="继承-Thread-类"><a href="#继承-Thread-类" class="headerlink" title="继承 Thread 类"></a>继承 Thread 类</h2><p>同样也是需要实现 run() 方法，因为 Thread 类也实现了 Runable 接口。</p><p>当调用 start() 方法启动一个线程时，虚拟机会将该线程放入就绪队列中等待被调度，当一个线程被调度时会执行该线程的 run() 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// ...</span><br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    MyThread mt = <span class="hljs-keyword">new</span> MyThread();<br>    mt.start();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="实现接口-VS-继承-Thread"><a href="#实现接口-VS-继承-Thread" class="headerlink" title="实现接口 VS 继承 Thread"></a>实现接口 VS 继承 Thread</h2><p>实现接口会更好一些，因为：</p><ul><li>Java 不支持多重继承，因此继承了 Thread 类就无法继承其它类，但是可以实现多个接口；</li><li>类可能只要求可执行就行，继承整个 Thread 类开销过大。</li></ul><h1 id="二、基础线程机制"><a href="#二、基础线程机制" class="headerlink" title="二、基础线程机制"></a>二、基础线程机制</h1><h2 id="Executor"><a href="#Executor" class="headerlink" title="Executor"></a>Executor</h2><p>Executor 管理多个异步任务的执行，而无需程序员显式地管理线程的生命周期。这里的异步是指多个任务的执行互不干扰，不需要进行同步操作。</p><p>主要有三种 Executor：</p><ul><li>CachedThreadPool：一个任务创建一个线程；</li><li>FixedThreadPool：所有任务只能使用固定大小的线程；</li><li>SingleThreadExecutor：相当于大小为 1 的 FixedThreadPool。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    ExecutorService executorService = Executors.newCachedThreadPool();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>        executorService.execute(<span class="hljs-keyword">new</span> MyRunnable());<br>    &#125;<br>    executorService.shutdown();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Daemon"><a href="#Daemon" class="headerlink" title="Daemon"></a>Daemon</h2><p>守护线程是程序运行时在后台提供服务的线程，不属于程序中不可或缺的部分。</p><p>当所有非守护线程结束时，程序也就终止，同时会杀死所有守护线程。</p><p>main() 属于非守护线程。</p><p>在线程启动之前使用 setDaemon() 方法可以将一个线程设置为守护线程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    Thread thread = <span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">new</span> MyRunnable());<br>    thread.setDaemon(<span class="hljs-keyword">true</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="sleep"><a href="#sleep" class="headerlink" title="sleep()"></a>sleep()</h2><p>Thread.sleep(millisec) 方法会休眠当前正在执行的线程，millisec 单位为毫秒。</p><p>sleep() 可能会抛出 InterruptedException，因为异常不能跨线程传播回 main() 中，因此必须在本地进行处理。线程中抛出的其它异常也同样需要在本地进行处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        Thread.sleep(<span class="hljs-number">3000</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="yield"><a href="#yield" class="headerlink" title="yield()"></a>yield()</h2><p>对静态方法 Thread.yield() 的调用声明了当前线程已经完成了生命周期中最重要的部分，可以切换给其它线程来执行。该方法只是对线程调度器的一个建议，而且也只是建议具有相同优先级的其它线程可以运行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>    Thread.yield();<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="三、中断"><a href="#三、中断" class="headerlink" title="三、中断"></a>三、中断</h1><p>一个线程执行完毕之后会自动结束，如果在运行过程中发生异常也会提前结束。</p><h2 id="InterruptedException"><a href="#InterruptedException" class="headerlink" title="InterruptedException"></a>InterruptedException</h2><p>通过调用一个线程的 interrupt() 来中断该线程，如果该线程处于阻塞、限期等待或者无限期等待状态，那么就会抛出 InterruptedException，从而提前结束该线程。但是不能中断 I/O 阻塞和 synchronized 锁阻塞。</p><p>对于以下代码，在 main() 中启动一个线程之后再中断它，由于线程中调用了 Thread.sleep() 方法，因此会抛出一个 InterruptedException，从而提前结束线程，不执行之后的语句。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InterruptExample</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">2000</span>);<br>                System.out.println(<span class="hljs-string">"Thread run"</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>    Thread thread1 = <span class="hljs-keyword">new</span> MyThread1();<br>    thread1.start();<br>    thread1.interrupt();<br>    System.out.println(<span class="hljs-string">"Main run"</span>);<br>&#125;<br>Main run<br>java.lang.InterruptedException: sleep interrupted<br>    at java.lang.Thread.sleep(Native Method)<br>    at InterruptExample.lambda$main$<span class="hljs-number">0</span>(InterruptExample.java:<span class="hljs-number">5</span>)<br>    at InterruptExample$$Lambda$<span class="hljs-number">1</span>/<span class="hljs-number">713338599</span>.run(Unknown Source)<br>    at java.lang.Thread.run(Thread.java:<span class="hljs-number">745</span>)<br></code></pre></td></tr></table></figure><h2 id="interrupted"><a href="#interrupted" class="headerlink" title="interrupted()"></a>interrupted()</h2><p>如果一个线程的 run() 方法执行一个无限循环，并且没有执行 sleep() 等会抛出 InterruptedException 的操作，那么调用线程的 interrupt() 方法就无法使线程提前结束。</p><p>但是调用 interrupt() 方法会设置线程的中断标记，此时调用 interrupted() 方法会返回 true。因此可以在循环体中使用 interrupted() 方法来判断线程是否处于中断状态，从而提前结束线程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InterruptExample</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">while</span> (!interrupted()) &#123;<br>                <span class="hljs-comment">// ..</span><br>            &#125;<br>            System.out.println(<span class="hljs-string">"Thread end"</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>    Thread thread2 = <span class="hljs-keyword">new</span> MyThread2();<br>    thread2.start();<br>    thread2.interrupt();<br>&#125;<br>Thread end<br></code></pre></td></tr></table></figure><h2 id="Executor-的中断操作"><a href="#Executor-的中断操作" class="headerlink" title="Executor 的中断操作"></a>Executor 的中断操作</h2><p>调用 Executor 的 shutdown() 方法会等待线程都执行完毕之后再关闭，但是如果调用的是 shutdownNow() 方法，则相当于调用每个线程的 interrupt() 方法。</p><p>以下使用 Lambda 创建线程，相当于创建了一个匿名内部线程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    ExecutorService executorService = Executors.newCachedThreadPool();<br>    executorService.execute(() -&gt; &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">2000</span>);<br>            System.out.println(<span class="hljs-string">"Thread run"</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;);<br>    executorService.shutdownNow();<br>    System.out.println(<span class="hljs-string">"Main run"</span>);<br>&#125;<br>Main run<br>java.lang.InterruptedException: sleep interrupted<br>    at java.lang.Thread.sleep(Native Method)<br>    at ExecutorInterruptExample.lambda$main$<span class="hljs-number">0</span>(ExecutorInterruptExample.java:<span class="hljs-number">9</span>)<br>    at ExecutorInterruptExample$$Lambda$<span class="hljs-number">1</span>/<span class="hljs-number">1160460865</span>.run(Unknown Source)<br>    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:<span class="hljs-number">1142</span>)<br>    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:<span class="hljs-number">617</span>)<br>    at java.lang.Thread.run(Thread.java:<span class="hljs-number">745</span>)<br></code></pre></td></tr></table></figure><p>如果只想中断 Executor 中的一个线程，可以通过使用 submit() 方法来提交一个线程，它会返回一个 Future&lt;?&gt; 对象，通过调用该对象的 cancel(true) 方法就可以中断线程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Future&lt;?&gt; future = executorService.submit(() -&gt; &#123;<br>    <span class="hljs-comment">// ..</span><br>&#125;);<br>future.cancel(<span class="hljs-keyword">true</span>);<br></code></pre></td></tr></table></figure><h1 id="四、互斥同步"><a href="#四、互斥同步" class="headerlink" title="四、互斥同步"></a>四、互斥同步</h1><p>Java 提供了两种锁机制来控制多个线程对共享资源的互斥访问，第一个是 JVM 实现的 synchronized，而另一个是 JDK 实现的 ReentrantLock。</p><h2 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h2><p><strong>1. 同步一个代码块</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">synchronized</span> (<span class="hljs-keyword">this</span>) &#123;<br>        <span class="hljs-comment">// ...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>它只作用于同一个对象，如果调用两个对象上的同步代码块，就不会进行同步。</p><p>对于以下代码，使用 ExecutorService 执行了两个线程，由于调用的是同一个对象的同步代码块，因此这两个线程会进行同步，当一个线程进入同步语句块时，另一个线程就必须等待。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SynchronizedExample</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">func1</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">synchronized</span> (<span class="hljs-keyword">this</span>) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>                System.out.print(i + <span class="hljs-string">" "</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    SynchronizedExample e1 = <span class="hljs-keyword">new</span> SynchronizedExample();<br>    ExecutorService executorService = Executors.newCachedThreadPool();<br>    executorService.execute(() -&gt; e1.func1());<br>    executorService.execute(() -&gt; e1.func1());<br>&#125;<br><span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span><br></code></pre></td></tr></table></figure><p>对于以下代码，两个线程调用了不同对象的同步代码块，因此这两个线程就不需要同步。从输出结果可以看出，两个线程交叉执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    SynchronizedExample e1 = <span class="hljs-keyword">new</span> SynchronizedExample();<br>    SynchronizedExample e2 = <span class="hljs-keyword">new</span> SynchronizedExample();<br>    ExecutorService executorService = Executors.newCachedThreadPool();<br>    executorService.execute(() -&gt; e1.func1());<br>    executorService.execute(() -&gt; e2.func1());<br>&#125;<br><span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span> <span class="hljs-number">9</span><br></code></pre></td></tr></table></figure><p><strong>2. 同步一个方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">func</span> <span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>它和同步代码块一样，作用于同一个对象。</p><p><strong>3. 同步一个类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">synchronized</span> (SynchronizedExample<span class="hljs-class">.<span class="hljs-keyword">class</span>) </span>&#123;<br>        <span class="hljs-comment">// ...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>作用于整个类，也就是说两个线程调用同一个类的不同对象上的这种同步语句，也会进行同步。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SynchronizedExample</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">func2</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">synchronized</span> (SynchronizedExample<span class="hljs-class">.<span class="hljs-keyword">class</span>) </span>&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>                System.out.print(i + <span class="hljs-string">" "</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    SynchronizedExample e1 = <span class="hljs-keyword">new</span> SynchronizedExample();<br>    SynchronizedExample e2 = <span class="hljs-keyword">new</span> SynchronizedExample();<br>    ExecutorService executorService = Executors.newCachedThreadPool();<br>    executorService.execute(() -&gt; e1.func2());<br>    executorService.execute(() -&gt; e2.func2());<br>&#125;<br><span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span><br></code></pre></td></tr></table></figure><p><strong>4. 同步一个静态方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fun</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>作用于整个类。</p><h2 id="ReentrantLock"><a href="#ReentrantLock" class="headerlink" title="ReentrantLock"></a>ReentrantLock</h2><p>ReentrantLock 是 java.util.concurrent（J.U.C）包中的锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LockExample</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> Lock lock = <span class="hljs-keyword">new</span> ReentrantLock();<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span> </span>&#123;<br>        lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>                System.out.print(i + <span class="hljs-string">" "</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock(); <span class="hljs-comment">// 确保释放锁，从而避免发生死锁。</span><br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    LockExample lockExample = <span class="hljs-keyword">new</span> LockExample();<br>    ExecutorService executorService = Executors.newCachedThreadPool();<br>    executorService.execute(() -&gt; lockExample.func());<br>    executorService.execute(() -&gt; lockExample.func());<br>&#125;<br><span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span><br></code></pre></td></tr></table></figure><h2 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h2><p><strong>1. 锁的实现</strong></p><p>synchronized 是 JVM 实现的，而 ReentrantLock 是 JDK 实现的。</p><p><strong>2. 性能</strong></p><p>新版本 Java 对 synchronized 进行了很多优化，例如自旋锁等，synchronized 与 ReentrantLock 大致相同。</p><p><strong>3. 等待可中断</strong></p><p>当持有锁的线程长期不释放锁的时候，正在等待的线程可以选择放弃等待，改为处理其他事情。</p><p>ReentrantLock 可中断，而 synchronized 不行。</p><p><strong>4. 公平锁</strong></p><p>公平锁是指多个线程在等待同一个锁时，必须按照申请锁的时间顺序来依次获得锁。</p><p>synchronized 中的锁是非公平的，ReentrantLock 默认情况下也是非公平的，但是也可以是公平的。</p><p><strong>5. 锁绑定多个条件</strong></p><p>一个 ReentrantLock 可以同时绑定多个 Condition 对象。</p><h2 id="使用选择"><a href="#使用选择" class="headerlink" title="使用选择"></a>使用选择</h2><p>除非需要使用 ReentrantLock 的高级功能，否则优先使用 synchronized。这是因为 synchronized 是 JVM 实现的一种锁机制，JVM 原生地支持它，而 ReentrantLock 不是所有的 JDK 版本都支持。并且使用 synchronized 不用担心没有释放锁而导致死锁问题，因为 JVM 会确保锁的释放。</p><h1 id="五、线程之间的协作"><a href="#五、线程之间的协作" class="headerlink" title="五、线程之间的协作"></a>五、线程之间的协作</h1><p>当多个线程可以一起工作去解决某个问题时，如果某些部分必须在其它部分之前完成，那么就需要对线程进行协调。</p><h2 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h2><p>在线程中调用另一个线程的 join() 方法，会将当前线程挂起，而不是忙等待，直到目标线程结束。</p><p>对于以下代码，虽然 b 线程先启动，但是因为在 b 线程中调用了 a 线程的 join() 方法，b 线程会等待 a 线程结束才继续执行，因此最后能够保证 a 线程的输出先于 b 线程的输出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JoinExample</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>            System.out.println(<span class="hljs-string">"A"</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br><br>        <span class="hljs-keyword">private</span> A a;<br><br>        B(A a) &#123;<br>            <span class="hljs-keyword">this</span>.a = a;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                a.join();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            System.out.println(<span class="hljs-string">"B"</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br>        A a = <span class="hljs-keyword">new</span> A();<br>        B b = <span class="hljs-keyword">new</span> B(a);<br>        b.start();<br>        a.start();<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    JoinExample example = <span class="hljs-keyword">new</span> JoinExample();<br>    example.test();<br>&#125;<br>A<br>B<br></code></pre></td></tr></table></figure><h2 id="wait-notify-notifyAll"><a href="#wait-notify-notifyAll" class="headerlink" title="wait() notify() notifyAll()"></a>wait() notify() notifyAll()</h2><p>调用 wait() 使得线程等待某个条件满足，线程在等待时会被挂起，当其他线程的运行使得这个条件满足时，其它线程会调用 notify() 或者 notifyAll() 来唤醒挂起的线程。</p><p>它们都属于 Object 的一部分，而不属于 Thread。</p><p>只能用在同步方法或者同步控制块中使用，否则会在运行时抛出 IllegalMonitorStateException。</p><p>使用 wait() 挂起期间，线程会释放锁。这是因为，如果没有释放锁，那么其它线程就无法进入对象的同步方法或者同步控制块中，那么就无法执行 notify() 或者 notifyAll() 来唤醒挂起的线程，造成死锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WaitNotifyExample</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">before</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"before"</span>);<br>        notifyAll();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">after</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            wait();<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        System.out.println(<span class="hljs-string">"after"</span>);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    ExecutorService executorService = Executors.newCachedThreadPool();<br>    WaitNotifyExample example = <span class="hljs-keyword">new</span> WaitNotifyExample();<br>    executorService.execute(() -&gt; example.after());<br>    executorService.execute(() -&gt; example.before());<br>&#125;<br>before<br>after<br></code></pre></td></tr></table></figure><p><strong>wait() 和 sleep() 的区别</strong></p><ul><li>wait() 是 Object 的方法，而 sleep() 是 Thread 的静态方法；</li><li>wait() 会释放锁，sleep() 不会。</li></ul><h2 id="await-signal-signalAll"><a href="#await-signal-signalAll" class="headerlink" title="await() signal() signalAll()"></a>await() signal() signalAll()</h2><p>java.util.concurrent 类库中提供了 Condition 类来实现线程之间的协调，可以在 Condition 上调用 await() 方法使线程等待，其它线程调用 signal() 或 signalAll() 方法唤醒等待的线程。</p><p>相比于 wait() 这种等待方式，await() 可以指定等待的条件，因此更加灵活。</p><p>使用 Lock 来获取一个 Condition 对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AwaitSignalExample</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> Lock lock = <span class="hljs-keyword">new</span> ReentrantLock();<br>    <span class="hljs-keyword">private</span> Condition condition = lock.newCondition();<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">before</span><span class="hljs-params">()</span> </span>&#123;<br>        lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(<span class="hljs-string">"before"</span>);<br>            condition.signalAll();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">after</span><span class="hljs-params">()</span> </span>&#123;<br>        lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            condition.await();<br>            System.out.println(<span class="hljs-string">"after"</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    ExecutorService executorService = Executors.newCachedThreadPool();<br>    AwaitSignalExample example = <span class="hljs-keyword">new</span> AwaitSignalExample();<br>    executorService.execute(() -&gt; example.after());<br>    executorService.execute(() -&gt; example.before());<br>&#125;<br>before<br>after<br></code></pre></td></tr></table></figure><h1 id="六、线程状态"><a href="#六、线程状态" class="headerlink" title="六、线程状态"></a>六、线程状态</h1><p>一个线程只能处于一种状态，并且这里的线程状态特指 Java 虚拟机的线程状态，不能反映线程在特定操作系统下的状态。</p><h2 id="新建（NEW）"><a href="#新建（NEW）" class="headerlink" title="新建（NEW）"></a>新建（NEW）</h2><p>创建后尚未启动。</p><h2 id="可运行（RUNABLE）"><a href="#可运行（RUNABLE）" class="headerlink" title="可运行（RUNABLE）"></a>可运行（RUNABLE）</h2><p>正在 Java 虚拟机中运行。但是在操作系统层面，它可能处于运行状态，也可能等待资源调度（例如处理器资源），资源调度完成就进入运行状态。所以该状态的可运行是指可以被运行，具体有没有运行要看底层操作系统的资源调度。</p><h2 id="阻塞（BLOCKED）"><a href="#阻塞（BLOCKED）" class="headerlink" title="阻塞（BLOCKED）"></a>阻塞（BLOCKED）</h2><p>请求获取 monitor lock 从而进入 synchronized 函数或者代码块，但是其它线程已经占用了该 monitor lock，所以出于阻塞状态。要结束该状态进入从而 RUNABLE 需要其他线程释放 monitor lock。</p><h2 id="无限期等待（WAITING）"><a href="#无限期等待（WAITING）" class="headerlink" title="无限期等待（WAITING）"></a>无限期等待（WAITING）</h2><p>等待其它线程显式地唤醒。</p><p>阻塞和等待的区别在于，阻塞是被动的，它是在等待获取 monitor lock。而等待是主动的，通过调用 Object.wait() 等方法进入。</p><table><thead><tr><th>进入方法</th><th>退出方法</th></tr></thead><tbody><tr><td>没有设置 Timeout 参数的 Object.wait() 方法</td><td>Object.notify() / Object.notifyAll()</td></tr><tr><td>没有设置 Timeout 参数的 Thread.join() 方法</td><td>被调用的线程执行完毕</td></tr><tr><td>LockSupport.park() 方法</td><td>LockSupport.unpark(Thread)</td></tr></tbody></table><h2 id="限期等待（TIMED-WAITING）"><a href="#限期等待（TIMED-WAITING）" class="headerlink" title="限期等待（TIMED_WAITING）"></a>限期等待（TIMED_WAITING）</h2><p>无需等待其它线程显式地唤醒，在一定时间之后会被系统自动唤醒。</p><table><thead><tr><th>进入方法</th><th>退出方法</th></tr></thead><tbody><tr><td>Thread.sleep() 方法</td><td>时间结束</td></tr><tr><td>设置了 Timeout 参数的 Object.wait() 方法</td><td>时间结束 / Object.notify() / Object.notifyAll()</td></tr><tr><td>设置了 Timeout 参数的 Thread.join() 方法</td><td>时间结束 / 被调用的线程执行完毕</td></tr><tr><td>LockSupport.parkNanos() 方法</td><td>LockSupport.unpark(Thread)</td></tr><tr><td>LockSupport.parkUntil() 方法</td><td>LockSupport.unpark(Thread)</td></tr></tbody></table><p>调用 Thread.sleep() 方法使线程进入限期等待状态时，常常用“使一个线程睡眠”进行描述。调用 Object.wait() 方法使线程进入限期等待或者无限期等待时，常常用“挂起一个线程”进行描述。睡眠和挂起是用来描述行为，而阻塞和等待用来描述状态。</p><h2 id="死亡（TERMINATED）"><a href="#死亡（TERMINATED）" class="headerlink" title="死亡（TERMINATED）"></a>死亡（TERMINATED）</h2><p>可以是线程结束任务之后自己结束，或者产生了异常而结束。</p><p><a href="https://docs.oracle.com/javase/9/docs/api/java/lang/Thread.State.html" target="_blank" rel="noopener">Java SE 9 Enum Thread.State</a></p><h1 id="七、J-U-C-AQS"><a href="#七、J-U-C-AQS" class="headerlink" title="七、J.U.C - AQS"></a>七、J.U.C - AQS</h1><p>java.util.concurrent（J.U.C）大大提高了并发性能，AQS 被认为是 J.U.C 的核心。</p><h2 id="CountDownLatch"><a href="#CountDownLatch" class="headerlink" title="CountDownLatch"></a>CountDownLatch</h2><p>用来控制一个或者多个线程等待多个线程。</p><p>维护了一个计数器 cnt，每次调用 countDown() 方法会让计数器的值减 1，减到 0 的时候，那些因为调用 await() 方法而在等待的线程就会被唤醒。</p><p><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/ba078291-791e-4378-b6d1-ece76c2f0b14.png" srcset="/img/loading.gif" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CountdownLatchExample</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> totalThread = <span class="hljs-number">10</span>;<br>        CountDownLatch countDownLatch = <span class="hljs-keyword">new</span> CountDownLatch(totalThread);<br>        ExecutorService executorService = Executors.newCachedThreadPool();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; totalThread; i++) &#123;<br>            executorService.execute(() -&gt; &#123;<br>                System.out.print(<span class="hljs-string">"run.."</span>);<br>                countDownLatch.countDown();<br>            &#125;);<br>        &#125;<br>        countDownLatch.await();<br>        System.out.println(<span class="hljs-string">"end"</span>);<br>        executorService.shutdown();<br>    &#125;<br>&#125;<br>run..run..run..run..run..run..run..run..run..run..end<br></code></pre></td></tr></table></figure><h2 id="CyclicBarrier"><a href="#CyclicBarrier" class="headerlink" title="CyclicBarrier"></a>CyclicBarrier</h2><p>用来控制多个线程互相等待，只有当多个线程都到达时，这些线程才会继续执行。</p><p>和 CountdownLatch 相似，都是通过维护计数器来实现的。线程执行 await() 方法之后计数器会减 1，并进行等待，直到计数器为 0，所有调用 await() 方法而在等待的线程才能继续执行。</p><p>CyclicBarrier 和 CountdownLatch 的一个区别是，CyclicBarrier 的计数器通过调用 reset() 方法可以循环使用，所以它才叫做循环屏障。</p><p>CyclicBarrier 有两个构造函数，其中 parties 指示计数器的初始值，barrierAction 在所有线程都到达屏障的时候会执行一次。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">CyclicBarrier</span><span class="hljs-params">(<span class="hljs-keyword">int</span> parties, Runnable barrierAction)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (parties &lt;= <span class="hljs-number">0</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException();<br>    <span class="hljs-keyword">this</span>.parties = parties;<br>    <span class="hljs-keyword">this</span>.count = parties;<br>    <span class="hljs-keyword">this</span>.barrierCommand = barrierAction;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">CyclicBarrier</span><span class="hljs-params">(<span class="hljs-keyword">int</span> parties)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>(parties, <span class="hljs-keyword">null</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/f71af66b-0d54-4399-a44b-f47b58321984.png" srcset="/img/loading.gif" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CyclicBarrierExample</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> totalThread = <span class="hljs-number">10</span>;<br>        CyclicBarrier cyclicBarrier = <span class="hljs-keyword">new</span> CyclicBarrier(totalThread);<br>        ExecutorService executorService = Executors.newCachedThreadPool();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; totalThread; i++) &#123;<br>            executorService.execute(() -&gt; &#123;<br>                System.out.print(<span class="hljs-string">"before.."</span>);<br>                <span class="hljs-keyword">try</span> &#123;<br>                    cyclicBarrier.await();<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException | BrokenBarrierException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>                System.out.print(<span class="hljs-string">"after.."</span>);<br>            &#125;);<br>        &#125;<br>        executorService.shutdown();<br>    &#125;<br>&#125;<br>before..before..before..before..before..before..before..before..before..before..after..after..after..after..after..after..after..after..after..after..<br></code></pre></td></tr></table></figure><h2 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h2><p>Semaphore 类似于操作系统中的信号量，可以控制对互斥资源的访问线程数。</p><p>以下代码模拟了对某个服务的并发请求，每次只能有 3 个客户端同时访问，请求总数为 10。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SemaphoreExample</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> clientCount = <span class="hljs-number">3</span>;<br>        <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> totalRequestCount = <span class="hljs-number">10</span>;<br>        Semaphore semaphore = <span class="hljs-keyword">new</span> Semaphore(clientCount);<br>        ExecutorService executorService = Executors.newCachedThreadPool();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; totalRequestCount; i++) &#123;<br>            executorService.execute(()-&gt;&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    semaphore.acquire();<br>                    System.out.print(semaphore.availablePermits() + <span class="hljs-string">" "</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125; <span class="hljs-keyword">finally</span> &#123;<br>                    semaphore.release();<br>                &#125;<br>            &#125;);<br>        &#125;<br>        executorService.shutdown();<br>    &#125;<br>&#125;<br><span class="hljs-number">2</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h1 id="八、J-U-C-其它组件"><a href="#八、J-U-C-其它组件" class="headerlink" title="八、J.U.C - 其它组件"></a>八、J.U.C - 其它组件</h1><h2 id="FutureTask"><a href="#FutureTask" class="headerlink" title="FutureTask"></a>FutureTask</h2><p>在介绍 Callable 时我们知道它可以有返回值，返回值通过 Future 进行封装。FutureTask 实现了 RunnableFuture 接口，该接口继承自 Runnable 和 Future 接口，这使得 FutureTask 既可以当做一个任务执行，也可以有返回值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FutureTask</span>&lt;<span class="hljs-title">V</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title">RunnableFuture</span>&lt;<span class="hljs-title">V</span>&gt;</span><br><span class="hljs-class"><span class="hljs-title">public</span> <span class="hljs-title">interface</span> <span class="hljs-title">RunnableFuture</span>&lt;<span class="hljs-title">V</span>&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title">Runnable</span>, <span class="hljs-title">Future</span>&lt;<span class="hljs-title">V</span>&gt;</span><br></code></pre></td></tr></table></figure><p>FutureTask 可用于异步获取执行结果或取消执行任务的场景。当一个计算任务需要执行很长时间，那么就可以用 FutureTask 来封装这个任务，主线程在完成自己的任务之后再去获取结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FutureTaskExample</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException </span>&#123;<br>        FutureTask&lt;Integer&gt; futureTask = <span class="hljs-keyword">new</span> FutureTask&lt;Integer&gt;(<span class="hljs-keyword">new</span> Callable&lt;Integer&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>                <span class="hljs-keyword">int</span> result = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>                    Thread.sleep(<span class="hljs-number">10</span>);<br>                    result += i;<br>                &#125;<br>                <span class="hljs-keyword">return</span> result;<br>            &#125;<br>        &#125;);<br><br>        Thread computeThread = <span class="hljs-keyword">new</span> Thread(futureTask);<br>        computeThread.start();<br><br>        Thread otherThread = <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>            System.out.println(<span class="hljs-string">"other task is running..."</span>);<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;);<br>        otherThread.start();<br>        System.out.println(futureTask.get());<br>    &#125;<br>&#125;<br>other task is running...<br><span class="hljs-number">4950</span><br></code></pre></td></tr></table></figure><h2 id="BlockingQueue"><a href="#BlockingQueue" class="headerlink" title="BlockingQueue"></a>BlockingQueue</h2><p>java.util.concurrent.BlockingQueue 接口有以下阻塞队列的实现：</p><ul><li><strong>FIFO 队列</strong> ：LinkedBlockingQueue、ArrayBlockingQueue（固定长度）</li><li><strong>优先级队列</strong> ：PriorityBlockingQueue</li></ul><p>提供了阻塞的 take() 和 put() 方法：如果队列为空 take() 将阻塞，直到队列中有内容；如果队列为满 put() 将阻塞，直到队列有空闲位置。</p><p><strong>使用 BlockingQueue 实现生产者消费者问题</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProducerConsumer</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> BlockingQueue&lt;String&gt; queue = <span class="hljs-keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="hljs-number">5</span>);<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Producer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                queue.put(<span class="hljs-string">"product"</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            System.out.print(<span class="hljs-string">"produce.."</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Consumer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                String product = queue.take();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            System.out.print(<span class="hljs-string">"consume.."</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++) &#123;<br>        Producer producer = <span class="hljs-keyword">new</span> Producer();<br>        producer.start();<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>        Consumer consumer = <span class="hljs-keyword">new</span> Consumer();<br>        consumer.start();<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br>        Producer producer = <span class="hljs-keyword">new</span> Producer();<br>        producer.start();<br>    &#125;<br>&#125;<br>produce..produce..consume..consume..produce..consume..produce..consume..produce..consume..<br></code></pre></td></tr></table></figure><h2 id="ForkJoin"><a href="#ForkJoin" class="headerlink" title="ForkJoin"></a>ForkJoin</h2><p>主要用于并行计算中，和 MapReduce 原理类似，都是把大的计算任务拆分成多个小任务并行计算。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ForkJoinExample</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">RecursiveTask</span>&lt;<span class="hljs-title">Integer</span>&gt; </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> threshold = <span class="hljs-number">5</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> first;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> last;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ForkJoinExample</span><span class="hljs-params">(<span class="hljs-keyword">int</span> first, <span class="hljs-keyword">int</span> last)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.first = first;<br>        <span class="hljs-keyword">this</span>.last = last;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> Integer <span class="hljs-title">compute</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> result = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (last - first &lt;= threshold) &#123;<br>            <span class="hljs-comment">// 任务足够小则直接计算</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = first; i &lt;= last; i++) &#123;<br>                result += i;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 拆分成小任务</span><br>            <span class="hljs-keyword">int</span> middle = first + (last - first) / <span class="hljs-number">2</span>;<br>            ForkJoinExample leftTask = <span class="hljs-keyword">new</span> ForkJoinExample(first, middle);<br>            ForkJoinExample rightTask = <span class="hljs-keyword">new</span> ForkJoinExample(middle + <span class="hljs-number">1</span>, last);<br>            leftTask.fork();<br>            rightTask.fork();<br>            result = leftTask.join() + rightTask.join();<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException </span>&#123;<br>    ForkJoinExample example = <span class="hljs-keyword">new</span> ForkJoinExample(<span class="hljs-number">1</span>, <span class="hljs-number">10000</span>);<br>    ForkJoinPool forkJoinPool = <span class="hljs-keyword">new</span> ForkJoinPool();<br>    Future result = forkJoinPool.submit(example);<br>    System.out.println(result.get());<br>&#125;<br></code></pre></td></tr></table></figure><p>ForkJoin 使用 ForkJoinPool 来启动，它是一个特殊的线程池，线程数量取决于 CPU 核数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ForkJoinPool</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractExecutorService</span></span><br></code></pre></td></tr></table></figure><p>ForkJoinPool 实现了工作窃取算法来提高 CPU 的利用率。每个线程都维护了一个双端队列，用来存储需要执行的任务。工作窃取算法允许空闲的线程从其它线程的双端队列中窃取一个任务来执行。窃取的任务必须是最晚的任务，避免和队列所属线程发生竞争。例如下图中，Thread2 从 Thread1 的队列中拿出最晚的 Task1 任务，Thread1 会拿出 Task2 来执行，这样就避免发生竞争。但是如果队列中只有一个任务时还是会发生竞争。</p><p><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/e42f188f-f4a9-4e6f-88fc-45f4682072fb.png" srcset="/img/loading.gif" alt="img"></p><h1 id="九、线程不安全示例"><a href="#九、线程不安全示例" class="headerlink" title="九、线程不安全示例"></a>九、线程不安全示例</h1><p>如果多个线程对同一个共享数据进行访问而不采取同步操作的话，那么操作的结果是不一致的。</p><p>以下代码演示了 1000 个线程同时对 cnt 执行自增操作，操作结束之后它的值有可能小于 1000。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadUnsafeExample</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">()</span> </span>&#123;<br>        cnt++;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">get</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> cnt;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> threadSize = <span class="hljs-number">1000</span>;<br>    ThreadUnsafeExample example = <span class="hljs-keyword">new</span> ThreadUnsafeExample();<br>    <span class="hljs-keyword">final</span> CountDownLatch countDownLatch = <span class="hljs-keyword">new</span> CountDownLatch(threadSize);<br>    ExecutorService executorService = Executors.newCachedThreadPool();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; threadSize; i++) &#123;<br>        executorService.execute(() -&gt; &#123;<br>            example.add();<br>            countDownLatch.countDown();<br>        &#125;);<br>    &#125;<br>    countDownLatch.await();<br>    executorService.shutdown();<br>    System.out.println(example.get());<br>&#125;<br><span class="hljs-number">997</span><br></code></pre></td></tr></table></figure><h1 id="十、Java-内存模型"><a href="#十、Java-内存模型" class="headerlink" title="十、Java 内存模型"></a>十、Java 内存模型</h1><p>Java 内存模型试图屏蔽各种硬件和操作系统的内存访问差异，以实现让 Java 程序在各种平台下都能达到一致的内存访问效果。</p><h2 id="主内存与工作内存"><a href="#主内存与工作内存" class="headerlink" title="主内存与工作内存"></a>主内存与工作内存</h2><p>处理器上的寄存器的读写的速度比内存快几个数量级，为了解决这种速度矛盾，在它们之间加入了高速缓存。</p><p>加入高速缓存带来了一个新的问题：缓存一致性。如果多个缓存共享同一块主内存区域，那么多个缓存的数据可能会不一致，需要一些协议来解决这个问题。</p><p><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/942ca0d2-9d5c-45a4-89cb-5fd89b61913f.png" srcset="/img/loading.gif" alt="img"></p><p>所有的变量都存储在主内存中，每个线程还有自己的工作内存，工作内存存储在高速缓存或者寄存器中，保存了该线程使用的变量的主内存副本拷贝。</p><p>线程只能直接操作工作内存中的变量，不同线程之间的变量值传递需要通过主内存来完成。</p><p><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/15851555-5abc-497d-ad34-efed10f43a6b.png" srcset="/img/loading.gif" alt="img"></p><h2 id="内存间交互操作"><a href="#内存间交互操作" class="headerlink" title="内存间交互操作"></a>内存间交互操作</h2><p>Java 内存模型定义了 8 个操作来完成主内存和工作内存的交互操作。</p><p><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/8b7ebbad-9604-4375-84e3-f412099d170c.png" srcset="/img/loading.gif" alt="img"></p><ul><li>read：把一个变量的值从主内存传输到工作内存中</li><li>load：在 read 之后执行，把 read 得到的值放入工作内存的变量副本中</li><li>use：把工作内存中一个变量的值传递给执行引擎</li><li>assign：把一个从执行引擎接收到的值赋给工作内存的变量</li><li>store：把工作内存的一个变量的值传送到主内存中</li><li>write：在 store 之后执行，把 store 得到的值放入主内存的变量中</li><li>lock：作用于主内存的变量</li><li>unlock</li></ul><h2 id="内存模型三大特性"><a href="#内存模型三大特性" class="headerlink" title="内存模型三大特性"></a>内存模型三大特性</h2><h3 id="1-原子性"><a href="#1-原子性" class="headerlink" title="1. 原子性"></a>1. 原子性</h3><p>Java 内存模型保证了 read、load、use、assign、store、write、lock 和 unlock 操作具有原子性，例如对一个 int 类型的变量执行 assign 赋值操作，这个操作就是原子性的。但是 Java 内存模型允许虚拟机将没有被 volatile 修饰的 64 位数据（long，double）的读写操作划分为两次 32 位的操作来进行，即 load、store、read 和 write 操作可以不具备原子性。</p><p>有一个错误认识就是，int 等原子性的类型在多线程环境中不会出现线程安全问题。前面的线程不安全示例代码中，cnt 属于 int 类型变量，1000 个线程对它进行自增操作之后，得到的值为 997 而不是 1000。</p><p>为了方便讨论，将内存间的交互操作简化为 3 个：load、assign、store。</p><p>下图演示了两个线程同时对 cnt 进行操作，load、assign、store 这一系列操作整体上看不具备原子性，那么在 T1 修改 cnt 并且还没有将修改后的值写入主内存，T2 依然可以读入旧值。可以看出，这两个线程虽然执行了两次自增运算，但是主内存中 cnt 的值最后为 1 而不是 2。因此对 int 类型读写操作满足原子性只是说明 load、assign、store 这些单个操作具备原子性。</p><p><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/2797a609-68db-4d7b-8701-41ac9a34b14f.jpg" srcset="/img/loading.gif" alt="img"></p><p>AtomicInteger 能保证多个线程修改的原子性。</p><p><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/dd563037-fcaa-4bd8-83b6-b39d93a12c77.jpg" srcset="/img/loading.gif" alt="img"></p><p>使用 AtomicInteger 重写之前线程不安全的代码之后得到以下线程安全实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AtomicExample</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> AtomicInteger cnt = <span class="hljs-keyword">new</span> AtomicInteger();<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">()</span> </span>&#123;<br>        cnt.incrementAndGet();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">get</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> cnt.get();<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> threadSize = <span class="hljs-number">1000</span>;<br>    AtomicExample example = <span class="hljs-keyword">new</span> AtomicExample(); <span class="hljs-comment">// 只修改这条语句</span><br>    <span class="hljs-keyword">final</span> CountDownLatch countDownLatch = <span class="hljs-keyword">new</span> CountDownLatch(threadSize);<br>    ExecutorService executorService = Executors.newCachedThreadPool();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; threadSize; i++) &#123;<br>        executorService.execute(() -&gt; &#123;<br>            example.add();<br>            countDownLatch.countDown();<br>        &#125;);<br>    &#125;<br>    countDownLatch.await();<br>    executorService.shutdown();<br>    System.out.println(example.get());<br>&#125;<br><span class="hljs-number">1000</span><br></code></pre></td></tr></table></figure><p>除了使用原子类之外，也可以使用 synchronized 互斥锁来保证操作的原子性。它对应的内存间交互操作为：lock 和 unlock，在虚拟机实现上对应的字节码指令为 monitorenter 和 monitorexit。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AtomicSynchronizedExample</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">()</span> </span>&#123;<br>        cnt++;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">int</span> <span class="hljs-title">get</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> cnt;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> threadSize = <span class="hljs-number">1000</span>;<br>    AtomicSynchronizedExample example = <span class="hljs-keyword">new</span> AtomicSynchronizedExample();<br>    <span class="hljs-keyword">final</span> CountDownLatch countDownLatch = <span class="hljs-keyword">new</span> CountDownLatch(threadSize);<br>    ExecutorService executorService = Executors.newCachedThreadPool();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; threadSize; i++) &#123;<br>        executorService.execute(() -&gt; &#123;<br>            example.add();<br>            countDownLatch.countDown();<br>        &#125;);<br>    &#125;<br>    countDownLatch.await();<br>    executorService.shutdown();<br>    System.out.println(example.get());<br>&#125;<br><span class="hljs-number">1000</span><br></code></pre></td></tr></table></figure><h3 id="2-可见性"><a href="#2-可见性" class="headerlink" title="2. 可见性"></a>2. 可见性</h3><p>可见性指当一个线程修改了共享变量的值，其它线程能够立即得知这个修改。Java 内存模型是通过在变量修改后将新值同步回主内存，在变量读取前从主内存刷新变量值来实现可见性的。</p><p>主要有三种实现可见性的方式：</p><ul><li>volatile</li><li>synchronized，对一个变量执行 unlock 操作之前，必须把变量值同步回主内存。</li><li>final，被 final 关键字修饰的字段在构造器中一旦初始化完成，并且没有发生 this 逃逸（其它线程通过 this 引用访问到初始化了一半的对象），那么其它线程就能看见 final 字段的值。</li></ul><p>对前面的线程不安全示例中的 cnt 变量使用 volatile 修饰，不能解决线程不安全问题，因为 volatile 并不能保证操作的原子性。</p><h3 id="3-有序性"><a href="#3-有序性" class="headerlink" title="3. 有序性"></a>3. 有序性</h3><p>有序性是指：在本线程内观察，所有操作都是有序的。在一个线程观察另一个线程，所有操作都是无序的，无序是因为发生了指令重排序。在 Java 内存模型中，允许编译器和处理器对指令进行重排序，重排序过程不会影响到单线程程序的执行，却会影响到多线程并发执行的正确性。</p><p>volatile 关键字通过添加内存屏障的方式来禁止指令重排，即重排序时不能把后面的指令放到内存屏障之前。</p><p>也可以通过 synchronized 来保证有序性，它保证每个时刻只有一个线程执行同步代码，相当于是让线程顺序执行同步代码。</p><h2 id="先行发生原则"><a href="#先行发生原则" class="headerlink" title="先行发生原则"></a>先行发生原则</h2><p>上面提到了可以用 volatile 和 synchronized 来保证有序性。除此之外，JVM 还规定了先行发生原则，让一个操作无需控制就能先于另一个操作完成。</p><h3 id="1-单一线程原则"><a href="#1-单一线程原则" class="headerlink" title="1. 单一线程原则"></a>1. 单一线程原则</h3><blockquote><p>Single Thread rule</p></blockquote><p>在一个线程内，在程序前面的操作先行发生于后面的操作。</p><p><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/874b3ff7-7c5c-4e7a-b8ab-a82a3e038d20.png" srcset="/img/loading.gif" alt="img"></p><h3 id="2-管程锁定规则"><a href="#2-管程锁定规则" class="headerlink" title="2. 管程锁定规则"></a>2. 管程锁定规则</h3><blockquote><p>Monitor Lock Rule</p></blockquote><p>一个 unlock 操作先行发生于后面对同一个锁的 lock 操作。</p><p><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/8996a537-7c4a-4ec8-a3b7-7ef1798eae26.png" srcset="/img/loading.gif" alt="img"></p><h3 id="3-volatile-变量规则"><a href="#3-volatile-变量规则" class="headerlink" title="3. volatile 变量规则"></a>3. volatile 变量规则</h3><blockquote><p>Volatile Variable Rule</p></blockquote><p>对一个 volatile 变量的写操作先行发生于后面对这个变量的读操作。</p><p><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/942f33c9-8ad9-4987-836f-007de4c21de0.png" srcset="/img/loading.gif" alt="img"></p><h3 id="4-线程启动规则"><a href="#4-线程启动规则" class="headerlink" title="4. 线程启动规则"></a>4. 线程启动规则</h3><blockquote><p>Thread Start Rule</p></blockquote><p>Thread 对象的 start() 方法调用先行发生于此线程的每一个动作。</p><p><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/6270c216-7ec0-4db7-94de-0003bce37cd2.png" srcset="/img/loading.gif" alt="img"></p><h3 id="5-线程加入规则"><a href="#5-线程加入规则" class="headerlink" title="5. 线程加入规则"></a>5. 线程加入规则</h3><blockquote><p>Thread Join Rule</p></blockquote><p>Thread 对象的结束先行发生于 join() 方法返回。</p><p><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/233f8d89-31d7-413f-9c02-042f19c46ba1.png" srcset="/img/loading.gif" alt="img"></p><h3 id="6-线程中断规则"><a href="#6-线程中断规则" class="headerlink" title="6. 线程中断规则"></a>6. 线程中断规则</h3><blockquote><p>Thread Interruption Rule</p></blockquote><p>对线程 interrupt() 方法的调用先行发生于被中断线程的代码检测到中断事件的发生，可以通过 interrupted() 方法检测到是否有中断发生。</p><h3 id="7-对象终结规则"><a href="#7-对象终结规则" class="headerlink" title="7. 对象终结规则"></a>7. 对象终结规则</h3><blockquote><p>Finalizer Rule</p></blockquote><p>一个对象的初始化完成（构造函数执行结束）先行发生于它的 finalize() 方法的开始。</p><h3 id="8-传递性"><a href="#8-传递性" class="headerlink" title="8. 传递性"></a>8. 传递性</h3><blockquote><p>Transitivity</p></blockquote><p>如果操作 A 先行发生于操作 B，操作 B 先行发生于操作 C，那么操作 A 先行发生于操作 C。</p><h1 id="十一、线程安全"><a href="#十一、线程安全" class="headerlink" title="十一、线程安全"></a>十一、线程安全</h1><p>多个线程不管以何种方式访问某个类，并且在主调代码中不需要进行同步，都能表现正确的行为。</p><p>线程安全有以下几种实现方式：</p><h2 id="不可变"><a href="#不可变" class="headerlink" title="不可变"></a>不可变</h2><p>不可变（Immutable）的对象一定是线程安全的，不需要再采取任何的线程安全保障措施。只要一个不可变的对象被正确地构建出来，永远也不会看到它在多个线程之中处于不一致的状态。多线程环境下，应当尽量使对象成为不可变，来满足线程安全。</p><p>不可变的类型：</p><ul><li>final 关键字修饰的基本数据类型</li><li>String</li><li>枚举类型</li><li>Number 部分子类，如 Long 和 Double 等数值包装类型，BigInteger 和 BigDecimal 等大数据类型。但同为 Number 的原子类 AtomicInteger 和 AtomicLong 则是可变的。</li></ul><p>对于集合类型，可以使用 Collections.unmodifiableXXX() 方法来获取一个不可变的集合。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ImmutableExample</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Map&lt;String, Integer&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        Map&lt;String, Integer&gt; unmodifiableMap = Collections.unmodifiableMap(map);<br>        unmodifiableMap.put(<span class="hljs-string">"a"</span>, <span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br>Exception in thread <span class="hljs-string">"main"</span> java.lang.UnsupportedOperationException<br>    at java.util.Collections$UnmodifiableMap.put(Collections.java:<span class="hljs-number">1457</span>)<br>    at ImmutableExample.main(ImmutableExample.java:<span class="hljs-number">9</span>)<br></code></pre></td></tr></table></figure><p>Collections.unmodifiableXXX() 先对原始的集合进行拷贝，需要对集合进行修改的方法都直接抛出异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> V <span class="hljs-title">put</span><span class="hljs-params">(K key, V value)</span> </span>&#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> UnsupportedOperationException();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="互斥同步"><a href="#互斥同步" class="headerlink" title="互斥同步"></a>互斥同步</h2><p>synchronized 和 ReentrantLock。</p><h2 id="非阻塞同步"><a href="#非阻塞同步" class="headerlink" title="非阻塞同步"></a>非阻塞同步</h2><p>互斥同步最主要的问题就是线程阻塞和唤醒所带来的性能问题，因此这种同步也称为阻塞同步。</p><p>互斥同步属于一种悲观的并发策略，总是认为只要不去做正确的同步措施，那就肯定会出现问题。无论共享数据是否真的会出现竞争，它都要进行加锁（这里讨论的是概念模型，实际上虚拟机会优化掉很大一部分不必要的加锁）、用户态核心态转换、维护锁计数器和检查是否有被阻塞的线程需要唤醒等操作。</p><p>随着硬件指令集的发展，我们可以使用基于冲突检测的乐观并发策略：先进行操作，如果没有其它线程争用共享数据，那操作就成功了，否则采取补偿措施（不断地重试，直到成功为止）。这种乐观的并发策略的许多实现都不需要将线程阻塞，因此这种同步操作称为非阻塞同步。</p><h3 id="1-CAS"><a href="#1-CAS" class="headerlink" title="1. CAS"></a>1. CAS</h3><p>乐观锁需要操作和冲突检测这两个步骤具备原子性，这里就不能再使用互斥同步来保证了，只能靠硬件来完成。硬件支持的原子性操作最典型的是：比较并交换（Compare-and-Swap，CAS）。CAS 指令需要有 3 个操作数，分别是内存地址 V、旧的预期值 A 和新值 B。当执行操作时，只有当 V 的值等于 A，才将 V 的值更新为 B。</p><h3 id="2-AtomicInteger"><a href="#2-AtomicInteger" class="headerlink" title="2. AtomicInteger"></a>2. AtomicInteger</h3><p>J.U.C 包里面的整数原子类 AtomicInteger 的方法调用了 Unsafe 类的 CAS 操作。</p><p>以下代码使用了 AtomicInteger 执行了自增的操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> AtomicInteger cnt = <span class="hljs-keyword">new</span> AtomicInteger();<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">()</span> </span>&#123;<br>    cnt.incrementAndGet();<br>&#125;<br></code></pre></td></tr></table></figure><p>以下代码是 incrementAndGet() 的源码，它调用了 Unsafe 的 getAndAddInt() 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> <span class="hljs-title">incrementAndGet</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> unsafe.getAndAddInt(<span class="hljs-keyword">this</span>, valueOffset, <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>以下代码是 getAndAddInt() 源码，var1 指示对象内存地址，var2 指示该字段相对对象内存地址的偏移，var4 指示操作需要加的数值，这里为 1。通过 getIntVolatile(var1, var2) 得到旧的预期值，通过调用 compareAndSwapInt() 来进行 CAS 比较，如果该字段内存地址中的值等于 var5，那么就更新内存地址为 var1+var2 的变量为 var5+var4。</p><p>可以看到 getAndAddInt() 在一个循环中进行，发生冲突的做法是不断的进行重试。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAndAddInt</span><span class="hljs-params">(Object var1, <span class="hljs-keyword">long</span> var2, <span class="hljs-keyword">int</span> var4)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> var5;<br>    <span class="hljs-keyword">do</span> &#123;<br>        var5 = <span class="hljs-keyword">this</span>.getIntVolatile(var1, var2);<br>    &#125; <span class="hljs-keyword">while</span>(!<span class="hljs-keyword">this</span>.compareAndSwapInt(var1, var2, var5, var5 + var4));<br><br>    <span class="hljs-keyword">return</span> var5;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-ABA"><a href="#3-ABA" class="headerlink" title="3. ABA"></a>3. ABA</h3><p>如果一个变量初次读取的时候是 A 值，它的值被改成了 B，后来又被改回为 A，那 CAS 操作就会误认为它从来没有被改变过。</p><p>J.U.C 包提供了一个带有标记的原子引用类 AtomicStampedReference 来解决这个问题，它可以通过控制变量值的版本来保证 CAS 的正确性。大部分情况下 ABA 问题不会影响程序并发的正确性，如果需要解决 ABA 问题，改用传统的互斥同步可能会比原子类更高效。</p><h2 id="无同步方案"><a href="#无同步方案" class="headerlink" title="无同步方案"></a>无同步方案</h2><p>要保证线程安全，并不是一定就要进行同步。如果一个方法本来就不涉及共享数据，那它自然就无须任何同步措施去保证正确性。</p><h3 id="1-栈封闭"><a href="#1-栈封闭" class="headerlink" title="1. 栈封闭"></a>1. 栈封闭</h3><p>多个线程访问同一个方法的局部变量时，不会出现线程安全问题，因为局部变量存储在虚拟机栈中，属于线程私有的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StackClosedExample</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add100</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            cnt++;<br>        &#125;<br>        System.out.println(cnt);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    StackClosedExample example = <span class="hljs-keyword">new</span> StackClosedExample();<br>    ExecutorService executorService = Executors.newCachedThreadPool();<br>    executorService.execute(() -&gt; example.add100());<br>    executorService.execute(() -&gt; example.add100());<br>    executorService.shutdown();<br>&#125;<br><span class="hljs-number">100</span><br><span class="hljs-number">100</span><br></code></pre></td></tr></table></figure><h3 id="2-线程本地存储（Thread-Local-Storage）"><a href="#2-线程本地存储（Thread-Local-Storage）" class="headerlink" title="2. 线程本地存储（Thread Local Storage）"></a>2. 线程本地存储（Thread Local Storage）</h3><p>如果一段代码中所需要的数据必须与其他代码共享，那就看看这些共享数据的代码是否能保证在同一个线程中执行。如果能保证，我们就可以把共享数据的可见范围限制在同一个线程之内，这样，无须同步也能保证线程之间不出现数据争用的问题。</p><p>符合这种特点的应用并不少见，大部分使用消费队列的架构模式（如“生产者-消费者”模式）都会将产品的消费过程尽量在一个线程中消费完。其中最重要的一个应用实例就是经典 Web 交互模型中的“一个请求对应一个服务器线程”（Thread-per-Request）的处理方式，这种处理方式的广泛应用使得很多 Web 服务端应用都可以使用线程本地存储来解决线程安全问题。</p><p>可以使用 java.lang.ThreadLocal 类来实现线程本地存储功能。</p><p>对于以下代码，thread1 中设置 threadLocal 为 1，而 thread2 设置 threadLocal 为 2。过了一段时间之后，thread1 读取 threadLocal 依然是 1，不受 thread2 的影响。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadLocalExample</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ThreadLocal threadLocal = <span class="hljs-keyword">new</span> ThreadLocal();<br>        Thread thread1 = <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>            threadLocal.set(<span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            System.out.println(threadLocal.get());<br>            threadLocal.remove();<br>        &#125;);<br>        Thread thread2 = <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>            threadLocal.set(<span class="hljs-number">2</span>);<br>            threadLocal.remove();<br>        &#125;);<br>        thread1.start();<br>        thread2.start();<br>    &#125;<br>&#125;<br><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>为了理解 ThreadLocal，先看以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadLocalExample1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ThreadLocal threadLocal1 = <span class="hljs-keyword">new</span> ThreadLocal();<br>        ThreadLocal threadLocal2 = <span class="hljs-keyword">new</span> ThreadLocal();<br>        Thread thread1 = <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>            threadLocal1.set(<span class="hljs-number">1</span>);<br>            threadLocal2.set(<span class="hljs-number">1</span>);<br>        &#125;);<br>        Thread thread2 = <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>            threadLocal1.set(<span class="hljs-number">2</span>);<br>            threadLocal2.set(<span class="hljs-number">2</span>);<br>        &#125;);<br>        thread1.start();<br>        thread2.start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>它所对应的底层结构图为：</p><p><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/6782674c-1bfe-4879-af39-e9d722a95d39.png" srcset="/img/loading.gif" alt="img"></p><p>每个 Thread 都有一个 ThreadLocal.ThreadLocalMap 对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* ThreadLocal values pertaining to this thread. This map is maintained</span><br><span class="hljs-comment"> * by the ThreadLocal class. */</span><br>ThreadLocal.ThreadLocalMap threadLocals = <span class="hljs-keyword">null</span>;<br></code></pre></td></tr></table></figure><p>当调用一个 ThreadLocal 的 set(T value) 方法时，先得到当前线程的 ThreadLocalMap 对象，然后将 ThreadLocal-&gt;value 键值对插入到该 Map 中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">set</span><span class="hljs-params">(T value)</span> </span>&#123;<br>    Thread t = Thread.currentThread();<br>    ThreadLocalMap map = getMap(t);<br>    <span class="hljs-keyword">if</span> (map != <span class="hljs-keyword">null</span>)<br>        map.set(<span class="hljs-keyword">this</span>, value);<br>    <span class="hljs-keyword">else</span><br>        createMap(t, value);<br>&#125;<br></code></pre></td></tr></table></figure><p>get() 方法类似。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">get</span><span class="hljs-params">()</span> </span>&#123;<br>    Thread t = Thread.currentThread();<br>    ThreadLocalMap map = getMap(t);<br>    <span class="hljs-keyword">if</span> (map != <span class="hljs-keyword">null</span>) &#123;<br>        ThreadLocalMap.Entry e = map.getEntry(<span class="hljs-keyword">this</span>);<br>        <span class="hljs-keyword">if</span> (e != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-meta">@SuppressWarnings</span>(<span class="hljs-string">"unchecked"</span>)<br>            T result = (T)e.value;<br>            <span class="hljs-keyword">return</span> result;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> setInitialValue();<br>&#125;<br></code></pre></td></tr></table></figure><p>ThreadLocal 从理论上讲并不是用来解决多线程并发问题的，因为根本不存在多线程竞争。</p><p>在一些场景 (尤其是使用线程池) 下，由于 ThreadLocal.ThreadLocalMap 的底层数据结构导致 ThreadLocal 有内存泄漏的情况，应该尽可能在每次使用 ThreadLocal 后手动调用 remove()，以避免出现 ThreadLocal 经典的内存泄漏甚至是造成自身业务混乱的风险。</p><h3 id="3-可重入代码（Reentrant-Code）"><a href="#3-可重入代码（Reentrant-Code）" class="headerlink" title="3. 可重入代码（Reentrant Code）"></a>3. 可重入代码（Reentrant Code）</h3><p>这种代码也叫做纯代码（Pure Code），可以在代码执行的任何时刻中断它，转而去执行另外一段代码（包括递归调用它本身），而在控制权返回后，原来的程序不会出现任何错误。</p><p>可重入代码有一些共同的特征，例如不依赖存储在堆上的数据和公用的系统资源、用到的状态量都由参数中传入、不调用非可重入的方法等。</p><h1 id="十二、锁优化"><a href="#十二、锁优化" class="headerlink" title="十二、锁优化"></a>十二、锁优化</h1><p>这里的锁优化主要是指 JVM 对 synchronized 的优化。</p><h2 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h2><p>互斥同步进入阻塞状态的开销都很大，应该尽量避免。在许多应用中，共享数据的锁定状态只会持续很短的一段时间。自旋锁的思想是让一个线程在请求一个共享数据的锁时执行忙循环（自旋）一段时间，如果在这段时间内能获得锁，就可以避免进入阻塞状态。</p><p>自旋锁虽然能避免进入阻塞状态从而减少开销，但是它需要进行忙循环操作占用 CPU 时间，它只适用于共享数据的锁定状态很短的场景。</p><p>在 JDK 1.6 中引入了自适应的自旋锁。自适应意味着自旋的次数不再固定了，而是由前一次在同一个锁上的自旋次数及锁的拥有者的状态来决定。</p><h2 id="锁消除"><a href="#锁消除" class="headerlink" title="锁消除"></a>锁消除</h2><p>锁消除是指对于被检测出不可能存在竞争的共享数据的锁进行消除。</p><p>锁消除主要是通过逃逸分析来支持，如果堆上的共享数据不可能逃逸出去被其它线程访问到，那么就可以把它们当成私有数据对待，也就可以将它们的锁进行消除。</p><p>对于一些看起来没有加锁的代码，其实隐式的加了很多锁。例如下面的字符串拼接代码就隐式加了锁：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">concatString</span><span class="hljs-params">(String s1, String s2, String s3)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> s1 + s2 + s3;<br>&#125;<br></code></pre></td></tr></table></figure><p>String 是一个不可变的类，编译器会对 String 的拼接自动优化。在 JDK 1.5 之前，会转化为 StringBuffer 对象的连续 append() 操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">concatString</span><span class="hljs-params">(String s1, String s2, String s3)</span> </span>&#123;<br>    StringBuffer sb = <span class="hljs-keyword">new</span> StringBuffer();<br>    sb.append(s1);<br>    sb.append(s2);<br>    sb.append(s3);<br>    <span class="hljs-keyword">return</span> sb.toString();<br>&#125;<br></code></pre></td></tr></table></figure><p>每个 append() 方法中都有一个同步块。虚拟机观察变量 sb，很快就会发现它的动态作用域被限制在 concatString() 方法内部。也就是说，sb 的所有引用永远不会逃逸到 concatString() 方法之外，其他线程无法访问到它，因此可以进行消除。</p><h2 id="锁粗化"><a href="#锁粗化" class="headerlink" title="锁粗化"></a>锁粗化</h2><p>如果一系列的连续操作都对同一个对象反复加锁和解锁，频繁的加锁操作就会导致性能损耗。</p><p>上一节的示例代码中连续的 append() 方法就属于这类情况。如果虚拟机探测到由这样的一串零碎的操作都对同一个对象加锁，将会把加锁的范围扩展（粗化）到整个操作序列的外部。对于上一节的示例代码就是扩展到第一个 append() 操作之前直至最后一个 append() 操作之后，这样只需要加锁一次就可以了。</p><h2 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h2><p>JDK 1.6 引入了偏向锁和轻量级锁，从而让锁拥有了四个状态：无锁状态（unlocked）、偏向锁状态（biasble）、轻量级锁状态（lightweight locked）和重量级锁状态（inflated）。</p><p>以下是 HotSpot 虚拟机对象头的内存布局，这些数据被称为 Mark Word。其中 tag bits 对应了五个状态，这些状态在右侧的 state 表格中给出。除了 marked for gc 状态，其它四个状态已经在前面介绍过了。</p><p><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/bb6a49be-00f2-4f27-a0ce-4ed764bc605c.png" srcset="/img/loading.gif" alt="img"></p><p>下图左侧是一个线程的虚拟机栈，其中有一部分称为 Lock Record 的区域，这是在轻量级锁运行过程创建的，用于存放锁对象的 Mark Word。而右侧就是一个锁对象，包含了 Mark Word 和其它信息。</p><p><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/051e436c-0e46-4c59-8f67-52d89d656182.png" srcset="/img/loading.gif" alt="img"></p><p>轻量级锁是相对于传统的重量级锁而言，它使用 CAS 操作来避免重量级锁使用互斥量的开销。对于绝大部分的锁，在整个同步周期内都是不存在竞争的，因此也就不需要都使用互斥量进行同步，可以先采用 CAS 操作进行同步，如果 CAS 失败了再改用互斥量进行同步。</p><p>当尝试获取一个锁对象时，如果锁对象标记为 0 01，说明锁对象的锁未锁定（unlocked）状态。此时虚拟机在当前线程的虚拟机栈中创建 Lock Record，然后使用 CAS 操作将对象的 Mark Word 更新为 Lock Record 指针。如果 CAS 操作成功了，那么线程就获取了该对象上的锁，并且对象的 Mark Word 的锁标记变为 00，表示该对象处于轻量级锁状态。</p><p><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/baaa681f-7c52-4198-a5ae-303b9386cf47.png" srcset="/img/loading.gif" alt="img"></p><p>如果 CAS 操作失败了，虚拟机首先会检查对象的 Mark Word 是否指向当前线程的虚拟机栈，如果是的话说明当前线程已经拥有了这个锁对象，那就可以直接进入同步块继续执行，否则说明这个锁对象已经被其他线程线程抢占了。如果有两条以上的线程争用同一个锁，那轻量级锁就不再有效，要膨胀为重量级锁。</p><h2 id="偏向锁-https-cyc2018-github-io-CS-Notes-notes-Java-并发-id-偏向锁"><a href="#偏向锁-https-cyc2018-github-io-CS-Notes-notes-Java-并发-id-偏向锁" class="headerlink" title="[偏向锁](https://cyc2018.github.io/CS-Notes/#/notes/Java 并发?id=偏向锁)"></a>[偏向锁](<a href="https://cyc2018.github.io/CS-Notes/#/notes/Java" target="_blank" rel="noopener">https://cyc2018.github.io/CS-Notes/#/notes/Java</a> 并发?id=偏向锁)</h2><p>偏向锁的思想是偏向于让第一个获取锁对象的线程，这个线程在之后获取该锁就不再需要进行同步操作，甚至连 CAS 操作也不再需要。</p><p>当锁对象第一次被线程获得的时候，进入偏向状态，标记为 1 01。同时使用 CAS 操作将线程 ID 记录到 Mark Word 中，如果 CAS 操作成功，这个线程以后每次进入这个锁相关的同步块就不需要再进行任何同步操作。</p><p>当有另外一个线程去尝试获取这个锁对象时，偏向状态就宣告结束，此时撤销偏向（Revoke Bias）后恢复到未锁定状态或者轻量级锁状态。</p><p><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/390c913b-5f31-444f-bbdb-2b88b688e7ce.jpg" srcset="/img/loading.gif" alt="img"></p><h1 id="十三、多线程开发良好的实践"><a href="#十三、多线程开发良好的实践" class="headerlink" title="十三、多线程开发良好的实践"></a>十三、多线程开发良好的实践</h1><ul><li>给线程起个有意义的名字，这样可以方便找 Bug。</li><li>缩小同步范围，从而减少锁争用。例如对于 synchronized，应该尽量使用同步块而不是同步方法。</li><li>多用同步工具少用 wait() 和 notify()。首先，CountDownLatch, CyclicBarrier, Semaphore 和 Exchanger 这些同步类简化了编码操作，而用 wait() 和 notify() 很难实现复杂控制流；其次，这些同步类是由最好的企业编写和维护，在后续的 JDK 中还会不断优化和完善。</li><li>使用 BlockingQueue 实现生产者消费者问题。</li><li>多用并发集合少用同步集合，例如应该使用 ConcurrentHashMap 而不是 Hashtable。</li><li>使用本地变量和不可变类来保证线程安全。</li><li>使用线程池而不是直接创建线程，这是因为创建线程代价很高，线程池可以有效地利用有限的线程来启动任务。</li></ul><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li>BruceEckel. Java 编程思想: 第 4 版 [M]. 机械工业出版社, 2007.</li><li>周志明. 深入理解 Java 虚拟机 [M]. 机械工业出版社, 2011.</li><li><a href="https://docs.oracle.com/javase/specs/jvms/se6/html/Threads.doc.html" target="_blank" rel="noopener">Threads and Locks</a></li><li><a href="http://ifeve.com/thread-signaling/#missed_signal" target="_blank" rel="noopener">线程通信</a></li><li><a href="http://www.importnew.com/12773.html" target="_blank" rel="noopener">Java 线程面试题 Top 50</a></li><li><a href="http://tutorials.jenkov.com/java-util-concurrent/blockingqueue.html" target="_blank" rel="noopener">BlockingQueue</a></li><li><a href="https://stackoverflow.com/questions/11265289/thread-state-java" target="_blank" rel="noopener">thread state java</a></li><li><a href="http://wiki.expertiza.ncsu.edu/index.php/CSC_456_Spring_2012/ch7_MN" target="_blank" rel="noopener">CSC 456 Spring 2012/ch7 MN</a></li><li><a href="https://www.logicbig.com/tutorials/core-java-tutorial/java-multi-threading/happens-before.html" target="_blank" rel="noopener">Java - Understanding Happens-before relationship</a></li><li><a href="https://www.slideshare.net/novathinker/6-thread-synchronization" target="_blank" rel="noopener">6장 Thread Synchronization</a></li><li><a href="https://stackoverflow.com/questions/1202444/how-is-javas-threadlocal-implemented-under-the-hood/15653015" target="_blank" rel="noopener">How is Java’s ThreadLocal implemented under the hood?</a></li><li><a href="https://sites.google.com/site/webdevelopart/21-compile/06-java/javase/concurrent?tmpl=%2Fsystem%2Fapp%2Ftemplates%2Fprint%2F&showPrintDialog=1" target="_blank" rel="noopener">Concurrent</a></li><li><a href="http://www.javacreed.com/java-fork-join-example/" target="_blank" rel="noopener">JAVA FORK JOIN EXAMPLE</a></li><li><a href="http://ifeve.com/talk-concurrency-forkjoin/" target="_blank" rel="noopener">聊聊并发（八）——Fork/Join 框架介绍</a></li><li><a href="http://www.oracle.com/technetwork/java/javase/tech/biasedlocking-oopsla2006-preso-150106.pdf" target="_blank" rel="noopener">Eliminating SynchronizationRelated Atomic Operations with Biased Locking and Bulk Rebiasing</a></li></ul><p><strong>欢迎关注微信公众号​：</strong></p><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g7d3llw1nkj30b40b4wee.jpg" srcset="/img/loading.gif" alt="欢迎关注公众号" style="width: 100px" />]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Thread</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring Cloud Feign设计原理</title>
    <link href="/2019/12/24/Spring-Cloud-Feign%E8%AE%BE%E8%AE%A1%E5%8E%9F%E7%90%86/"/>
    <url>/2019/12/24/Spring-Cloud-Feign%E8%AE%BE%E8%AE%A1%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是Feign？"><a href="#什么是Feign？" class="headerlink" title="什么是Feign？"></a>什么是Feign？</h2><p>Feign 的英文表意为“假装，伪装，变形”， 是一个http请求调用的轻量级框架，可以以Java接口注解的方式调用Http请求，而不用像Java中通过封装HTTP请求报文的方式直接调用。Feign通过处理注解，将请求模板化，当实际调用的时候，传入参数，根据参数再应用到请求上，进而转化成真正的请求，这种请求相对而言比较直观。<br>Feign被广泛应用在Spring Cloud 的解决方案中，是学习基于Spring Cloud 微服务架构不可或缺的重要组件。<br>开源项目地址：<br><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2FOpenFeign%2Ffeign" target="_blank" rel="noopener">https://github.com/OpenFeign/feign</a></p><h2 id="Feign解决了什么问题？"><a href="#Feign解决了什么问题？" class="headerlink" title="Feign解决了什么问题？"></a>Feign解决了什么问题？</h2><p><strong>封装了Http调用流程，更适合面向接口化的变成习惯</strong><br>在服务调用的场景中，我们经常调用基于Http协议的服务，而我们经常使用到的框架可能有HttpURLConnection、Apache HttpComponnets、OkHttp3 、Netty等等，这些框架在基于自身的专注点提供了自身特性。而从角色划分上来看，他们的职能是一致的提供Http调用服务。具体流程如下：</p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1ga7scfseulj30p10gdq3t.jpg" srcset="/img/loading.gif" alt="img"></p><h2 id="Feign是如何设计的？"><a href="#Feign是如何设计的？" class="headerlink" title="Feign是如何设计的？"></a>Feign是如何设计的？</h2><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1ga7sck4dinj30o70ufwgj.jpg" srcset="/img/loading.gif" alt="img"></p><h4 id="PHASE-1-基于面向接口的动态代理方式生成实现类"><a href="#PHASE-1-基于面向接口的动态代理方式生成实现类" class="headerlink" title="PHASE 1. 基于面向接口的动态代理方式生成实现类"></a>PHASE 1. 基于面向接口的动态代理方式生成实现类</h4><p>在使用feign 时，会定义对应的接口类，在接口类上使用Http相关的注解，标识HTTP请求参数信息,如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">GitHub</span> </span>&#123;<br>  <span class="hljs-meta">@RequestLine</span>(<span class="hljs-string">"GET /repos/&#123;owner&#125;/&#123;repo&#125;/contributors"</span>)<br>  <span class="hljs-function">List&lt;Contributor&gt; <span class="hljs-title">contributors</span><span class="hljs-params">(@Param(<span class="hljs-string">"owner"</span>)</span> String owner, @<span class="hljs-title">Param</span><span class="hljs-params">(<span class="hljs-string">"repo"</span>)</span> String repo)</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Contributor</span> </span>&#123;<br>  String login;<br>  <span class="hljs-keyword">int</span> contributions;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyApp</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String... args)</span> </span>&#123;<br>    GitHub github = Feign.builder()<br>                         .decoder(<span class="hljs-keyword">new</span> GsonDecoder())<br>                         .target(GitHub.class, "https://api.github.com");<br>  <br>    <span class="hljs-comment">// Fetch and print a list of the contributors to this library.</span><br>    List&lt;Contributor&gt; contributors = github.contributors(<span class="hljs-string">"OpenFeign"</span>, <span class="hljs-string">"feign"</span>);<br>    <span class="hljs-keyword">for</span> (Contributor contributor : contributors) &#123;<br>      System.out.println(contributor.login + <span class="hljs-string">" ("</span> + contributor.contributions + <span class="hljs-string">")"</span>);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在Feign 底层，通过基于面向接口的动态代理方式生成实现类，将请求调用委托到动态代理实现类，基本原理如下所示：</p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1ga7sct0h8dj30ln0a3aar.jpg" srcset="/img/loading.gif" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReflectiveFeign</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Feign</span></span>&#123;<br> <span class="hljs-comment">///省略部分代码</span><br> <span class="hljs-meta">@Override</span><br> <span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-function">T <span class="hljs-title">newInstance</span><span class="hljs-params">(Target&lt;T&gt; target)</span> </span>&#123;<br>   <span class="hljs-comment">//根据接口类和Contract协议解析方式，解析接口类上的方法和注解，转换成内部的MethodHandler处理方式</span><br>   Map&lt;String, MethodHandler&gt; nameToHandler = targetToHandlersByName.apply(target);<br>   Map&lt;Method, MethodHandler&gt; methodToHandler = <span class="hljs-keyword">new</span> LinkedHashMap&lt;Method, MethodHandler&gt;();<br>   List&lt;DefaultMethodHandler&gt; defaultMethodHandlers = <span class="hljs-keyword">new</span> LinkedList&lt;DefaultMethodHandler&gt;();<br><br>   <span class="hljs-keyword">for</span> (Method method : target.type().getMethods()) &#123;<br>     <span class="hljs-keyword">if</span> (method.getDeclaringClass() == Object<span class="hljs-class">.<span class="hljs-keyword">class</span>) </span>&#123;<br>       <span class="hljs-keyword">continue</span>;<br>     &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(Util.isDefault(method)) &#123;<br>       DefaultMethodHandler handler = <span class="hljs-keyword">new</span> DefaultMethodHandler(method);<br>       defaultMethodHandlers.add(handler);<br>       methodToHandler.put(method, handler);<br>     &#125; <span class="hljs-keyword">else</span> &#123;<br>       methodToHandler.put(method, nameToHandler.get(Feign.configKey(target.type(), method)));<br>     &#125;<br>   &#125;<br>   InvocationHandler handler = factory.create(target, methodToHandler);<br>   <span class="hljs-comment">// 基于Proxy.newProxyInstance 为接口类创建动态实现，将所有的请求转换给InvocationHandler 处理。</span><br>   T proxy = (T) Proxy.newProxyInstance(target.type().getClassLoader(), <span class="hljs-keyword">new</span> Class&lt;?&gt;[]&#123;target.type()&#125;, handler);<br><br>   <span class="hljs-keyword">for</span>(DefaultMethodHandler defaultMethodHandler : defaultMethodHandlers) &#123;<br>     defaultMethodHandler.bindTo(proxy);<br>   &#125;<br>   <span class="hljs-keyword">return</span> proxy;<br> &#125;<br> <span class="hljs-comment">//省略部分代码</span><br></code></pre></td></tr></table></figure><h4 id="PHASE-2-根据Contract协议规则，解析接口类的注解信息，解析成内部表现："><a href="#PHASE-2-根据Contract协议规则，解析接口类的注解信息，解析成内部表现：" class="headerlink" title="PHASE 2. 根据Contract协议规则，解析接口类的注解信息，解析成内部表现："></a>PHASE 2. 根据Contract协议规则，解析接口类的注解信息，解析成内部表现：</h4><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1ga7sczwxdyj30pf0didgq.jpg" srcset="/img/loading.gif" alt="img"></p><p>Feign 定义了转换协议，定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Defines what annotations and values are valid on interfaces.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Contract</span> </span>&#123;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Called to parse the methods in the class that are linked to HTTP requests.</span><br><span class="hljs-comment">   * 传入接口定义，解析成相应的方法内部元数据表示</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> targetType &#123;<span class="hljs-doctag">@link</span> feign.Target#type() type&#125; of the Feign interface.</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> break this and correct spelling at some point</span><br>  <span class="hljs-function">List&lt;MethodMetadata&gt; <span class="hljs-title">parseAndValidatateMetadata</span><span class="hljs-params">(Class&lt;?&gt; targetType)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="默认Contract-实现"><a href="#默认Contract-实现" class="headerlink" title="默认Contract 实现"></a>默认Contract 实现</h5><p>Feign 默认有一套自己的协议规范，规定了一些注解，可以映射成对应的Http请求，如官方的一个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">GitHub</span> </span>&#123;<br>  <br>  <span class="hljs-meta">@RequestLine</span>(<span class="hljs-string">"GET /repos/&#123;owner&#125;/&#123;repo&#125;/contributors"</span>)<br>  <span class="hljs-function">List&lt;Contributor&gt; <span class="hljs-title">getContributors</span><span class="hljs-params">(@Param(<span class="hljs-string">"owner"</span>)</span> String owner, @<span class="hljs-title">Param</span><span class="hljs-params">(<span class="hljs-string">"repo"</span>)</span> String repository)</span>;<br>  <br>  <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Contributor</span> </span>&#123;<br>    String login;<br>    <span class="hljs-keyword">int</span> contributions;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述的例子中，尝试调用GitHub.getContributors(“foo”,”myrepo”)的的时候，会转换成如下的HTTP请求：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs http">GET /repos/foo/myrepo/contributors<br>HOST XXXX.XXX.XXX<br></code></pre></td></tr></table></figure><p>Feign 默认的协议规范</p><table><thead><tr><th>注解</th><th>接口Target</th><th>使用说明</th></tr></thead><tbody><tr><td><code>@RequestLine</code></td><td>方法上</td><td>定义HttpMethod 和 UriTemplate. UriTemplate 中使用<code>{}</code> 包裹的表达式，可以通过在方法参数上使用@Param 自动注入</td></tr><tr><td><code>@Param</code></td><td>方法参数</td><td>定义模板变量，模板变量的值可以使用名称的方式使用模板注入解析</td></tr><tr><td><code>@Headers</code></td><td>类上或者方法上</td><td>定义头部模板变量，使用@Param 注解提供参数值的注入。如果该注解添加在接口类上，则所有的请求都会携带对应的Header信息；如果在方法上，则只会添加到对应的方法请求上</td></tr><tr><td><code>@QueryMap</code></td><td>方法上</td><td>定义一个键值对或者 pojo，参数值将会被转换成URL上的 query 字符串上</td></tr><tr><td><code>@HeaderMap</code></td><td>方法上</td><td>定义一个HeaderMap, 与 UrlTemplate 和HeaderTemplate 类型，可以使用@Param 注解提供参数值</td></tr></tbody></table><p>具体FeignContract 是如何解析的，不在本文的介绍范围内，详情请参考代码：<br><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2FOpenFeign%2Ffeign%2Fblob%2Fmaster%2Fcore%2Fsrc%2Fmain%2Fjava%2Ffeign%2FContract.java" target="_blank" rel="noopener">https://github.com/OpenFeign/feign/blob/master/core/src/main/java/feign/Contract.java</a></p><h5 id="基于Spring-MVC的协议规范SpringMvcContract"><a href="#基于Spring-MVC的协议规范SpringMvcContract" class="headerlink" title="基于Spring MVC的协议规范SpringMvcContract:"></a>基于Spring MVC的协议规范SpringMvcContract:</h5><p>当前Spring Cloud 微服务解决方案中，为了降低学习成本，采用了Spring MVC的部分注解来完成 请求协议解析，也就是说 ，写客户端请求接口和像写服务端代码一样：客户端和服务端可以通过SDK的方式进行约定，客户端只需要引入服务端发布的SDK API，就可以使用面向接口的编码方式对接服务：</p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1ga7sd3ug9pj30hv0bpmxp.jpg" srcset="/img/loading.gif" alt="img"></p><blockquote><p>我们团队内部就是按照这种思路，结合Spring Boot Starter 的特性，定义了服务端starter,<br>服务消费者在使用的时候，只需要引入Starter，就可以调用服务。这个比较适合平台无关性，接口抽象出来的好处就是可以根据服务调用实现方式自有切换：</p><ol><li>可以基于简单的Http服务调用；</li><li>可以基于Spring Cloud 微服务架构调用；</li><li>可以基于Dubbo SOA服务治理</li></ol><p>这种模式比较适合在SaSS混合软件服务的模式下自有切换，根据客户的硬件能力选择合适的方式部署，也可以基于自身的服务集群部署微服务</p></blockquote><p>至于Spring Cloud 是如何实现 协议解析的，可参考代码：<br><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fspring-cloud%2Fspring-cloud-openfeign%2Fblob%2Fmaster%2Fspring-cloud-openfeign-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcloud%2Fopenfeign%2Fsupport%2FSpringMvcContract.java" target="_blank" rel="noopener">https://github.com/spring-cloud/spring-cloud-openfeign/blob/master/spring-cloud-openfeign-core/src/main/java/org/springframework/cloud/openfeign/support/SpringMvcContract.java</a></p><p>当然，目前的Spring MVC的注解并不是可以完全使用的，有一些注解并不支持,如<code>@GetMapping</code>,<code>@PutMapping</code> 等，仅支持使用<code>@RequestMapping</code> 等，另外注解继承性方面也有些问题；具体限制细节，每个版本能会有些出入，可以参考上述的代码实现，比较简单。</p><blockquote><p>Spring Cloud 没有基于Spring MVC 全部注解来做Feign 客户端注解协议解析，个人认为这个是一个不小的坑。在刚入手Spring Cloud 的时候，就碰到这个问题。后来是深入代码才解决的…. 这个应该有人写了增强类来处理，暂且不表，先MARK一下，是一个开源代码练手的好机会。</p></blockquote><h5 id="PHASE-3-基于-RequestBean，动态生成Request"><a href="#PHASE-3-基于-RequestBean，动态生成Request" class="headerlink" title="PHASE 3. 基于 RequestBean，动态生成Request"></a>PHASE 3. 基于 RequestBean，动态生成Request</h5><p>根据传入的Bean对象和注解信息，从中提取出相应的值，来构造Http Request 对象：</p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1ga7sd6wfyrj30r60bb0tf.jpg" srcset="/img/loading.gif" alt="img"></p><h5 id="PHASE-4-使用Encoder-将Bean转换成-Http报文正文（消息解析和转码逻辑）"><a href="#PHASE-4-使用Encoder-将Bean转换成-Http报文正文（消息解析和转码逻辑）" class="headerlink" title="PHASE 4. 使用Encoder 将Bean转换成 Http报文正文（消息解析和转码逻辑）"></a>PHASE 4. 使用Encoder 将Bean转换成 Http报文正文（消息解析和转码逻辑）</h5><p>Feign 最终会将请求转换成Http 消息发送出去，传入的请求对象最终会解析成消息体，如下所示：</p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1ga7sd8dfm6j30jz0i574y.jpg" srcset="/img/loading.gif" alt="img"></p><p>在接口定义上Feign做的比较简单，抽象出了Encoder 和decoder 接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Encoder</span> </span>&#123;<br>  <span class="hljs-comment">/** Type literal for &#123;<span class="hljs-doctag">@code</span> Map&lt;String, ?&gt;&#125;, indicating the object to encode is a form. */</span><br>  Type MAP_STRING_WILDCARD = Util.MAP_STRING_WILDCARD;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Converts objects to an appropriate representation in the template.</span><br><span class="hljs-comment">   *  将实体对象转换成Http请求的消息正文中</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> object   what to encode as the request body.</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> bodyType the type the object should be encoded as. &#123;<span class="hljs-doctag">@link</span> #MAP_STRING_WILDCARD&#125;</span><br><span class="hljs-comment">   *                 indicates form encoding.</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> template the request template to populate.</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@throws</span> EncodeException when encoding failed due to a checked exception.</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">encode</span><span class="hljs-params">(Object object, Type bodyType, RequestTemplate template)</span> <span class="hljs-keyword">throws</span> EncodeException</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Default implementation of &#123;<span class="hljs-doctag">@code</span> Encoder&#125;.</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Default</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Encoder</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">encode</span><span class="hljs-params">(Object object, Type bodyType, RequestTemplate template)</span> </span>&#123;<br>      <span class="hljs-keyword">if</span> (bodyType == String<span class="hljs-class">.<span class="hljs-keyword">class</span>) </span>&#123;<br>        template.body(object.toString());<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (bodyType == <span class="hljs-keyword">byte</span>[]<span class="hljs-class">.<span class="hljs-keyword">class</span>) </span>&#123;<br>        template.body((<span class="hljs-keyword">byte</span>[]) object, <span class="hljs-keyword">null</span>);<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (object != <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> EncodeException(<br>            format(<span class="hljs-string">"%s is not a type supported by this encoder."</span>, object.getClass()));<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Decoder</span> </span>&#123;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Decodes an http response into an object corresponding to its &#123;<span class="hljs-doctag">@link</span></span><br><span class="hljs-comment">   * java.lang.reflect.Method#getGenericReturnType() generic return type&#125;. If you need to wrap</span><br><span class="hljs-comment">   * exceptions, please do so via &#123;<span class="hljs-doctag">@link</span> DecodeException&#125;.</span><br><span class="hljs-comment">   *  从Response 中提取Http消息正文，通过接口类声明的返回类型，消息自动装配</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> response the response to decode </span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> type     &#123;<span class="hljs-doctag">@link</span> java.lang.reflect.Method#getGenericReturnType() generic return type&#125; of</span><br><span class="hljs-comment">   *                 the method corresponding to this &#123;<span class="hljs-doctag">@code</span> response&#125;.</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> instance of &#123;<span class="hljs-doctag">@code</span> type&#125;</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@throws</span> IOException     will be propagated safely to the caller.</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@throws</span> DecodeException when decoding failed due to a checked exception besides IOException.</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@throws</span> FeignException  when decoding succeeds, but conveys the operation failed.</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function">Object <span class="hljs-title">decode</span><span class="hljs-params">(Response response, Type type)</span> <span class="hljs-keyword">throws</span> IOException, DecodeException, FeignException</span>;<br><br>  <span class="hljs-comment">/** Default implementation of &#123;<span class="hljs-doctag">@code</span> Decoder&#125;. */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Default</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StringDecoder</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">decode</span><span class="hljs-params">(Response response, Type type)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>      <span class="hljs-keyword">if</span> (response.status() == <span class="hljs-number">404</span>) <span class="hljs-keyword">return</span> Util.emptyValueOf(type);<br>      <span class="hljs-keyword">if</span> (response.body() == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">byte</span>[]<span class="hljs-class">.<span class="hljs-keyword">class</span>.<span class="hljs-title">equals</span>(<span class="hljs-title">type</span>)) </span>&#123;<br>        <span class="hljs-keyword">return</span> Util.toByteArray(response.body().asInputStream());<br>      &#125;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.decode(response, type);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>目前Feign 有以下实现：</p><table><thead><tr><th align="left">Encoder/ Decoder 实现</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">JacksonEncoder，JacksonDecoder</td><td align="left">基于 Jackson 格式的持久化转换协议</td></tr><tr><td align="left">GsonEncoder，GsonDecoder</td><td align="left">基于Google GSON 格式的持久化转换协议</td></tr><tr><td align="left">SaxEncoder，SaxDecoder</td><td align="left">基于XML 格式的Sax 库持久化转换协议</td></tr><tr><td align="left">JAXBEncoder，JAXBDecoder</td><td align="left">基于XML 格式的JAXB 库持久化转换协议</td></tr><tr><td align="left">ResponseEntityEncoder，ResponseEntityDecoder</td><td align="left">Spring MVC 基于 ResponseEntity&lt; T &gt; 返回格式的转换协议</td></tr><tr><td align="left">SpringEncoder，SpringDecoder</td><td align="left">基于Spring MVC HttpMessageConverters 一套机制实现的转换协议 ,应用于Spring Cloud 体系中</td></tr></tbody></table><h5 id="PHASE-5-拦截器负责对请求和返回进行装饰处理"><a href="#PHASE-5-拦截器负责对请求和返回进行装饰处理" class="headerlink" title="PHASE 5. 拦截器负责对请求和返回进行装饰处理"></a>PHASE 5. 拦截器负责对请求和返回进行装饰处理</h5><p>在请求转换的过程中，Feign 抽象出来了拦截器接口，用于用户自定义对请求的操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">RequestInterceptor</span> </span>&#123;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 可以在构造RequestTemplate 请求时，增加或者修改Header, Method, Body 等信息</span><br><span class="hljs-comment">   * Called for every request. Add data using methods on the supplied &#123;<span class="hljs-doctag">@link</span> RequestTemplate&#125;.</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">apply</span><span class="hljs-params">(RequestTemplate template)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>比如，如果希望Http消息传递过程中被压缩，可以定义一个请求拦截器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FeignAcceptGzipEncodingInterceptor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseRequestInterceptor</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Creates new instance of &#123;<span class="hljs-doctag">@link</span> FeignAcceptGzipEncodingInterceptor&#125;.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> properties the encoding properties</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-title">FeignAcceptGzipEncodingInterceptor</span><span class="hljs-params">(FeignClientEncodingProperties properties)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(properties);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@inheritDoc</span>&#125;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">apply</span><span class="hljs-params">(RequestTemplate template)</span> </span>&#123;<br>        <span class="hljs-comment">//  在Header 头部添加相应的数据信息</span><br>        addHeader(template, HttpEncoding.ACCEPT_ENCODING_HEADER, HttpEncoding.GZIP_ENCODING,<br>                HttpEncoding.DEFLATE_ENCODING);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="PHASE-6-日志记录"><a href="#PHASE-6-日志记录" class="headerlink" title="PHASE 6. 日志记录"></a>PHASE 6. 日志记录</h5><p>在发送和接收请求的时候，Feign定义了统一的日志门面来输出日志信息 , 并且将日志的输出定义了四个等级：</p><table><thead><tr><th align="left">级别</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">NONE</td><td align="left">不做任何记录</td></tr><tr><td align="left">BASIC</td><td align="left">只记录输出Http 方法名称、请求URL、返回状态码和执行时间</td></tr><tr><td align="left">HEADERS</td><td align="left">记录输出Http 方法名称、请求URL、返回状态码和执行时间 和 Header 信息</td></tr><tr><td align="left">FULL</td><td align="left">记录Request 和Response的Header，Body和一些请求元数据</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Logger</span> </span>&#123;<br><br>  <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">methodTag</span><span class="hljs-params">(String configKey)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> StringBuilder().append(<span class="hljs-string">'['</span>).append(configKey.substring(<span class="hljs-number">0</span>, configKey.indexOf(<span class="hljs-string">'('</span>)))<br>        .append(<span class="hljs-string">"] "</span>).toString();<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Override to log requests and responses using your own implementation. Messages will be http</span><br><span class="hljs-comment">   * request and response text.</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> configKey value of &#123;<span class="hljs-doctag">@link</span> Feign#configKey(Class, java.lang.reflect.Method)&#125;</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> format    &#123;<span class="hljs-doctag">@link</span> java.util.Formatter format string&#125;</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> args      arguments applied to &#123;<span class="hljs-doctag">@code</span> format&#125;</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">log</span><span class="hljs-params">(String configKey, String format, Object... args)</span></span>;<br><br>  <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">logRequest</span><span class="hljs-params">(String configKey, Level logLevel, Request request)</span> </span>&#123;<br>    log(configKey, <span class="hljs-string">"---&gt; %s %s HTTP/1.1"</span>, request.method(), request.url());<br>    <span class="hljs-keyword">if</span> (logLevel.ordinal() &gt;= Level.HEADERS.ordinal()) &#123;<br><br>      <span class="hljs-keyword">for</span> (String field : request.headers().keySet()) &#123;<br>        <span class="hljs-keyword">for</span> (String value : valuesOrEmpty(request.headers(), field)) &#123;<br>          log(configKey, <span class="hljs-string">"%s: %s"</span>, field, value);<br>        &#125;<br>      &#125;<br><br>      <span class="hljs-keyword">int</span> bodyLength = <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">if</span> (request.body() != <span class="hljs-keyword">null</span>) &#123;<br>        bodyLength = request.body().length;<br>        <span class="hljs-keyword">if</span> (logLevel.ordinal() &gt;= Level.FULL.ordinal()) &#123;<br>          String<br>              bodyText =<br>              request.charset() != <span class="hljs-keyword">null</span> ? <span class="hljs-keyword">new</span> String(request.body(), request.charset()) : <span class="hljs-keyword">null</span>;<br>          log(configKey, <span class="hljs-string">""</span>); <span class="hljs-comment">// CRLF</span><br>          log(configKey, <span class="hljs-string">"%s"</span>, bodyText != <span class="hljs-keyword">null</span> ? bodyText : <span class="hljs-string">"Binary data"</span>);<br>        &#125;<br>      &#125;<br>      log(configKey, <span class="hljs-string">"---&gt; END HTTP (%s-byte body)"</span>, bodyLength);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">logRetry</span><span class="hljs-params">(String configKey, Level logLevel)</span> </span>&#123;<br>    log(configKey, <span class="hljs-string">"---&gt; RETRYING"</span>);<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">protected</span> Response <span class="hljs-title">logAndRebufferResponse</span><span class="hljs-params">(String configKey, Level logLevel, Response response,</span></span><br><span class="hljs-function"><span class="hljs-params">                                            <span class="hljs-keyword">long</span> elapsedTime)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>    String reason = response.reason() != <span class="hljs-keyword">null</span> &amp;&amp; logLevel.compareTo(Level.NONE) &gt; <span class="hljs-number">0</span> ?<br>        <span class="hljs-string">" "</span> + response.reason() : <span class="hljs-string">""</span>;<br>    <span class="hljs-keyword">int</span> status = response.status();<br>    log(configKey, <span class="hljs-string">"&lt;--- HTTP/1.1 %s%s (%sms)"</span>, status, reason, elapsedTime);<br>    <span class="hljs-keyword">if</span> (logLevel.ordinal() &gt;= Level.HEADERS.ordinal()) &#123;<br><br>      <span class="hljs-keyword">for</span> (String field : response.headers().keySet()) &#123;<br>        <span class="hljs-keyword">for</span> (String value : valuesOrEmpty(response.headers(), field)) &#123;<br>          log(configKey, <span class="hljs-string">"%s: %s"</span>, field, value);<br>        &#125;<br>      &#125;<br><br>      <span class="hljs-keyword">int</span> bodyLength = <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">if</span> (response.body() != <span class="hljs-keyword">null</span> &amp;&amp; !(status == <span class="hljs-number">204</span> || status == <span class="hljs-number">205</span>)) &#123;<br>        <span class="hljs-comment">// HTTP 204 No Content "...response MUST NOT include a message-body"</span><br>        <span class="hljs-comment">// HTTP 205 Reset Content "...response MUST NOT include an entity"</span><br>        <span class="hljs-keyword">if</span> (logLevel.ordinal() &gt;= Level.FULL.ordinal()) &#123;<br>          log(configKey, <span class="hljs-string">""</span>); <span class="hljs-comment">// CRLF</span><br>        &#125;<br>        <span class="hljs-keyword">byte</span>[] bodyData = Util.toByteArray(response.body().asInputStream());<br>        bodyLength = bodyData.length;<br>        <span class="hljs-keyword">if</span> (logLevel.ordinal() &gt;= Level.FULL.ordinal() &amp;&amp; bodyLength &gt; <span class="hljs-number">0</span>) &#123;<br>          log(configKey, <span class="hljs-string">"%s"</span>, decodeOrDefault(bodyData, UTF_8, <span class="hljs-string">"Binary data"</span>));<br>        &#125;<br>        log(configKey, <span class="hljs-string">"&lt;--- END HTTP (%s-byte body)"</span>, bodyLength);<br>        <span class="hljs-keyword">return</span> response.toBuilder().body(bodyData).build();<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        log(configKey, <span class="hljs-string">"&lt;--- END HTTP (%s-byte body)"</span>, bodyLength);<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> response;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">protected</span> IOException <span class="hljs-title">logIOException</span><span class="hljs-params">(String configKey, Level logLevel, IOException ioe, <span class="hljs-keyword">long</span> elapsedTime)</span> </span>&#123;<br>    log(configKey, <span class="hljs-string">"&lt;--- ERROR %s: %s (%sms)"</span>, ioe.getClass().getSimpleName(), ioe.getMessage(),<br>        elapsedTime);<br>    <span class="hljs-keyword">if</span> (logLevel.ordinal() &gt;= Level.FULL.ordinal()) &#123;<br>      StringWriter sw = <span class="hljs-keyword">new</span> StringWriter();<br>      ioe.printStackTrace(<span class="hljs-keyword">new</span> PrintWriter(sw));<br>      log(configKey, sw.toString());<br>      log(configKey, <span class="hljs-string">"&lt;--- END ERROR"</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> ioe;<br>  &#125;<br></code></pre></td></tr></table></figure><h5 id="PHASE-7-基于重试器发送HTTP请求"><a href="#PHASE-7-基于重试器发送HTTP请求" class="headerlink" title="PHASE 7 . 基于重试器发送HTTP请求"></a>PHASE 7 . 基于重试器发送HTTP请求</h5><p>Feign 内置了一个重试器，当HTTP请求出现IO异常时，Feign会有一个最大尝试次数发送请求，以下是Feign核心<br>代码逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SynchronousMethodHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">MethodHandler</span> </span>&#123;<br><br>  <span class="hljs-comment">// 省略部分代码</span><br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">invoke</span><span class="hljs-params">(Object[] argv)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>   <span class="hljs-comment">//根据输入参数，构造Http 请求。</span><br>    RequestTemplate template = buildTemplateFromArgs.create(argv);<br>    <span class="hljs-comment">// 克隆出一份重试器</span><br>    Retryer retryer = <span class="hljs-keyword">this</span>.retryer.clone();<br>    <span class="hljs-comment">// 尝试最大次数，如果中间有结果，直接返回</span><br>    <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>      <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">return</span> executeAndDecode(template);<br>      &#125; <span class="hljs-keyword">catch</span> (RetryableException e) &#123;<br>        retryer.continueOrPropagate(e);<br>        <span class="hljs-keyword">if</span> (logLevel != Logger.Level.NONE) &#123;<br>          logger.logRetry(metadata.configKey(), logLevel);<br>        &#125;<br>        <span class="hljs-keyword">continue</span>;<br>      &#125;<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><p>重试器有如下几个控制参数：</p><table><thead><tr><th align="left">重试参数</th><th align="left">说明</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">period</td><td align="left">初始重试时间间隔，当请求失败后，重试器将会暂停 初始时间间隔(线程 sleep 的方式)后再开始，避免强刷请求，浪费性能</td><td align="left">100ms</td></tr><tr><td align="left">maxPeriod</td><td align="left">当请求连续失败时，重试的时间间隔将按照：<code>long interval = (long) (period * Math.pow(1.5, attempt - 1));</code> 计算，按照等比例方式延长，但是最大间隔时间为 maxPeriod, 设置此值能够避免 重试次数过多的情况下执行周期太长</td><td align="left">1000ms</td></tr><tr><td align="left">maxAttempts</td><td align="left">最大重试次数</td><td align="left">5</td></tr></tbody></table><p>具体的代码实现可参考：<br><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2FOpenFeign%2Ffeign%2Fblob%2Fmaster%2Fcore%2Fsrc%2Fmain%2Fjava%2Ffeign%2FRetryer.java" target="_blank" rel="noopener">https://github.com/OpenFeign/feign/blob/master/core/src/main/java/feign/Retryer.java</a></p><h5 id="PHASE-8-发送Http请求"><a href="#PHASE-8-发送Http请求" class="headerlink" title="PHASE 8. 发送Http请求"></a>PHASE 8. 发送Http请求</h5><p>Feign 真正发送HTTP请求是委托给 <code>feign.Client</code> 来做的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Client</span> </span>&#123;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Executes a request against its &#123;<span class="hljs-doctag">@link</span> Request#url() url&#125; and returns a response.</span><br><span class="hljs-comment">   *  执行Http请求，并返回Response</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> request safe to replay.</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> options options to apply to this request.</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> connected response, &#123;<span class="hljs-doctag">@link</span> Response.Body&#125; is absent or unread.</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@throws</span> IOException on a network error connecting to &#123;<span class="hljs-doctag">@link</span> Request#url()&#125;.</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function">Response <span class="hljs-title">execute</span><span class="hljs-params">(Request request, Options options)</span> <span class="hljs-keyword">throws</span> IOException</span>;<br>  &#125;<br></code></pre></td></tr></table></figure><p>Feign 默认底层通过JDK 的 <code>java.net.HttpURLConnection</code> 实现了<code>feign.Client</code>接口类,在每次发送请求的时候，都会创建新的HttpURLConnection 链接，这也就是为什么默认情况下Feign的性能很差的原因。可以通过拓展该接口，使用Apache HttpClient 或者OkHttp3等基于连接池的高性能Http客户端，我们项目内部使用的就是OkHttp3作为Http 客户端。</p><p>如下是Feign 的默认实现，供参考：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Default</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Client</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> SSLSocketFactory sslContextFactory;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> HostnameVerifier hostnameVerifier;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Null parameters imply platform defaults.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Default</span><span class="hljs-params">(SSLSocketFactory sslContextFactory, HostnameVerifier hostnameVerifier)</span> </span>&#123;<br>      <span class="hljs-keyword">this</span>.sslContextFactory = sslContextFactory;<br>      <span class="hljs-keyword">this</span>.hostnameVerifier = hostnameVerifier;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Response <span class="hljs-title">execute</span><span class="hljs-params">(Request request, Options options)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>      HttpURLConnection connection = convertAndSend(request, options);<br>      <span class="hljs-keyword">return</span> convertResponse(connection).toBuilder().request(request).build();<br>    &#125;<br><br>    <span class="hljs-function">HttpURLConnection <span class="hljs-title">convertAndSend</span><span class="hljs-params">(Request request, Options options)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>      <span class="hljs-keyword">final</span> HttpURLConnection<br>          connection =<br>          (HttpURLConnection) <span class="hljs-keyword">new</span> URL(request.url()).openConnection();<br>      <span class="hljs-keyword">if</span> (connection <span class="hljs-keyword">instanceof</span> HttpsURLConnection) &#123;<br>        HttpsURLConnection sslCon = (HttpsURLConnection) connection;<br>        <span class="hljs-keyword">if</span> (sslContextFactory != <span class="hljs-keyword">null</span>) &#123;<br>          sslCon.setSSLSocketFactory(sslContextFactory);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (hostnameVerifier != <span class="hljs-keyword">null</span>) &#123;<br>          sslCon.setHostnameVerifier(hostnameVerifier);<br>        &#125;<br>      &#125;<br>      connection.setConnectTimeout(options.connectTimeoutMillis());<br>      connection.setReadTimeout(options.readTimeoutMillis());<br>      connection.setAllowUserInteraction(<span class="hljs-keyword">false</span>);<br>      connection.setInstanceFollowRedirects(<span class="hljs-keyword">true</span>);<br>      connection.setRequestMethod(request.method());<br><br>      Collection&lt;String&gt; contentEncodingValues = request.headers().get(CONTENT_ENCODING);<br>      <span class="hljs-keyword">boolean</span><br>          gzipEncodedRequest =<br>          contentEncodingValues != <span class="hljs-keyword">null</span> &amp;&amp; contentEncodingValues.contains(ENCODING_GZIP);<br>      <span class="hljs-keyword">boolean</span><br>          deflateEncodedRequest =<br>          contentEncodingValues != <span class="hljs-keyword">null</span> &amp;&amp; contentEncodingValues.contains(ENCODING_DEFLATE);<br><br>      <span class="hljs-keyword">boolean</span> hasAcceptHeader = <span class="hljs-keyword">false</span>;<br>      Integer contentLength = <span class="hljs-keyword">null</span>;<br>      <span class="hljs-keyword">for</span> (String field : request.headers().keySet()) &#123;<br>        <span class="hljs-keyword">if</span> (field.equalsIgnoreCase(<span class="hljs-string">"Accept"</span>)) &#123;<br>          hasAcceptHeader = <span class="hljs-keyword">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (String value : request.headers().get(field)) &#123;<br>          <span class="hljs-keyword">if</span> (field.equals(CONTENT_LENGTH)) &#123;<br>            <span class="hljs-keyword">if</span> (!gzipEncodedRequest &amp;&amp; !deflateEncodedRequest) &#123;<br>              contentLength = Integer.valueOf(value);<br>              connection.addRequestProperty(field, value);<br>            &#125;<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>            connection.addRequestProperty(field, value);<br>          &#125;<br>        &#125;<br>      &#125;<br>      <span class="hljs-comment">// Some servers choke on the default accept string.</span><br>      <span class="hljs-keyword">if</span> (!hasAcceptHeader) &#123;<br>        connection.addRequestProperty(<span class="hljs-string">"Accept"</span>, <span class="hljs-string">"*/*"</span>);<br>      &#125;<br><br>      <span class="hljs-keyword">if</span> (request.body() != <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">if</span> (contentLength != <span class="hljs-keyword">null</span>) &#123;<br>          connection.setFixedLengthStreamingMode(contentLength);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          connection.setChunkedStreamingMode(<span class="hljs-number">8196</span>);<br>        &#125;<br>        connection.setDoOutput(<span class="hljs-keyword">true</span>);<br>        OutputStream out = connection.getOutputStream();<br>        <span class="hljs-keyword">if</span> (gzipEncodedRequest) &#123;<br>          out = <span class="hljs-keyword">new</span> GZIPOutputStream(out);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (deflateEncodedRequest) &#123;<br>          out = <span class="hljs-keyword">new</span> DeflaterOutputStream(out);<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>          out.write(request.body());<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>          <span class="hljs-keyword">try</span> &#123;<br>            out.close();<br>          &#125; <span class="hljs-keyword">catch</span> (IOException suppressed) &#123; <span class="hljs-comment">// NOPMD</span><br>          &#125;<br>        &#125;<br>      &#125;<br>      <span class="hljs-keyword">return</span> connection;<br>    &#125;<br><br>    <span class="hljs-function">Response <span class="hljs-title">convertResponse</span><span class="hljs-params">(HttpURLConnection connection)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>      <span class="hljs-keyword">int</span> status = connection.getResponseCode();<br>      String reason = connection.getResponseMessage();<br><br>      <span class="hljs-keyword">if</span> (status &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IOException(format(<span class="hljs-string">"Invalid status(%s) executing %s %s"</span>, status,<br>            connection.getRequestMethod(), connection.getURL()));<br>      &#125;<br><br>      Map&lt;String, Collection&lt;String&gt;&gt; headers = <span class="hljs-keyword">new</span> LinkedHashMap&lt;String, Collection&lt;String&gt;&gt;();<br>      <span class="hljs-keyword">for</span> (Map.Entry&lt;String, List&lt;String&gt;&gt; field : connection.getHeaderFields().entrySet()) &#123;<br>        <span class="hljs-comment">// response message</span><br>        <span class="hljs-keyword">if</span> (field.getKey() != <span class="hljs-keyword">null</span>) &#123;<br>          headers.put(field.getKey(), field.getValue());<br>        &#125;<br>      &#125;<br><br>      Integer length = connection.getContentLength();<br>      <span class="hljs-keyword">if</span> (length == -<span class="hljs-number">1</span>) &#123;<br>        length = <span class="hljs-keyword">null</span>;<br>      &#125;<br>      InputStream stream;<br>      <span class="hljs-keyword">if</span> (status &gt;= <span class="hljs-number">400</span>) &#123;<br>        stream = connection.getErrorStream();<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        stream = connection.getInputStream();<br>      &#125;<br>      <span class="hljs-keyword">return</span> Response.builder()<br>              .status(status)<br>              .reason(reason)<br>              .headers(headers)<br>              .body(stream, length)<br>              .build();<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><h2 id="Feign-的性能怎么样？"><a href="#Feign-的性能怎么样？" class="headerlink" title="Feign 的性能怎么样？"></a>Feign 的性能怎么样？</h2><p>Feign 整体框架非常小巧，在处理请求转换和消息解析的过程中，基本上没什么时间消耗。真正影响性能的，是处理Http请求的环节。<br>如上所述，由于默认情况下，Feign采用的是JDK的<code>HttpURLConnection</code>,所以整体性能并不高，刚开始接触Spring Cloud 的同学，如果没注意这些细节，可能会对Spring Cloud 有很大的偏见。<br>我们项目内部使用的是OkHttp3 作为连接客户端。</p><p><strong>欢迎关注微信公众号​：</strong></p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006y8mN6gy1g7d3llw1nkj30b40b4wee.jpg" srcset="/img/loading.gif" alt="欢迎关注公众号" style="width: 100px" />]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>SpringCloud</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>springCloud</tag>
      
      <tag>Feign</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Fastjson把对象转化成json</title>
    <link href="/2019/12/14/Fastjson%E6%8A%8A%E5%AF%B9%E8%B1%A1%E8%BD%AC%E5%8C%96%E6%88%90json/"/>
    <url>/2019/12/14/Fastjson%E6%8A%8A%E5%AF%B9%E8%B1%A1%E8%BD%AC%E5%8C%96%E6%88%90json/</url>
    
    <content type="html"><![CDATA[<p>DisableCircularReferenceDetect来禁止循环引用检测：</p><p>JSON.toJSONString(…, SerializerFeature.DisableCircularReferenceDetect)</p><p>当进行toJSONString的时候，默认如果重用对象的话，会使用引用的方式进行引用对象。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json">"颜色": [  <br>      &#123;  <br>        <span class="hljs-attr">"$ref"</span>: <span class="hljs-string">"$.itemSkuList[0].itemSpecificationList[0]"</span>  <br>      &#125;,   <br>      &#123;  <br>        <span class="hljs-attr">"$ref"</span>: <span class="hljs-string">"$.itemSkuList[1].itemSpecificationList[0]"</span>  <br>      &#125;  <br>    ]<br></code></pre></td></tr></table></figure><h3 id="循环引用"><a href="#循环引用" class="headerlink" title="循环引用"></a>循环引用</h3><p>很多场景中，我们需要序列化的对象中存在循环引用，在许多的json库中，这会导致stackoverflow。在功能强大的fastjson中，你不需要担心这个问题。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">A a = <span class="hljs-keyword">new</span> A();  <br>B b = <span class="hljs-keyword">new</span> B(a);  <br>a.setB(b);  <br>String text = JSON.toJSONString(a); <span class="hljs-comment">//&#123;"b":&#123;"a":&#123;"$ref":".."&#125;&#125;&#125;  </span><br>A a1 = JSON.parseObject(text, A<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;  <br>Assert.assertTrue(a1 == a1.getB().getA());<br></code></pre></td></tr></table></figure><p>引用是通过”$ref”来表示的</p><table><thead><tr><th align="left">引用</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>&quot;$ref&quot;:&quot;..&quot;</code></td><td align="left">上一级</td></tr><tr><td align="left"><code>&quot;$ref&quot;:&quot;@&quot;</code></td><td align="left">当前对象，也就是自引用</td></tr><tr><td align="left"><code>&quot;$ref&quot;:&quot;$&quot;</code></td><td align="left">根对象</td></tr><tr><td align="left"><code>&quot;$ref&quot;:&quot;$.children.0&quot;</code></td><td align="left">基于路径的引用，相当于 root.getChildren().get(0)</td></tr></tbody></table><p><strong>欢迎关注微信公众号​：</strong></p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006y8mN6gy1g7d3llw1nkj30b40b4wee.jpg" srcset="/img/loading.gif" alt="欢迎关注公众号" style="width: 100px" />]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Fastjson</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SerializerFeature详解</title>
    <link href="/2019/12/14/SerializerFeature%E8%AF%A6%E8%A7%A3/"/>
    <url>/2019/12/14/SerializerFeature%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="SerializerFeature属性"><a href="#SerializerFeature属性" class="headerlink" title="SerializerFeature属性"></a>SerializerFeature属性</h1><table><thead><tr><th>名称</th><th>含义</th><th>备注</th></tr></thead><tbody><tr><td>QuoteFieldNames</td><td>输出key时是否使用双引号,默认为true</td><td></td></tr><tr><td>UseSingleQuotes</td><td>使用单引号而不是双引号,默认为false</td><td></td></tr><tr><td>WriteMapNullValue</td><td>是否输出值为null的字段,默认为false</td><td></td></tr><tr><td>WriteEnumUsingToString</td><td>Enum输出name()或者original,默认为false</td><td></td></tr><tr><td>UseISO8601DateFormat</td><td>Date使用ISO8601格式输出，默认为false</td><td></td></tr><tr><td>WriteNullListAsEmpty</td><td>List字段如果为null,输出为[],而非null</td><td></td></tr><tr><td>WriteNullStringAsEmpty</td><td>字符类型字段如果为null,输出为”“,而非null</td><td></td></tr><tr><td>WriteNullNumberAsZero</td><td>数值字段如果为null,输出为0,而非null</td><td></td></tr><tr><td>WriteNullBooleanAsFalse</td><td>Boolean字段如果为null,输出为false,而非null</td><td></td></tr><tr><td>SkipTransientField</td><td>如果是true，类中的Get方法对应的Field是transient，序列化时将会被忽略。默认为true</td><td></td></tr><tr><td>SortField</td><td>按字段名称排序后输出。默认为false</td><td></td></tr><tr><td>WriteTabAsSpecial</td><td>把\t做转义输出，默认为false</td><td><code>不推荐</code></td></tr><tr><td>PrettyFormat</td><td>结果是否格式化,默认为false</td><td></td></tr><tr><td>WriteClassName</td><td>序列化时写入类型信息，默认为false。反序列化是需用到</td><td></td></tr><tr><td>DisableCircularReferenceDetect</td><td>消除对同一对象循环引用的问题，默认为false</td><td></td></tr><tr><td>WriteSlashAsSpecial</td><td>对斜杠’/’进行转义</td><td></td></tr><tr><td>BrowserCompatible</td><td>将中文都会序列化为\uXXXX格式，字节数会多一些，但是能兼容IE 6，默认为false</td><td></td></tr><tr><td>WriteDateUseDateFormat</td><td>全局修改日期格式,默认为false。JSON.DEFFAULT_DATE_FORMAT = “yyyy-MM-dd”;JSON.toJSONString(obj, SerializerFeature.WriteDateUseDateFormat);</td><td></td></tr><tr><td>DisableCheckSpecialChar</td><td>一个对象的字符串属性中如果有特殊字符如双引号，将会在转成json时带有反斜杠转移符。如果不需要转义，可以使用这个属性。默认为false</td><td></td></tr><tr><td>NotWriteRootClassName</td><td>含义</td><td></td></tr><tr><td>BeanToArray</td><td>将对象转为array输出</td><td></td></tr><tr><td>WriteNonStringKeyAsString</td><td>含义</td><td></td></tr><tr><td>NotWriteDefaultValue</td><td>含义</td><td></td></tr><tr><td>BrowserSecure</td><td>含义</td><td></td></tr><tr><td>IgnoreNonFieldGetter</td><td>含义</td><td></td></tr><tr><td>WriteEnumUsingName</td><td>含义</td><td>-</td></tr></tbody></table><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul><li>User、Word来模拟各种数据类型。</li><li>SerializerFeatureTest：JSON部分示例的示例方法。</li></ul><h2 id="User类型：缺省get、set方法"><a href="#User类型：缺省get、set方法" class="headerlink" title="User类型：缺省get、set方法"></a>User类型：缺省get、set方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String add;<br>    <span class="hljs-keyword">private</span> String old;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Word类型：缺省get、set方法"><a href="#Word类型：缺省get、set方法" class="headerlink" title="Word类型：缺省get、set方法"></a>Word类型：缺省get、set方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Word</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> String d;<br>    <span class="hljs-keyword">private</span> String e;<br>    <span class="hljs-keyword">private</span> String f;<br>    <span class="hljs-keyword">private</span> String a;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> b;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> c;<br>    <span class="hljs-keyword">private</span> Date date;<br>    <span class="hljs-keyword">private</span> Map&lt;String , Object&gt; map;<br>    <span class="hljs-keyword">private</span> List&lt;User&gt; list;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="SerializerFeatureTest-测试类"><a href="#SerializerFeatureTest-测试类" class="headerlink" title="SerializerFeatureTest:测试类"></a>SerializerFeatureTest:测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SerializerFeatureTest</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Word word;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>&#123;<br>        word = <span class="hljs-keyword">new</span> Word();<br>        word.setA(<span class="hljs-string">"a"</span>);<br>        word.setB(<span class="hljs-number">2</span>);<br>        word.setC(<span class="hljs-keyword">true</span>);<br>        word.setD(<span class="hljs-string">"d"</span>);<br>        word.setE(<span class="hljs-string">""</span>);<br>        word.setF(<span class="hljs-keyword">null</span>);<br>        word.setDate(<span class="hljs-keyword">new</span> Date());<br><br>        List&lt;User&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;User&gt;();<br>        User user1 = <span class="hljs-keyword">new</span> User();<br>        user1.setId(<span class="hljs-number">1</span>);<br>        user1.setOld(<span class="hljs-string">"11"</span>);<br>        user1.setName(<span class="hljs-string">"用户1"</span>);<br>        user1.setAdd(<span class="hljs-string">"北京"</span>);<br>        User user2 = <span class="hljs-keyword">new</span> User();<br>        user2.setId(<span class="hljs-number">2</span>);<br>        user2.setOld(<span class="hljs-string">"22"</span>);<br>        user2.setName(<span class="hljs-string">"用户2"</span>);<br>        user2.setAdd(<span class="hljs-string">"上海"</span>);<br>        User user3 = <span class="hljs-keyword">new</span> User();<br>        user3.setId(<span class="hljs-number">3</span>);<br>        user3.setOld(<span class="hljs-string">"33"</span>);<br>        user3.setName(<span class="hljs-string">"用户3"</span>);<br>        user3.setAdd(<span class="hljs-string">"广州"</span>);<br><br>        list.add(user3);<br>        list.add(user2);<br>        list.add(<span class="hljs-keyword">null</span>);<br>        list.add(user1);<br><br>        word.setList(list);<br><br>        Map&lt;String , Object&gt; map = <span class="hljs-keyword">new</span> HashedMap();<br>        map.put(<span class="hljs-string">"mapa"</span>, <span class="hljs-string">"mapa"</span>);<br>        map.put(<span class="hljs-string">"mapo"</span>, <span class="hljs-string">"mapo"</span>);<br>        map.put(<span class="hljs-string">"mapz"</span>, <span class="hljs-string">"mapz"</span>);<br>        map.put(<span class="hljs-string">"user1"</span>, user1);<br>        map.put(<span class="hljs-string">"user3"</span>, user3);<br>        map.put(<span class="hljs-string">"user4"</span>, <span class="hljs-keyword">null</span>);<br>        map.put(<span class="hljs-string">"list"</span>, list);<br>        word.setMap(map);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        init();<br><span class="hljs-comment">//        useSingleQuotes();</span><br><span class="hljs-comment">//        writeMapNullValue();</span><br><span class="hljs-comment">//        useISO8601DateFormat();</span><br><span class="hljs-comment">//        writeNullListAsEmpty();</span><br><span class="hljs-comment">//        writeNullStringAsEmpty();</span><br><span class="hljs-comment">//        sortField();</span><br><span class="hljs-comment">//        prettyFormat();</span><br><span class="hljs-comment">//        writeDateUseDateFormat();</span><br><span class="hljs-comment">//        beanToArray();</span><br>        showJsonBySelf();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 9:自定义</span><br><span class="hljs-comment">     * 格式化输出</span><br><span class="hljs-comment">     * 显示值为null的字段</span><br><span class="hljs-comment">     * 将为null的字段值显示为""</span><br><span class="hljs-comment">     * DisableCircularReferenceDetect:消除循环引用</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showJsonBySelf</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(JSON.toJSONString(word));<br>        System.out.println(JSON.toJSONString(word, SerializerFeature.PrettyFormat,<br>                SerializerFeature.WriteMapNullValue, SerializerFeature.WriteNullStringAsEmpty,<br>                SerializerFeature.DisableCircularReferenceDetect,<br>                SerializerFeature.WriteNullListAsEmpty));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 8:</span><br><span class="hljs-comment">     * 将对象转为array输出</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">beanToArray</span><span class="hljs-params">()</span> </span>&#123;<br>        word.setMap(<span class="hljs-keyword">null</span>);<br>        word.setList(<span class="hljs-keyword">null</span>);<br>        System.out.println(JSON.toJSONString(word));<br>        System.out.println(JSON.toJSONString(word, SerializerFeature.BeanToArray));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 7:</span><br><span class="hljs-comment">     * WriteDateUseDateFormat:全局修改日期格式,默认为false。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">writeDateUseDateFormat</span><span class="hljs-params">()</span> </span>&#123;<br>        word.setMap(<span class="hljs-keyword">null</span>);<br>        word.setList(<span class="hljs-keyword">null</span>);<br>        System.out.println(JSON.toJSONString(word));<br>        JSON.DEFFAULT_DATE_FORMAT = <span class="hljs-string">"yyyy-MM-dd"</span>;<br>        System.out.println(JSON.toJSONString(word, SerializerFeature.WriteDateUseDateFormat));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 6:</span><br><span class="hljs-comment">     * PrettyFormat</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">prettyFormat</span><span class="hljs-params">()</span> </span>&#123;<br>        word.setMap(<span class="hljs-keyword">null</span>);<br>        word.setList(<span class="hljs-keyword">null</span>);<br>        System.out.println(JSON.toJSONString(word));<br>        System.out.println(JSON.toJSONString(word, SerializerFeature.PrettyFormat));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * SortField:按字段名称排序后输出。默认为false</span><br><span class="hljs-comment">     * 这里使用的是fastjson：为了更好使用sort field martch优化算法提升parser的性能，fastjson序列化的时候，</span><br><span class="hljs-comment">     * 缺省把SerializerFeature.SortField特性打开了。</span><br><span class="hljs-comment">     * 反序列化的时候也缺省把SortFeidFastMatch的选项打开了。</span><br><span class="hljs-comment">     * 这样，如果你用fastjson序列化的文本，输出的结果是按照fieldName排序输出的，parser时也能利用这个顺序进行优化读取。</span><br><span class="hljs-comment">     * 这种情况下，parser能够获得非常好的性能。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sortField</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(JSON.toJSONString(word));<br>        System.out.println(JSON.toJSONString(word, SerializerFeature.SortField));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  5:</span><br><span class="hljs-comment">     *  WriteNullStringAsEmpty:字符类型字段如果为null,输出为"",而非null</span><br><span class="hljs-comment">     *  需要配合WriteMapNullValue使用，现将null输出</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">writeNullStringAsEmpty</span><span class="hljs-params">()</span> </span>&#123;<br>        word.setE(<span class="hljs-keyword">null</span>);<br>        System.out.println(JSONObject.toJSONString(word));<br>        System.out.println(<span class="hljs-string">"设置WriteMapNullValue后："</span>);<br>        System.out.println(JSONObject.toJSONString(word, SerializerFeature.WriteMapNullValue));<br>        System.out.println(<span class="hljs-string">"设置WriteMapNullValue、WriteNullStringAsEmpty后："</span>);<br>        System.out.println(JSONObject.toJSONString(word, SerializerFeature.WriteMapNullValue, SerializerFeature.WriteNullStringAsEmpty));<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 4:</span><br><span class="hljs-comment">     * WriteNullListAsEmpty:List字段如果为null,输出为[],而非null</span><br><span class="hljs-comment">     * 需要配合WriteMapNullValue使用，现将null输出</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">writeNullListAsEmpty</span><span class="hljs-params">()</span> </span>&#123;<br>        word.setList(<span class="hljs-keyword">null</span>);<br>        System.out.println(JSONObject.toJSONString(word));<br>        System.out.println(<span class="hljs-string">"设置WriteNullListAsEmpty后："</span>);<br>        System.out.println(JSONObject.toJSONString(word, SerializerFeature.WriteMapNullValue, SerializerFeature.WriteNullListAsEmpty));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 3:</span><br><span class="hljs-comment">     * UseISO8601DateFormat:Date使用ISO8601格式输出，默认为false</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">useISO8601DateFormat</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(JSONObject.toJSONString(word));<br>        System.out.println(<span class="hljs-string">"设置UseISO8601DateFormat后："</span>);<br>        System.out.println(JSONObject.toJSONString(word, SerializerFeature.UseISO8601DateFormat));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 2:</span><br><span class="hljs-comment">     * WriteMapNullValue:是否输出值为null的字段,默认为false</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">writeMapNullValue</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(JSONObject.toJSONString(word));<br>        System.out.println(<span class="hljs-string">"设置WriteMapNullValue后："</span>);<br>        System.out.println(JSONObject.toJSONString(word, SerializerFeature.WriteMapNullValue));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 1:</span><br><span class="hljs-comment">     * UseSingleQuotes:使用单引号而不是双引号,默认为false</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">useSingleQuotes</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(JSONObject.toJSONString(word));<br>        System.out.println(<span class="hljs-string">"设置useSingleQuotes后："</span>);<br>        System.out.println(JSONObject.toJSONString(word, SerializerFeature.UseSingleQuotes));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="对应输出结果如下："><a href="#对应输出结果如下：" class="headerlink" title="对应输出结果如下："></a>对应输出结果如下：</h2><p>1、useSingleQuotes：</p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9yms5h9h1j30f003dwef.jpg" srcset="/img/loading.gif" alt="img"></p><p>2、writeMapNullValue：</p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9yms6k0jhj30iu02rwee.jpg" srcset="/img/loading.gif" alt="img"></p><p>3、useISO8601DateFormat： </p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9yms7xdzkj30jn03oglo.jpg" srcset="/img/loading.gif" alt="img"></p><p>4、writeNullListAsEmpty：</p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9yms8q45pj30lt048aa4.jpg" srcset="/img/loading.gif" alt="img"></p><p>5、writeNullStringAsEmpty： </p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9yms95rxsj30oj05sq37.jpg" srcset="/img/loading.gif" alt="img"></p><p>6、prettyFormat：</p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9yms9ntfej30kk07ywej.jpg" srcset="/img/loading.gif" alt="img"></p><p>7、writeDateUseDateFormat： </p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymsbzofuj30jr040t8o.jpg" srcset="/img/loading.gif" alt="img"></p><p>8、beanToArray：</p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymsd1sldj30ja037glk.jpg" srcset="/img/loading.gif" alt="img"></p><p>9、自定义组合：showJsonBySelf： </p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymse2vkzj30wl0csjs0.jpg" srcset="/img/loading.gif" alt="img"></p><p> 此时完整的输出如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<span class="hljs-attr">"a"</span>:<span class="hljs-string">"a"</span>,<span class="hljs-attr">"b"</span>:<span class="hljs-number">2</span>,<span class="hljs-attr">"c"</span>:<span class="hljs-literal">true</span>,<span class="hljs-attr">"d"</span>:<span class="hljs-string">"d"</span>,<span class="hljs-attr">"date"</span>:<span class="hljs-number">1473839656840</span>,<span class="hljs-attr">"e"</span>:<span class="hljs-string">""</span>,<span class="hljs-attr">"list"</span>:[&#123;<span class="hljs-attr">"add"</span>:<span class="hljs-string">"广州"</span>,<span class="hljs-attr">"id"</span>:<span class="hljs-number">3</span>,<span class="hljs-attr">"name"</span>:<span class="hljs-string">"用户3"</span>,<span class="hljs-attr">"old"</span>:<span class="hljs-string">"33"</span>&#125;,&#123;<span class="hljs-attr">"add"</span>:<span class="hljs-string">"上海"</span>,<span class="hljs-attr">"id"</span>:<span class="hljs-number">2</span>,<span class="hljs-attr">"name"</span>:<span class="hljs-string">"用户2"</span>,<span class="hljs-attr">"old"</span>:<span class="hljs-string">"22"</span>&#125;,<span class="hljs-literal">null</span>,&#123;<span class="hljs-attr">"add"</span>:<span class="hljs-string">"北京"</span>,<span class="hljs-attr">"id"</span>:<span class="hljs-number">1</span>,<span class="hljs-attr">"name"</span>:<span class="hljs-string">"用户1"</span>,<span class="hljs-attr">"old"</span>:<span class="hljs-string">"11"</span>&#125;],<span class="hljs-attr">"map"</span>:&#123;<span class="hljs-attr">"list"</span>:[&#123;<span class="hljs-attr">"$ref"</span>:<span class="hljs-string">"$.list[0]"</span>&#125;,&#123;<span class="hljs-attr">"$ref"</span>:<span class="hljs-string">"$.list[1]"</span>&#125;,<span class="hljs-literal">null</span>,&#123;<span class="hljs-attr">"$ref"</span>:<span class="hljs-string">"$.list[3]"</span>&#125;],<span class="hljs-attr">"user3"</span>:&#123;<span class="hljs-attr">"$ref"</span>:<span class="hljs-string">"$.list[0]"</span>&#125;,<span class="hljs-attr">"mapz"</span>:<span class="hljs-string">"mapz"</span>,<span class="hljs-attr">"mapo"</span>:<span class="hljs-string">"mapo"</span>,<span class="hljs-attr">"mapa"</span>:<span class="hljs-string">"mapa"</span>,<span class="hljs-attr">"user1"</span>:&#123;<span class="hljs-attr">"$ref"</span>:<span class="hljs-string">"$.list[3]"</span>&#125;&#125;&#125;<br>&#123;<br>    <span class="hljs-attr">"a"</span>:<span class="hljs-string">"a"</span>,<br>    <span class="hljs-attr">"b"</span>:<span class="hljs-number">2</span>,<br>    <span class="hljs-attr">"c"</span>:<span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">"d"</span>:<span class="hljs-string">"d"</span>,<br>    <span class="hljs-attr">"date"</span>:<span class="hljs-number">1473839656840</span>,<br>    <span class="hljs-attr">"e"</span>:<span class="hljs-string">""</span>,<br>    <span class="hljs-attr">"f"</span>:<span class="hljs-string">""</span>,<br>    <span class="hljs-attr">"list"</span>:[<br>        &#123;<br>            <span class="hljs-attr">"add"</span>:<span class="hljs-string">"广州"</span>,<br>            <span class="hljs-attr">"id"</span>:<span class="hljs-number">3</span>,<br>            <span class="hljs-attr">"name"</span>:<span class="hljs-string">"用户3"</span>,<br>            <span class="hljs-attr">"old"</span>:<span class="hljs-string">"33"</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-attr">"add"</span>:<span class="hljs-string">"上海"</span>,<br>            <span class="hljs-attr">"id"</span>:<span class="hljs-number">2</span>,<br>            <span class="hljs-attr">"name"</span>:<span class="hljs-string">"用户2"</span>,<br>            <span class="hljs-attr">"old"</span>:<span class="hljs-string">"22"</span><br>        &#125;,<br>        <span class="hljs-literal">null</span>,<br>        &#123;<br>            <span class="hljs-attr">"add"</span>:<span class="hljs-string">"北京"</span>,<br>            <span class="hljs-attr">"id"</span>:<span class="hljs-number">1</span>,<br>            <span class="hljs-attr">"name"</span>:<span class="hljs-string">"用户1"</span>,<br>            <span class="hljs-attr">"old"</span>:<span class="hljs-string">"11"</span><br>        &#125;<br>    ],<br>    <span class="hljs-attr">"map"</span>:&#123;<br>        <span class="hljs-attr">"list"</span>:[<br>            &#123;<br>                <span class="hljs-attr">"add"</span>:<span class="hljs-string">"广州"</span>,<br>                <span class="hljs-attr">"id"</span>:<span class="hljs-number">3</span>,<br>                <span class="hljs-attr">"name"</span>:<span class="hljs-string">"用户3"</span>,<br>                <span class="hljs-attr">"old"</span>:<span class="hljs-string">"33"</span><br>            &#125;,<br>            &#123;<br>                <span class="hljs-attr">"add"</span>:<span class="hljs-string">"上海"</span>,<br>                <span class="hljs-attr">"id"</span>:<span class="hljs-number">2</span>,<br>                <span class="hljs-attr">"name"</span>:<span class="hljs-string">"用户2"</span>,<br>                <span class="hljs-attr">"old"</span>:<span class="hljs-string">"22"</span><br>            &#125;,<br>            <span class="hljs-literal">null</span>,<br>            &#123;<br>                <span class="hljs-attr">"add"</span>:<span class="hljs-string">"北京"</span>,<br>                <span class="hljs-attr">"id"</span>:<span class="hljs-number">1</span>,<br>                <span class="hljs-attr">"name"</span>:<span class="hljs-string">"用户1"</span>,<br>                <span class="hljs-attr">"old"</span>:<span class="hljs-string">"11"</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"user4"</span>:<span class="hljs-literal">null</span>,<br>        <span class="hljs-attr">"user3"</span>:&#123;<br>            <span class="hljs-attr">"add"</span>:<span class="hljs-string">"广州"</span>,<br>            <span class="hljs-attr">"id"</span>:<span class="hljs-number">3</span>,<br>            <span class="hljs-attr">"name"</span>:<span class="hljs-string">"用户3"</span>,<br>            <span class="hljs-attr">"old"</span>:<span class="hljs-string">"33"</span><br>        &#125;,<br>        <span class="hljs-attr">"mapz"</span>:<span class="hljs-string">"mapz"</span>,<br>        <span class="hljs-attr">"mapo"</span>:<span class="hljs-string">"mapo"</span>,<br>        <span class="hljs-attr">"mapa"</span>:<span class="hljs-string">"mapa"</span>,<br>        <span class="hljs-attr">"user1"</span>:&#123;<br>            <span class="hljs-attr">"add"</span>:<span class="hljs-string">"北京"</span>,<br>            <span class="hljs-attr">"id"</span>:<span class="hljs-number">1</span>,<br>            <span class="hljs-attr">"name"</span>:<span class="hljs-string">"用户1"</span>,<br>            <span class="hljs-attr">"old"</span>:<span class="hljs-string">"11"</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：<br>- <a href="http://blog.csdn.net/u010246789/article/details/52538953" target="_blank" rel="noopener">fastjson把对象转化成json避免$ref</a></p><p>学习地址：<br>- <a href="http://blog.csdn.net/glarystar/article/details/6654494" target="_blank" rel="noopener">http://blog.csdn.net/glarystar/article/details/6654494</a><br>- <a href="http://blog.csdn.net/u013163567/article/details/50736096" target="_blank" rel="noopener">http://blog.csdn.net/u013163567/article/details/50736096</a></p><p>项目github地址：<br>- <a href="https://github.com/gubaijin/buildmavenweb" target="_blank" rel="noopener">https://github.com/gubaijin/buildmavenweb</a></p><p><strong>欢迎关注微信公众号​：</strong></p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006y8mN6gy1g7d3llw1nkj30b40b4wee.jpg" srcset="/img/loading.gif" alt="欢迎关注公众号" style="width: 100px" />]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Fastjson</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>API 网关从入门到放弃</title>
    <link href="/2019/12/07/API-%E7%BD%91%E5%85%B3%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/"/>
    <url>/2019/12/07/API-%E7%BD%91%E5%85%B3%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/</url>
    
    <content type="html"><![CDATA[<blockquote><p>来源：<a href="http://www.jiangxinlingdu.com/thought/2019/09/12/gateway.html" target="_blank" rel="noopener">匠心零度</a><a href="http://www.jiangxinlingdu.com/thought/2019/09/12/gateway.html" target="_blank" rel="noopener">http://www.jiangxinlingdu.com/thought/2019/09/12/gateway.html</a></p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h2><p>假设你正在开发一个电商网站，那么这里会涉及到很多后端的微服务，比如会员、商品、推荐服务等等。</p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymmel0tcj30dg0dc0t7.jpg" srcset="/img/loading.gif" alt="img"></p><p>那么这里就会遇到一个问题，APP/Browser怎么去访问这些后端的服务? 如果业务比较简单的话，可以给每个业务都分配一个独立的域名(<a href="https://service.api.company.com)，但这种方式会有几个问题" target="_blank" rel="noopener">https://service.api.company.com)，但这种方式会有几个问题</a>:</p><ul><li>每个业务都会需要鉴权、限流、权限校验等逻辑，如果每个业务都各自为战，自己造轮子实现一遍，会很蛋疼，完全可以抽出来，放到一个统一的地方去做。</li><li>如果业务量比较简单的话，这种方式前期不会有什么问题，但随着业务越来越复杂，比如淘宝、亚马逊打开一个页面可能会涉及到数百个微服务协同工作，如果每一个微服务都分配一个域名的话，一方面客户端代码会很难维护，涉及到数百个域名，另一方面是连接数的瓶颈，想象一下你打开一个APP，通过抓包发现涉及到了数百个远程调用，这在移动端下会显得非常低效。</li><li>每上线一个新的服务，都需要运维参与，申请域名、配置Nginx等，当上线、下线服务器时，同样也需要运维参与，另外采用域名这种方式，对于环境的隔离也不太友好，调用者需要自己根据域名自己进行判断。</li><li>另外还有一个问题，后端每个微服务可能是由不同语言编写的、采用了不同的协议，比如HTTP、Dubbo、GRPC等，但是你不可能要求客户端去适配这么多种协议，这是一项非常有挑战的工作，项目会变的非常复杂且很难维护。</li><li>后期如果需要对微服务进行重构的话，也会变的非常麻烦，需要客户端配合你一起进行改造，比如商品服务，随着业务变的越来越复杂，后期需要进行拆分成多个微服务，这个时候对外提供的服务也需要拆分成多个，同时需要客户端配合你进行改造，非常蛋疼。</li></ul><h2 id="API-Gateway"><a href="#API-Gateway" class="headerlink" title="API Gateway"></a><strong>API Gateway</strong></h2><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymmfjn96j30dg0dcdgb.jpg" srcset="/img/loading.gif" alt=""></p><p>更好的方式是采用API网关，实现一个API网关接管所有的入口流量，类似Nginx的作用，将所有用户的请求转发给后端的服务器，但网关做的不仅仅只是简单的转发，也会针对流量做一些扩展，比如鉴权、限流、权限、熔断、协议转换、错误码统一、缓存、日志、监控、告警等，这样将通用的逻辑抽出来，由网关统一去做，业务方也能够更专注于业务逻辑，提升迭代的效率。</p><p>通过引入API网关，客户端只需要与API网关交互，而不用与各个业务方的接口分别通讯，但多引入一个组件就多引入了一个潜在的故障点，因此要实现一个高性能、稳定的网关，也会涉及到很多点。</p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymmg0sxxj30sg0kpabh.jpg" srcset="/img/loading.gif" alt="img"></p><h2 id="API注册"><a href="#API注册" class="headerlink" title="API注册"></a><strong>API注册</strong></h2><p>业务方如何接入网关?一般来说有几种方式。</p><ul><li>第一种采用插件扫描业务方的API，比如Spring MVC的注解，并结合Swagger的注解，从而实现参数校验、文档&amp;&amp;SDK生成等功能，扫描完成之后，需要上报到网关的存储服务。</li><li>手动录入。比如接口的路径、请求参数、响应参数、调用方式等信息，但这种方式相对来说会麻烦一些，如果参数过多的话，前期录入会很费时费力。</li></ul><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymmguf7zj30u00fraal.jpg" srcset="/img/loading.gif" alt=""></p><ul><li>配置文件导入。比如通过Swagger\OpenAPI等，比如阿里云的网关:</li></ul><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymmhua4lj30u0064t93.jpg" srcset="/img/loading.gif" alt=""></p><h2 id="协议转换"><a href="#协议转换" class="headerlink" title="协议转换"></a><strong>协议转换</strong></h2><p>内部的API可能是由很多种不同的协议实现的，比如HTTP、Dubbo、GRPC等，但对于用户来说其中很多都不是很友好，或者根本没法对外暴露，比如Dubbo服务，因此需要在网关层做一次协议转换，将用户的HTTP协议请求，在网关层转换成底层对应的协议，比如HTTP -&gt; Dubbo, 但这里需要注意很多问题，比如参数类型，如果类型搞错了，导致转换出问题，而日志又不够详细的话，问题会很难定位。</p><h2 id="服务发现"><a href="#服务发现" class="headerlink" title="服务发现"></a><strong>服务发现</strong></h2><p>网关作为流量的入口，负责请求的转发，但首先需要知道转发给谁，如何寻址，这里有几种方式:</p><ul><li>写死在代码/配置文件里，这种方式虽然比较挫，但也能使用，比如线上仍然使用的是物理机，IP变动不会很频繁，但扩缩容、包括应用上下线都会很麻烦，网关自身甚至需要实现一套健康监测机制。</li><li>域名。采用域名也是一种不错的方案，对于所有的语言都适用，但对于内部的服务，走域名会很低效，另外环境隔离也不太友好，比如预发、线上通常是同一个数据库，因此网关读取到的可能是同一个域名，这时候预发的网关调用的就是线上的服务。</li><li>注册中心。采用注册中心就不会有上述的这些问题，即使是在容器环境下，节点的IP变更比较频繁，但节点列表的实时维护会由注册中心搞定，对网关是透明的，另外应用的正常上下线、包括异常宕机等情况，也会由注册中心的健康检查机制检测到，并实时反馈给网关。并且采用注册中心性能也没有额外的性能损耗，采用域名的方式，额外需要走一次DNS解析、Nginx转发等，中间多了很多跳，性能会有很大的下降，但采用注册中心，网关是和业务方直接点对点的通讯，不会有额外的损耗。</li></ul><h2 id="服务调用"><a href="#服务调用" class="headerlink" title="服务调用"></a><strong>服务调用</strong></h2><p>网关由于对接很多种不同的协议，因此可能需要实现很多种调用方式，比如HTTP、Dubbo等，基于性能原因，最好都采用异步的方式，而Http、Dubbo都是支持异步的，比如apache就提供了基于NIO实现的异步HTTP客户端。</p><p>因为网关会涉及到很多异步调用，比如拦截器、HTTP客户端、dubbo、redis等，因此需要考虑下异步调用的方式，如果基于回调或者future的话，代码嵌套会很深，可读性很差，可以参考zuul和spring cloud gateway的方案，基于响应式进行改造。</p><h2 id="优雅下线"><a href="#优雅下线" class="headerlink" title="优雅下线"></a><strong>优雅下线</strong></h2><p>优雅下线也是网关需要关注的一个问题，网关底层会涉及到很多种协议，比如HTTP、Dubbo，而HTTP又可以继续细分，比如域名、注册中心等，有些自身就支持优雅下线，比如Nginx自身是支持健康监测机制的，如果检测到某一个节点已经挂掉了，就会把这个节点摘掉，对于应用正常下线，需要结合发布系统，首先进行逻辑下线，然后对后续Nginx的健康监测请求直接返回失败(比如直接返回500),然后等待一段时间(根据Nginx配置决定)，然后再将应用实际下线掉。另外对于注册中心的其实也类似，一般注册中心是只支持手动下线的，可以在逻辑下线阶段调用注册中心的接口将节点下线掉，而有些不支持主动下线的，需要结合缓存的配置，让应用延迟下线。另外对于其他比如Dubbo等原理也是类似。</p><h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a><strong>性能</strong></h2><p>网关作为所有流量的入口，性能是重中之重，早期大部分网关都是基于同步阻塞模型构建的，比如Zuul 1.x。但这种同步的模型我们都知道，每个请求/连接都会占用一个线程，而线程在JVM中是一个很重的资源，比如Tomcat默认就是200个线程，如果网关隔离没有做好的话，当发生网络延迟、FullGC、第三方服务慢等情况造成上游服务延迟时，线程池很容易会被打满，造成新的请求被拒绝，但这个时候其实线程都阻塞在IO上，系统的资源被没有得到充分的利用。另外一点，容易受网络、磁盘IO等延迟影响。需要谨慎设置超时时间，如果设置不当，且服务隔离做的不是很完善的话，网关很容易被一个慢接口拖垮。</p><p>而异步化的方式则完全不同，通常情况下一个CPU核启动一个线程即可处理所有的请求、响应。一个请求的生命周期不再固定于一个线程，而是会分成不同的阶段交由不同的线程池处理，系统的资源能够得到更充分的利用。而且因为线程不再被某一个连接独占，一个连接所占用的系统资源也会低得多，只是一个文件描述符加上几个监听器等，而在阻塞模型中，每条连接都会独占一个线程，而线程是一个非常重的资源。对于上游服务的延迟情况，也能够得到很大的缓解，因为在阻塞模型中，慢请求会独占一个线程资源，而异步化之后，因为单条连接所占用的资源变的非常低，系统可以同时处理大量的请求。</p><p>如果是JVM平台，Zuul 2、Spring Cloud gateway等都是不错的异步网关选型，另外也可以基于Netty、Spring Boot2.x的webflux、vert.x或者servlet3.1的异步支持进行自研。</p><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a><strong>缓存</strong></h2><p>对于一些幂等的get请求，可以在网关层面根据业务方指定的缓存头做一层缓存，存储到Redis等二级缓存中，这样一些重复的请求，可以在网关层直接处理，而不用打到业务线，降低业务方的压力，另外如果业务方节点挂掉，网关也能够返回自身的缓存。</p><h2 id="限流"><a href="#限流" class="headerlink" title="限流"></a><strong>限流</strong></h2><p>限流对于每个业务组件来说，可以说都是一个必须的组件，如果限流做不好的话，当请求量突增时，很容易导致业务方的服务挂掉，比如双11、双12等大促时，接口的请求量是平时的数倍，如果没有评估好容量，又没有做限流的话，很容易服务整个不可用，因此需要根据业务方接口的处理能力，做好限流策略，相信大家都见过淘宝、百度抢红包时的降级页面。</p><p>因此一定要在接入层做好限流策略，对于非核心接口可以直接将降级掉，保障核心服务的可用性，对于核心接口，需要根据压测时得到的接口容量，制定对应的限流策略。限流又分为几种:</p><ul><li>单机。单机性能比较高，不涉及远程调用，只是本地计数，对接口RT影响最小。但需要考虑下限流数的设置，比如是针对单台网关、还是整个网关集群，如果是整个集群的话，需要考虑到网关缩容、扩容时修改对应的限流数。</li><li>分布式。分布式的就需要一个存储节点维护当前接口的调用数，比如redis、sentinel等，这种方式由于涉及到远程调用，会有些性能损耗，另外也需要考虑到存储挂掉的问题，比如redis如果挂掉，网关需要考虑降级方案，是降级到本地限流，还是直接将限流功能本身降级掉。</li></ul><p>另外还有不同的策略:简单计数、令牌桶等，大部分场景下其实简单计数已经够用了，但如果需要支持突发流量等场景时，可以采用令牌桶等方案。还需要考虑根据什么限流，比如是IP、接口、用户维度、还是请求参数中的某些值，这里可以采用表达式，相对比较灵活。</p><h2 id="稳定性"><a href="#稳定性" class="headerlink" title="稳定性"></a><strong>稳定性</strong></h2><p>稳定性是网关非常重要的一环，监控、告警需要做的很完善才可以，比如接口调用量、响应时间、异常、错误码、成功率等相关的监控告警，还有线程池相关的一些，比如活跃线程数、队列积压等，还有些系统层面的，比如CPU、内存、FullGC这些基本的。</p><p>网关是所有服务的入口，对于网关的稳定性的要求相对于其他服务会更高，最好能够一直稳定的运行，尽量少重启，但当新增功能、或者加日志排查问题时，不可避免的需要重新发布，因此可以参考zuul的方式，将所有的核心功能都基于不同的拦截器实现，拦截器的代码采用Groovy编写，存储到数据库中，支持动态加载、编译、运行，这样在出了问题的时候能够第一时间定位并解决，并且如果网关需要开发新功能，只需要增加新的拦截器，并动态添加到网关即可，不需要重新发布。</p><h2 id="熔断降级"><a href="#熔断降级" class="headerlink" title="熔断降级"></a><strong>熔断降级</strong></h2><p>熔断机制也是非常重要的一项。若某一个服务挂掉、接口响应严重超时等发生，则可能整个网关都被一个接口拖垮，因此需要增加熔断降级，当发生特定异常的时候，对接口降级由网关直接返回，可以基于Hystrix或者Resilience4j实现。</p><h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a><strong>日志</strong></h2><p>由于所有的请求都是由网关处理的，因此日志也需要相对比较完善，比如接口的耗时、请求方式、请求IP、请求参数、响应参数(注意脱敏)等，另外由于可能涉及到很多微服务，因此需要提供一个统一的traceId方便关联所有的日志，可以将这个traceId置于响应头中，方便排查问题。</p><h2 id="隔离"><a href="#隔离" class="headerlink" title="隔离"></a><strong>隔离</strong></h2><p>比如线程池、http连接池、redis等应用层面的隔离，另外也可以根据业务场景，将核心业务部署带单独的网关集群，与其他非核心业务隔离开。</p><h2 id="网关管控平台"><a href="#网关管控平台" class="headerlink" title="网关管控平台"></a><strong>网关管控平台</strong></h2><p>这块也是非常重要的一环，需要考虑好整个流程的用户体验，比如接入到网关的这个流程，能不能尽量简化、智能，比如如果是dubbo接口，我们可以通过到git仓库中获取源码、解析对应的类、方法，从而实现自动填充，尽量帮用户减少操作；另外接口一般是从测试-&gt;预发-&gt;线上，如果每次都要填写一遍表单会非常麻烦，我们能不能自动把这个事情做掉，另外如果网关部署到了多个可用区、甚至不同的国家，那这个时候，我们还需要接口数据同步功能，不然用户需要到每个后台都操作一遍，非常麻烦。</p><p>这块个人的建议是直接参考阿里云、aws等提供的网关服务即可，功能非常全面。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a><strong>其他</strong></h2><p>其他还有些需要考虑到的点，比如接口mock，文档生成、sdk代码生成、错误码统一、服务治理相关的等，这里就不累述了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><p>目前的网关还是中心化的架构，所有的请求都需要走一次网关，因此当大促或者流量突增时，网关可能会成为性能的瓶颈，而且当网关接入的大量接口的时候，做好流量评估也不是一项容易的工作，每次大促前都需要跟业务方一起针对接口做压测，评估出大致的容量，并对网关进行扩容，而且网关是所有流量的入口，所有的请求都是由网关处理，要想准确的评估出容量很复杂。可以参考目前比较流行的ServiceMesh，采用去中心化的方案，将网关的逻辑下沉到sidecar中，sidecar和应用部署到同一个节点，并接管应用流入、流出的流量，这样大促时，只需要对相关的业务压测，并针对性扩容即可，另外升级也会更平滑，中心化的网关，即使灰度发布，但是理论上所有业务方的流量都会流入到新版本的网关，如果出了问题，会影响到所有的业务，但这种去中心化的方式，可以先针对非核心业务升级，观察一段时间没问题后，再全量推上线。另外ServiceMesh的方案，对于多语言支持也更友好。</p><p> 作者：aCoder2013<br> 链接：github.com/aCoder2013/blog/issues/35</p><p><strong>欢迎关注微信公众号​：</strong></p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006y8mN6gy1g7d3llw1nkj30b40b4wee.jpg" srcset="/img/loading.gif" alt="欢迎关注公众号" style="width: 100px" />]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Gateway</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>压缩20M文件从30秒到1秒的优化过程</title>
    <link href="/2019/11/20/%E5%8E%8B%E7%BC%A920M%E6%96%87%E4%BB%B6%E4%BB%8E30%E7%A7%92%E5%88%B01%E7%A7%92%E7%9A%84%E4%BC%98%E5%8C%96%E8%BF%87%E7%A8%8B/"/>
    <url>/2019/11/20/%E5%8E%8B%E7%BC%A920M%E6%96%87%E4%BB%B6%E4%BB%8E30%E7%A7%92%E5%88%B01%E7%A7%92%E7%9A%84%E4%BC%98%E5%8C%96%E8%BF%87%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<blockquote><p>文章来源公众号：<strong>IT牧场</strong></p></blockquote><p>有一个需求需要将前端传过来的10张照片，然后后端进行处理以后压缩成一个压缩包通过网络流传输出去。之前没有接触过用Java压缩文件的，所以就直接上网找了一个例子改了一下用了，改完以后也能使用，但是随着前端所传图片的大小越来越大的时候，耗费的时间也在急剧增加，最后测了一下压缩20M的文件竟然需要30秒的时间。压缩文件的代码如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">zipFileNoBuffer</span><span class="hljs-params">()</span> </span>&#123;<br>    File zipFile = <span class="hljs-keyword">new</span> File(ZIP_FILE);<br>    <span class="hljs-keyword">try</span> (ZipOutputStream zipOut = <span class="hljs-keyword">new</span> ZipOutputStream(<span class="hljs-keyword">new</span> FileOutputStream(zipFile))) &#123;<br>        <span class="hljs-comment">//开始时间</span><br>        <span class="hljs-keyword">long</span> beginTime = System.currentTimeMillis();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            <span class="hljs-keyword">try</span> (InputStream input = <span class="hljs-keyword">new</span> FileInputStream(JPG_FILE)) &#123;<br>                zipOut.putNextEntry(<span class="hljs-keyword">new</span> ZipEntry(FILE_NAME + i));<br>                <span class="hljs-keyword">int</span> temp = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">while</span> ((temp = input.read()) != -<span class="hljs-number">1</span>) &#123;<br>                    zipOut.write(temp);<br>                &#125;<br>            &#125;<br>        &#125;<br>        printInfo(beginTime);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里找了一张2M大小的图片，并且循环十次进行测试。打印的结果如下，时间大概是30秒。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">fileSize</span><span class="hljs-selector-pseudo">:20M</span><br><span class="hljs-selector-tag">consum</span> <span class="hljs-selector-tag">time</span><span class="hljs-selector-pseudo">:29599</span><br></code></pre></td></tr></table></figure><h2 id="第一次优化过程-从30秒到2秒"><a href="#第一次优化过程-从30秒到2秒" class="headerlink" title="第一次优化过程-从30秒到2秒"></a>第一次优化过程-从30秒到2秒</h2><p>进行优化首先想到的是利用<strong>缓冲区</strong><code>BufferInputStream</code>。在<code>FileInputStream</code>中<code>read()</code>方法每次只读取一个字节。源码中也有说明。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Reads a byte of data from this input stream. This method blocks</span><br><span class="hljs-comment"> * if no input is yet available.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span>     the next byte of data, or &lt;code&gt;-1&lt;/code&gt; if the end of the</span><br><span class="hljs-comment"> *             file is reached.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@exception</span>  IOException  if an I/O error occurs.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException</span>;<br></code></pre></td></tr></table></figure><p>这是一个调用本地方法与原生操作系统进行交互，从磁盘中读取数据。每读取一个字节的数据就调用一次本地方法与操作系统交互，是非常耗时的。例如我们现在有30000个字节的数据，如果使用<code>FileInputStream</code>那么就需要调用30000次的本地方法来获取这些数据，而如果使用缓冲区的话（这里假设初始的缓冲区大小足够放下30000字节的数据）那么只需要调用一次就行。因为缓冲区在第一次调用<code>read()</code>方法的时候会直接从磁盘中将数据直接读取到内存中。随后再一个字节一个字节的慢慢返回。</p><blockquote><p><code>BufferedInputStream</code>内部封装了一个byte数组用于存放数据，默认大小是8192</p></blockquote><p>优化过后的代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">zipFileBuffer</span><span class="hljs-params">()</span> </span>&#123;<br>    File zipFile = <span class="hljs-keyword">new</span> File(ZIP_FILE);<br>    <span class="hljs-keyword">try</span> (ZipOutputStream zipOut = <span class="hljs-keyword">new</span> ZipOutputStream(<span class="hljs-keyword">new</span> FileOutputStream(zipFile));<br>            BufferedOutputStream bufferedOutputStream = <span class="hljs-keyword">new</span> BufferedOutputStream(zipOut)) &#123;<br>        <span class="hljs-comment">//开始时间</span><br>        <span class="hljs-keyword">long</span> beginTime = System.currentTimeMillis();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            <span class="hljs-keyword">try</span> (BufferedInputStream bufferedInputStream = <span class="hljs-keyword">new</span> BufferedInputStream(<span class="hljs-keyword">new</span> FileInputStream(JPG_FILE))) &#123;<br>                zipOut.putNextEntry(<span class="hljs-keyword">new</span> ZipEntry(FILE_NAME + i));<br>                <span class="hljs-keyword">int</span> temp = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">while</span> ((temp = bufferedInputStream.read()) != -<span class="hljs-number">1</span>) &#123;<br>                    bufferedOutputStream.write(temp);<br>                &#125;<br>            &#125;<br>        &#125;<br>        printInfo(beginTime);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">------Buffer</span><br><span class="hljs-selector-tag">fileSize</span><span class="hljs-selector-pseudo">:20M</span><br><span class="hljs-selector-tag">consum</span> <span class="hljs-selector-tag">time</span><span class="hljs-selector-pseudo">:1808</span><br></code></pre></td></tr></table></figure><p>可以看到相比较于第一次使用<code>FileInputStream</code>效率已经提升了许多了</p><h2 id="第二次优化过程-从2秒到1秒"><a href="#第二次优化过程-从2秒到1秒" class="headerlink" title="第二次优化过程-从2秒到1秒"></a>第二次优化过程-从2秒到1秒</h2><p>使用缓冲区<code>buffer</code>的话已经是满足了我的需求了，但是秉着学以致用的想法，就想着用NIO中知识进行优化一下。</p><h3 id="使用Channel"><a href="#使用Channel" class="headerlink" title="使用Channel"></a>使用Channel</h3><p>为什么要用<code>Channel</code>呢？因为在NIO中新出了<code>Channel</code>和<code>ByteBuffer</code>。正是因为它们的结构更加符合操作系统执行I/O的方式，所以其速度相比较于传统IO而言速度有了显著的提高。<code>Channel</code>就像一个包含着煤矿的矿藏，而<code>ByteBuffer</code>则是派送到矿藏的卡车。也就是说我们与数据的交互都是与<code>ByteBuffer</code>的交互。</p><p>在NIO中能够产生<code>FileChannel</code>的有三个类。分别是<code>FileInputStream</code>、<code>FileOutputStream</code>、以及既能读又能写的<code>RandomAccessFile</code>。</p><p>源码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">zipFileChannel</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">//开始时间</span><br>    <span class="hljs-keyword">long</span> beginTime = System.currentTimeMillis();<br>    File zipFile = <span class="hljs-keyword">new</span> File(ZIP_FILE);<br>    <span class="hljs-keyword">try</span> (ZipOutputStream zipOut = <span class="hljs-keyword">new</span> ZipOutputStream(<span class="hljs-keyword">new</span> FileOutputStream(zipFile));<br>            WritableByteChannel writableByteChannel = Channels.newChannel(zipOut)) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            <span class="hljs-keyword">try</span> (FileChannel fileChannel = <span class="hljs-keyword">new</span> FileInputStream(JPG_FILE).getChannel()) &#123;<br>                zipOut.putNextEntry(<span class="hljs-keyword">new</span> ZipEntry(i + SUFFIX_FILE));<br>                fileChannel.transferTo(<span class="hljs-number">0</span>, FILE_SIZE, writableByteChannel);<br>            &#125;<br>        &#125;<br>        printInfo(beginTime);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们可以看到这里并没有使用<code>ByteBuffer</code>进行数据传输，而是使用了<code>transferTo</code>的方法。这个方法是将两个通道进行直连。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs csharp">This method <span class="hljs-keyword">is</span> potentially much more efficient than a simple loop<br>* that reads <span class="hljs-keyword">from</span> <span class="hljs-keyword">this</span> channel and writes to the target channel.  Many<br>* operating systems can transfer bytes directly <span class="hljs-keyword">from</span> the filesystem cache<br>* to the target channel without actually copying them.<br></code></pre></td></tr></table></figure><p>这是源码上的描述文字，大概意思就是使用<code>transferTo</code>的效率比循环一个<code>Channel</code>读取出来然后再循环写入另一个<code>Channel</code>好。操作系统能够直接传输字节从文件系统缓存到目标的<code>Channel</code>中，而不需要实际的<code>copy</code>阶段。</p><blockquote><p>copy阶段就是从内核空间转到用户空间的一个过程</p></blockquote><p>可以看到速度相比较使用缓冲区已经有了一些的提高。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">------Channel</span><br><span class="hljs-selector-tag">fileSize</span><span class="hljs-selector-pseudo">:20M</span><br><span class="hljs-selector-tag">consum</span> <span class="hljs-selector-tag">time</span><span class="hljs-selector-pseudo">:1416</span><br></code></pre></td></tr></table></figure><h4 id="内核空间和用户空间"><a href="#内核空间和用户空间" class="headerlink" title="内核空间和用户空间"></a>内核空间和用户空间</h4><p>那么为什么从内核空间转向用户空间这段过程会慢呢？首先我们需了解的是什么是内核空间和用户空间。在常用的操作系统中为了保护系统中的核心资源，于是将系统设计为四个区域，越往里权限越大，所以Ring0被称之为内核空间，用来访问一些关键性的资源。Ring3被称之为用户空间。</p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/13146186-38f92e6466efaf60.jpg" srcset="/img/loading.gif" alt="img"></p><p>image</p><blockquote><p>用户态、内核态：线程处于内核空间称之为内核态，线程处于用户空间属于用户态</p></blockquote><p>那么我们如果此时应用程序（应用程序是都属于用户态的）需要访问核心资源怎么办呢？那就需要调用内核中所暴露出的接口用以调用，称之为<strong>系统调用</strong>。例如此时我们应用程序需要访问磁盘上的文件。此时应用程序就会调用系统调用的接口<code>open</code>方法，然后内核去访问磁盘中的文件，将文件内容返回给应用程序。大致的流程如下</p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/13146186-53cc9499caddb485.jpg" srcset="/img/loading.gif" alt="img"></p><p>image</p><h4 id="直接缓冲区和非直接缓冲区"><a href="#直接缓冲区和非直接缓冲区" class="headerlink" title="直接缓冲区和非直接缓冲区"></a>直接缓冲区和非直接缓冲区</h4><p>既然我们要读取一个磁盘的文件，要废这么大的周折。有没有什么简单的方法能够使我们的应用直接操作磁盘文件，不需要内核进行中转呢？有，那就是建立直接缓冲区了。</p><ul><li><p>非直接缓冲区：非直接缓冲区就是我们上面所讲内核态作为中间人，每次都需要内核在中间作为中转。</p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/13146186-6bbfb5446221cb2d.jpg" srcset="/img/loading.gif" alt="img"></p><p>image</p></li><li><p>直接缓冲区：直接缓冲区不需要内核空间作为中转copy数据，而是直接在物理内存申请一块空间，这块空间映射到内核地址空间和用户地址空间，应用程序与磁盘之间数据的存取通过这块直接申请的物理内存进行交互。</p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/13146186-92211d2b9a85215e.jpg" srcset="/img/loading.gif" alt="img"></p><p>image</p></li></ul><p>既然直接缓冲区那么快，我们为什么不都用直接缓冲区呢？其实直接缓冲区有以下的缺点。直接缓冲区的缺点：</p><ol><li>不安全</li><li>消耗更多，因为它不是在JVM中直接开辟空间。这部分内存的回收只能依赖于垃圾回收机制，垃圾什么时候回收不受我们控制。</li><li>数据写入物理内存缓冲区中，程序就丧失了对这些数据的管理，即什么时候这些数据被最终写入从磁盘只能由操作系统来决定，应用程序无法再干涉。</li></ol><blockquote><p>综上所述，所以我们使用<code>transferTo</code>方法就是直接开辟了一段直接缓冲区。所以性能相比而言提高了许多</p></blockquote><h3 id="使用内存映射文件"><a href="#使用内存映射文件" class="headerlink" title="使用内存映射文件"></a>使用内存映射文件</h3><p>NIO中新出的另一个特性就是内存映射文件，内存映射文件为什么速度快呢？其实原因和上面所讲的一样，也是在内存中开辟了一段直接缓冲区。与数据直接作交互。源码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Version 4 使用Map映射文件</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">zipFileMap</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">//开始时间</span><br>    <span class="hljs-keyword">long</span> beginTime = System.currentTimeMillis();<br>    File zipFile = <span class="hljs-keyword">new</span> File(ZIP_FILE);<br>    <span class="hljs-keyword">try</span> (ZipOutputStream zipOut = <span class="hljs-keyword">new</span> ZipOutputStream(<span class="hljs-keyword">new</span> FileOutputStream(zipFile));<br>            WritableByteChannel writableByteChannel = Channels.newChannel(zipOut)) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br><br>            zipOut.putNextEntry(<span class="hljs-keyword">new</span> ZipEntry(i + SUFFIX_FILE));<br><br>            <span class="hljs-comment">//内存中的映射文件</span><br>            MappedByteBuffer mappedByteBuffer = <span class="hljs-keyword">new</span> RandomAccessFile(JPG_FILE_PATH, <span class="hljs-string">"r"</span>).getChannel()<br>                    .map(FileChannel.MapMode.READ_ONLY, <span class="hljs-number">0</span>, FILE_SIZE);<br><br>            writableByteChannel.write(mappedByteBuffer);<br>        &#125;<br>        printInfo(beginTime);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>打印如下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">---------Map</span><br><span class="hljs-selector-tag">fileSize</span><span class="hljs-selector-pseudo">:20M</span><br><span class="hljs-selector-tag">consum</span> <span class="hljs-selector-tag">time</span><span class="hljs-selector-pseudo">:1305</span><br></code></pre></td></tr></table></figure><p>可以看到速度和使用Channel的速度差不多的。</p><h3 id="使用Pipe"><a href="#使用Pipe" class="headerlink" title="使用Pipe"></a>使用Pipe</h3><p>Java NIO 管道是2个线程之间的单向数据连接。Pipe有一个source通道和一个sink通道。其中source通道用于读取数据，sink通道用于写入数据。可以看到源码中的介绍，大概意思就是写入线程会阻塞至有读线程从通道中读取数据。如果没有数据可读，读线程也会阻塞至写线程写入数据。直至通道关闭。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ruby">Whether <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> a thread writing bytes to a pipe will block <span class="hljs-keyword">until</span> another<br>thread reads those bytes<br></code></pre></td></tr></table></figure><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/13146186-3fbae68c65487c14.jpg" srcset="/img/loading.gif" alt="img"></p><p>image</p><p>我想要的效果是这样的。源码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Version 5 使用Pip</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">zipFilePip</span><span class="hljs-params">()</span> </span>&#123;<br><br>    <span class="hljs-keyword">long</span> beginTime = System.currentTimeMillis();<br>    <span class="hljs-keyword">try</span>(WritableByteChannel out = Channels.newChannel(<span class="hljs-keyword">new</span> FileOutputStream(ZIP_FILE))) &#123;<br>        Pipe pipe = Pipe.open();<br>        <span class="hljs-comment">//异步任务</span><br>        CompletableFuture.runAsync(()-&gt;runTask(pipe));<br><br>        <span class="hljs-comment">//获取读通道</span><br>        ReadableByteChannel readableByteChannel = pipe.source();<br>        ByteBuffer buffer = ByteBuffer.allocate(((<span class="hljs-keyword">int</span>) FILE_SIZE)*<span class="hljs-number">10</span>);<br>        <span class="hljs-keyword">while</span> (readableByteChannel.read(buffer)&gt;= <span class="hljs-number">0</span>) &#123;<br>            buffer.flip();<br>            out.write(buffer);<br>            buffer.clear();<br>        &#125;<br>    &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>        e.printStackTrace();<br>    &#125;<br>    printInfo(beginTime);<br><br>&#125;<br><br><span class="hljs-comment">//异步任务</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">runTask</span><span class="hljs-params">(Pipe pipe)</span> </span>&#123;<br><br>    <span class="hljs-keyword">try</span>(ZipOutputStream zos = <span class="hljs-keyword">new</span> ZipOutputStream(Channels.newOutputStream(pipe.sink()));<br>            WritableByteChannel out = Channels.newChannel(zos)) &#123;<br>        System.out.println(<span class="hljs-string">"Begin"</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            zos.putNextEntry(<span class="hljs-keyword">new</span> ZipEntry(i+SUFFIX_FILE));<br><br>            FileChannel jpgChannel = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-keyword">new</span> File(JPG_FILE_PATH)).getChannel();<br><br>            jpgChannel.transferTo(<span class="hljs-number">0</span>, FILE_SIZE, out);<br><br>            jpgChannel.close();<br>        &#125;<br>    &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>        e.printStackTrace();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>生活处处都需要学习，有时候只是一个简单的优化，可以让你深入学习到各种不同的知识。所以在学习中要不求甚解，不仅要知道这个知识也要了解为什么要这么做。</li><li>知行合一：学习完一个知识要尽量应用一遍。这样才能记得牢靠。</li></ul><h2 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h2><p><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fmodouxiansheng%2FDoraemon" target="_blank" rel="noopener">源码地址</a></p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="https://www.jianshu.com/p/f90866dcbffc" target="_blank" rel="noopener">https://www.jianshu.com/p/f90866dcbffc</a></li><li><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fjuejin.im%2Fpost%2F5af942c6f265da0b7026050c" target="_blank" rel="noopener">https://juejin.im/post/5af942c6f265da0b7026050c</a></li><li><a href="https://links.jianshu.com/go?to=https%3A%2F%2Ftime.geekbang.org%2Fcolumn%2Farticle%2F90109" target="_blank" rel="noopener">趣谈Linux操作系统</a></li><li><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fmy.oschina.net%2FhappyBKs%2Fblog%2F1592329" target="_blank" rel="noopener">JAVA NIO 直接缓冲区和非直接缓冲区</a></li></ul><p><strong>欢迎关注微信公众号​：</strong></p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006y8mN6gy1g7d3llw1nkj30b40b4wee-20200407103256742.jpg" srcset="/img/loading.gif" alt="欢迎关注公众号" style="width: 100px" />]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>IO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>重温乔布斯最经典演讲：求知若饥 虚心若愚</title>
    <link href="/2019/11/04/%E9%87%8D%E6%B8%A9%E4%B9%94%E5%B8%83%E6%96%AF%E6%9C%80%E7%BB%8F%E5%85%B8%E6%BC%94%E8%AE%B2%EF%BC%9A%E6%B1%82%E7%9F%A5%E8%8B%A5%E9%A5%A5-%E8%99%9A%E5%BF%83%E8%8B%A5%E6%84%9A/"/>
    <url>/2019/11/04/%E9%87%8D%E6%B8%A9%E4%B9%94%E5%B8%83%E6%96%AF%E6%9C%80%E7%BB%8F%E5%85%B8%E6%BC%94%E8%AE%B2%EF%BC%9A%E6%B1%82%E7%9F%A5%E8%8B%A5%E9%A5%A5-%E8%99%9A%E5%BF%83%E8%8B%A5%E6%84%9A/</url>
    
    <content type="html"><![CDATA[<p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymmi8zu7j30ev0ghq33.jpg" srcset="/img/loading.gif" alt="jobs"></p><p>　　Thank you. I am honored to be with you today at your commencement from one of the finest universities in the world. Truth be told, I never graduated from college. This is the closest I’ve ever gotten to a college graduation. Today I want to tell you three stories from my life. That’s it. No big deal. Just three stories.</p><p>　　很荣幸和大家一道参加这所世界上最好的一座大学的毕业典礼。我大学没毕业，说实话，这是我第一次离大学毕业典礼这么近。今天我想给大家讲三个我自己的故事，不讲别的，也不讲大道理，就讲三个故事。</p><p>　　The first story is about connecting the dots. I dropped out of Reed College after the first 6 months, but then stayed around as a drop-in for another 18 months or so before I really quit. So why did I drop out?</p><p>　　第一个故事讲的是点与点之间的关系。我在里德学院(Reed College)只读了六个月就退学了，此后便在学校里旁听，又过了大约一年半，我彻底离开。那么，我为什么退学呢?</p><p>　　It started before I was born. My biological mother was a young, unwed college graduate student, and she decided to put me up for adoption. She felt very strongly that I should be adopted by college graduates, so everything was all set for me to be adopted at birth by a lawyer and his wife. Except that when I popped out they decided at the last minute that they really wanted a girl. So my parents, who were on a waiting list, got a call in the middle of the night asking: “We have an unexpected baby boy; do you want him?” They said: “Of course.” My biological mother later found out that my mother had never graduated from college and that my father had never graduated from high school. She refused to sign the final adoption papers. She only relented a few months later when my parents promised that I would someday go to college.</p><p>　　这得从我出生前讲起。我的生母是一名年轻的未婚在校研究生，她决定将我送给别人收养。她非常希望收养我的是有大学学历的人，所以把一切都安排好了，我一出生就交给一对律师夫妇收养。没想到我落地的霎那间，那对夫妇却决定收养一名女孩。就这样，我的养父母─当时他们还在登记册上排队等着呢─半夜三更接到一个电话: “我们这儿有一个没人要的男婴，你们要么?”“当然要”他们回答。但是，我的生母后来发现我的养母不是大学毕业生，我的养父甚至连中学都没有毕业，所以她拒绝在最后的收养文件上签字。不过，没过几个月她就心软了，因为我的养父母许诺日后一定送我上大学。</p><p>　　And 17 years later I did go to college. But I naively chose a college that was almost as expensive as Stanford, and all of my working-class parents’ savings were being spent on my college tuition. After six months, I couldn’t see the value in it. I had no idea what I wanted to do with my life and no idea how college was going to help me figure it out. And here I was spending all of the money my parents had saved their entire life. So I decided to drop out and trust that it would all work out OK. It was pretty scary at the time, but looking back it was one of the best decisions I ever made. The minute I dropped out I could stop taking the required classes that didn’t interest me, and begin dropping in on the ones that looked interesting。It wasn’t all romantic. I didn’t have a dorm room, so I slept on the floor in friends’ rooms, I returned coke bottles for the 5? deposits to buy food with, and I would walk the 7 miles across town every Sunday night to get one good meal a week at the Hare Krishna temple. I loved it. And much of what I stumbled into by following my curiosity and intuition turned out to be priceless later on. Let me give you one example:</p><p>　　17 年后，我真的进了大学。当时我很天真，选了一所学费几乎和斯坦福大学一样昂贵的学校，当工人的养父母倾其所有的积蓄为我支付了大学学费。读了六个月后，我却看不出上学有什么意义。我既不知道自己这一生想干什么，也不知道大学是否能够帮我弄明白自己想干什么。这时，我就要花光父母一辈子节省下来的钱了。所以，我决定退学，并且坚信日后会证明我这样做是对的。当年做出这个决定时心里直打鼓，但现在回想起来，这还真是我有生以来做出的最好的决定之一。从退学那一刻起，我就可以不再选那些我毫无兴趣的必修课，开始旁听一些看上去有意思的课。那些日子一点儿都不浪漫。我没有宿舍，只能睡在朋友房间的地板上。我去退还可乐瓶，用那五分钱的押金来买吃的。每个星期天晚上我都要走七英里，到城那头的黑尔-科里施纳礼拜堂去，吃每周才能享用一次的美餐。我喜欢这样。我凭著好奇心和直觉所干的这些事情，有许多后来都证明是无价之宝。我给大家举个例子:</p><p>　　Reed College at that time offered perhaps the best calligraphy instruction in the country. Throughout the campus every poster, every label on every drawer, was beautifully hand calligraphed. Because I had dropped out and didn’t have to take the normal classes, I decided to take a calligraphy class to learn how to do this. I learned about serif and san serif typefaces, about varying the amount of space between different letter combinations, about what makes great typography great. It was beautiful, historical, artistically subtle in a way that science can’t capture, and I found it fascinating.</p><p>　　当时，里德学院的书法课大概是全国最好的。校园里所有的公告栏和每个抽屉标签上的字都写得非常漂亮。当时我已经退学，不用正常上课，所以我决定选一门书法课，学学怎么写好字。我学习写带短截线和不带短截线的印刷字体，根据不同字母组合调整其间距，以及怎样把版式调整得好上加好。这门课太棒了，既有历史价值，又有艺术造诣，这一点科学就做不到，而我觉得它妙不可言。</p><p>　　None of this had even a hope of any practical application in my life. But ten years later, when we were designing the first Macintosh computer, it all came back to me. And we designed it all into the Mac. It was the first computer with beautiful typography. If I had never dropped in on that single course in college, the Mac would have never had multiple typefaces or proportionally spaced fonts. And since Windows just copied the Mac, its likely that no personal computer would have them. If I had never dropped out, I would have never dropped in on this calligraphy class, and personal computers might not have the wonderful typography that they do. Of course it was impossible to connect the dots looking forward when I was in college. But it was very, very clear looking backwards ten years later.</p><p>　　当时我并不指望书法在以后的生活中能有什么实用价值。但是，十年之后，我们在设计第一台 Macintosh 计算机时，它一下子浮现在我眼前。于是，我们把这些东西全都设计进了计算机中。这是第一台有这么漂亮的文字版式的计算机。要不是我当初在大学里偶然选了这么一门课，Macintosh 计算机绝不会有那么多种印刷字体或间距安排合理的字号。要不是 Windows 照搬了 Macintosh，个人电脑可能不会有这些字体和字号。要不是退了学，我决不会碰巧选了这门书法课，个人电脑也可能不会有现在这些漂亮的版式了。当然，我在大学里不可能从这一点上看到它与将来的关系。十年之后再回头看，两者之间的关系就非常、非常清楚了。</p><p>　　Again, you can’t connect the dots looking forward; you can only connect them looking backwards. So you have to trust that the dots will somehow connect in your future. You have to trust in something — your gut, destiny, life, karma, whatever. This approach has never let me down, and it has made all the difference in my life.</p><p>　　你们同样不可能从现在这个点上看到将来;只有回头看时，才会发现它们之间的关系。所以，要相信这些点迟早会连接到一起。你们必须信赖某些东西─直觉、归宿、生命，还有业力，等等。这样做从来没有让我的希望落空过，而且还彻底改变了我的生活。</p><p>　　My second story is about love and loss. I was lucky — I found what I loved to do early in life. Woz and I started Apple in my parents garage when I was 20. We worked hard, and in 10 years Apple had grown from just the two of us in a garage into a $2 billion company with over 4000 employees. We had just released our finest creation — the Macintosh — a year earlier, and I had just turned 30. And then I got fired. How can you get fired from a company you started? Well, as Apple grew we hired someone who I thought was very talented to run the company with me, and for the first year or so things went well. But then our visions of the future began to diverge and eventually we had a falling out. When we did, our Board of Directors sided with him. So at 30 I was out. And very publicly out. What had been the focus of my entire adult life was gone, and it was devastating.</p><p>　　我的第二个故事是关于好恶与得失。幸运的是，我在很小的时候就发现自己喜欢做什么。我在 20 岁时和沃兹在我父母的车库里办起了苹果公司。我们干得很卖力，十年后，苹果公司就从车库里我们两个人发展成为一个拥有 20 亿元资产、4,000 名员工的大企业。那时，我们刚刚推出了我们最好的产品─ Macintosh 电脑─那是在第 9 年，我刚满 30 岁。可后来，我被解雇了。你怎么会被自己办的公司解雇呢?是这样，随著苹果公司越做越大，我们聘了一位我认为非常有才华的人与我一道管理公司。在开始的一年多里，一切都很顺利。可是，随后我俩对公司前景的看法开始出现分歧，最后我俩反目了。这时，董事会站在了他那一边，所以在 30 岁那年，我离开了公司，而且这件事闹得满城风雨。我成年后的整个生活重心都没有了，这使我心力交瘁。</p><p>　　I really didn’t know what to do for a few months. I felt that I had let the previous generation of entrepreneurs down - that I had dropped the baton as it was being passed to me. I met with David Packard and Bob Noyce and tried to apologize for screwing up so badly. I was a very public failure, and I even thought about running away from the valley. But something slowly began to dawn on me — I still loved what I did. The turn of events at Apple had not changed that one bit. I had been rejected, but I was still in love. And so I decided to start over.</p><p>　　一连几个月，我真的不知道应该怎么办。我感到自己给老一代的创业者丢了脸─因为我扔掉了交到自己手里的接力棒。我去见了戴维帕卡德和鲍勃.诺伊斯，想为把事情搞得这么糟糕说声道歉。这次失败弄得沸沸扬扬的，我甚至想过逃离硅谷。但是，渐渐地，我开始有了一个想法─我仍然热爱我过去做的一切。在苹果公司发生的这些风波丝毫没有改变这一点。我虽然被拒之门外，但我仍然深爱我的事业。于是，我决定从头开始。</p><p>　　I didn’t see it then, but it turned out that getting fired from Apple was the best thing that could have ever happened to me. The heaviness of being successful was replaced by the lightness of being a beginner again, less sure about everything. It freed me to enter one of the most creative periods of my life.</p><p>　　虽然当时我并没有意识到，但事实证明，被苹果公司炒鱿鱼是我一生中碰到的最好的事情。尽管前景未卜，但从头开始的轻松感取代了保持成功的沉重感。这使我进入了一生中最富有创造力的时期之一。</p><p>　　During the next five years, I started a company named NeXT, another company named Pixar, and fell in love with an amazing woman who would become my wife. Pixar went on to create the worlds first computer animated feature film, Toy Story, and is now the most successful animation studio in the world. In a remarkable turn of events, Apple bought NeXT, I retuned to Apple, and the technology we developed at NeXT is at the heart of Apple’s current renaissance. And Laurene and I have a wonderful family together.</p><p>　　在此后的五年里，我开了一家名叫 NeXT 的公司和一家叫皮克斯的公司，我还爱上一位了不起的女人，后来娶了她。皮克斯公司推出了世界上第一部用电脑制作的动画片《玩具总动员》(Toy Story)，它现在是全球最成功的动画制作室。世道轮回，苹果公司买下 NeXT 后，我又回到了苹果公司，我们在 NeXT 公司开发的技术成了苹果公司这次重新崛起的核心。我和劳伦娜(Laurene)也建立了美满的家庭。</p><p>　　I’m pretty sure none of this would have happened if I hadn’t been fired from Apple. It was awful tasting medicine, but I guess the patient needed it. Sometimes life hits you in the head with a brick. Don’t lose faith. I’m convinced that the only thing that kept me going was that I loved what I did. You’ve got to find what you love. And that is as true for your work as it is for your lovers. Your work is going to fill a large part of your life, and the only way to be truly satisfied is to do what you believe is great work. And the only way to do great work is to love what you do. If you haven’t found it yet, keep looking. Don’t settle. As with all matters of the heart, you’ll know when you find it. And, like any great relationship, it just gets better and better as the years roll on. So keep looking until you find it. Don’t settle.</p><p>　　我确信，如果不是被苹果公司解雇，这一切决不可能发生。这是一剂苦药，可我认为苦药利于病。有时生活会当头给你一棒，但不要灰心。我坚信让我一往无前的唯一力量就是我热爱我所做的一切。所以，一定得知道自己喜欢什么，选择爱人时如此，选择工作时同样如此。工作将是生活中的一大部分，让自己真正满意的唯一办法，是做自己认为是有意义的工作;做有意义的工作的唯一办法，是热爱自己的工作。你们如果还没有发现自己喜欢什么，那就不断地去寻找，不要急于做出决定。就像一切要凭着感觉去做的事情一样，一旦找到了自己喜欢的事，感觉就会告诉你。就像任何一种美妙的东西，历久弥新。所以说，要不断地寻找，直到找到自己喜欢的东西。不要半途而废。</p><p>　　My third story is about death. When I was 17, I read a quote that went something like: “If you live each day as if it was your last, someday you’ll most certainly be right.” It made an impression on me, and since then, for the past 33 years, I have looked in the mirror every morning and asked myself: “If today were the last day of my life, would I want to do what I am about to do today?” And whenever the answer has been “No” for too many days in a row, I know I need to change something.</p><p>　　我的第三个故事与死亡有关。17 岁那年，我读到过这样一段话，大意是:“如果把每一天都当作生命的最后一天，总有一天你会如愿以偿。”我记住了这句话，从那时起，33 年过去了，我每天早晨都对着镜子自问: “假如今天是生命的最后一天，我还会去做今天要做的事吗?”如果一连许多天我的回答都是“不”，我知道自己应该有所改变了。</p><p>　　Remembering that I’ll be dead soon is the most important tool I’ve ever encountered to help me make the big choices in life. Because almost everything — all external expectations, all pride, all fear of embarrassment or failure - these things just fall away in the face of death, leaving only what is truly important. Remembering that you are going to die is the best way I know to avoid the trap of thinking you have something to lose. You are already naked. There is no reason not to follow your heart.</p><p>　　让我能够做出人生重大抉择的最主要办法是，记住生命随时都有可能结束。因为几乎所有的东西─所有对自身之外的希求、所有的尊严、所有对困窘和失败的恐惧─在死亡来临时都将不复存在，只剩下真正重要的东西。记住自己随时都会死去，这是我所知道的防止患得患失的最好方法。你已经一无所有了，还有什么理由不跟着自己的感觉走呢。</p><p>　　About a year ago I was diagnosed with cancer. I had a scan at 7:30 in the morning, and it clearly showed a tumor on my pancreas. I didn’t even know what a pancreas was. The doctors told me this was almost certainly a type of cancer that is incurable, and that I should expect to live no longer than three to six months. My doctor advised me to go home and get my affairs in order, which is doctor’s code for prepare to die. It means to try to tell your kids everything you thought you’d have the next 10 years to tell them in just a few months. It means to make sure everything is buttoned up so that it will be as easy as possible for your family. It means to say your goodbyes. 　　</p><p>　　大约一年前，我被诊断患了癌症。那天早上七点半，我做了一次扫描检查，结果清楚地表明我的胰腺上长了一个瘤子，可那时我连胰腺是什么还不知道呢!医生告诉我说，几乎可以确诊这是一种无法治愈的恶性肿瘤，我最多还能活 3 到 6 个月。医生建议我回去把一切都安排好，其实这是在暗示“准备后事”。也就是说，把今后十年要跟孩子们说的事情在这几个月内嘱咐完;也就是说，把一切都安排妥当，尽可能不给家人留麻烦;也就是说，去跟大家诀别。</p><p>　　I lived with that diagnosis all day. Later that evening I had a biopsy, where they stuck an endoscope down my throat, through my stomach and into my intestines, put a needle into my pancreas and got a few cells from the tumor. I was sedated, but my wife, who was there, told me that when they viewed the cells under a microscope the doctors started crying because it turned out to be a very rare form of pancreatic cancer that is curable with surgery. I had the surgery and I’m fine now.</p><p>　　那一整天里，我的脑子一直没离开这个诊断。到了晚上，我做了一次组织切片检查，他们把一个内窥镜通过喉咙穿过我的胃进入肠子，用针头在胰腺的瘤子上取了一些细胞组织。当时我用了麻醉剂，陪在一旁的妻子后来告诉我，医生在显微镜里看了细胞之后叫了起来，原来这是一种少见的可以通过外科手术治愈的恶性肿瘤。我做了手术，现在好了。</p><p>　　This was the closest I’ve been to facing death, and I hope its the closest I get for a few more decades. Having lived through it, I can now say this to you with a bit more certainty than when death was a useful but purely intellectual concept:No one wants to die. Even people who want to go to heaven don’t want to die to get there. And yet death is the destination we all share. No one has ever escaped it. And that is as it should be, because Death is very likely the single best invention of Life. It is Life’s change agent. It clears out the old to make way for the new. Right now the new is you, but someday not too long from now, you will gradually become the old and be cleared away. Sorry to be so dramatic, but it is quite true.</p><p>　　这是我和死神离得最近的一次，我希望也是今后几十年里最近的一次。有了这次经历之后，现在我可以更加实在地和你们谈论死亡，而不是纯粹纸上谈兵，那就是: 谁都不愿意死。就是那些想进天堂的人也不愿意死后再进。然而，死亡是我们共同的归宿，没人能摆脱。我们注定会死，因为死亡很可能是生命最好的一项发明。它推进生命的变迁，旧的不去，新的不来。现在，你们就是新的，但在不久的将来，你们也会逐渐成为旧的，也会被淘汰。对不起，话说得太过分了，不过这是千真万确的。</p><p>　　Your time is limited, so don’t waste it living someone else’s life. Don’t be trapped by dogma — which is living with the results of other people’s thinking. Don’t let the noise of others’ opinions drown out your own inner voice. And most important, have the courage to follow your heart and intuition. They somehow already know what you truly want to become. Everything else is secondary.</p><p>　　你们的时间都有限，所以不要按照别人的意愿去活，这是浪费时间。不要囿于成见，那是在按照别人设想的结果而活。不要让别人观点的聒噪声淹没自己的心声。最主要的是，要有跟着自己感觉和直觉走的勇气。无论如何，感觉和直觉早就知道你到底想成为什么样的人，其他都是次要的。</p><p>　　When I was young, there was an amazing publication called The Whole Earth Catalog, which was one of the bibles of my generation. It was created by a fellow named Stewart Brand not far from here in Menlo Park, and he brought it to life with his poetic touch. This was in the late 1960’s, before personal computers and desktop publishing, so it was all made with typewriters, scissors, and polaroid cameras. It was sort of like Google in paperback form, 35 years before Google came along: it was idealistic, and overflowing with neat tools and great notions.</p><p>　　我年轻时有一本非常好的刊物，叫《全球概览》，这是我那代人的宝书之一，创办人名叫斯图尔特布兰德，就住在离这儿不远的门洛帕克市。他用诗一般的语言把刊物办得生动活泼。那是 20 世纪 60 年代末，还没有个人电脑和桌面印刷系统，全靠打字机、剪刀和宝丽莱照相机。它就像一种纸质的 Google，却比 Google 早问世了 35 年。这份刊物太完美了，查阅手段齐备、构思不凡。</p><p>　　Stewart and his team put out several issues of The Whole Earth Catalog, and then when it had run its course, they put out a final issue. It was the mid-1970s, and I was your age. On the back cover of their final issue was a photograph of an early morning country road, the kind you might find yourself hitchhiking on if you were so adventurous. Beneath it were the words: “Stay Hungry. Stay Foolish.” It was their farewell message as they signed off. Stay Hungry. Stay Foolish. And I have always wished that for myself.</p><p>　　斯图尔特和他的同事们出了好几期《全球概览》，到最后办不下去时，他们出了最后一期。那是 20 世纪 70 年代中期，我也就是你们现在的年纪。最后一期的封底上是一张清晨乡间小路的照片，就是那种爱冒险的人等在那儿搭便车的那种小路。照片下面写道: 好学若饥、谦卑若愚。那是他们停刊前的告别辞。求知若渴，大智若愚。这也是我一直想做到的。</p><p>　　And now, as you graduate to begin anew, I wish that for you. Stay Hungry. Stay Foolish.</p><p>　　眼下正值诸位大学毕业、开始新生活之际，我同样愿大家：好学若饥、谦卑若愚。</p><p>视频链接</p><p><a href="https://v.qq.com/x/page/k0550leuhtu.html?new=1" target="_blank" rel="noopener">https://v.qq.com/x/page/k0550leuhtu.html?new=1</a></p><hr><p><strong>乔布斯英文名句</strong></p><ol><li><p>“a leader and a follower innovation distinguishes between.”</p><p>“领袖和跟风者的区别就在于创新。”</p></li><li><p>“become a prominent pronoun, some people aren’t used to an environment quality.”<br>“成为卓越的代名词，很多人并不能适合需要杰出素质的环境。”</p></li><li><p>“the only way to accomplish something weiye is deeply love own enterprise. If you haven’t been able to find let oneself love career, continue to search, don’t give up. Follow your heart, someday you’ll find it.”</p><p>“成就一番伟业的唯一途径就是热爱自己的事业。如果你还没能找到让自己热爱的事业，继续寻找，不要放弃。跟随自己的心，总有一天你会找到的。”</p></li><li><p>“not everyone needs grew their own food, also not everyone needs doing their own wear clothes, we speak the language, use the others invention of mathematical invention others… we have been using someone else’s results. Use human existing Experience and knowledge to make inventions is a very great things. “</p><p>“并不是每个人都需要种植自己的粮食，也不是每个人都需要做自己穿的衣服，我们说着别人发明的语言，使用别人发明的数学…我们一直在使用别人的成果。使用人类的已有经验和知识来进行发明创造是一件很了不起的事情。”</p></li><li><p>“there’s a phrase in Buddhism, ‘beginner’s mind. have a beginner’s mind is a wonderful thing.”</p><p>“佛教中有一句话：初学者的心态；拥有初学者的心态是件了不起的事情。”</p></li><li><p>“we think watching TV, when people’s brains basic stop work on your computer when you want to turn your brain.”</p><p>“我们认为看电视的时候，人的大脑基本停止工作，打开电脑的时候，大脑才开始运转。”</p></li></ol><p><strong>欢迎关注微信公众号​：</strong></p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006y8mN6gy1g7d3llw1nkj30b40b4wee.jpg" srcset="/img/loading.gif" alt="欢迎关注公众号" style="width: 100px" />]]></content>
    
    
    <categories>
      
      <category>Other</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Other</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jenkins构建工具集成</title>
    <link href="/2019/11/03/Jenkins%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7%E9%9B%86%E6%88%90/"/>
    <url>/2019/11/03/Jenkins%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7%E9%9B%86%E6%88%90/</url>
    
    <content type="html"><![CDATA[<blockquote><p>来源公众号： DevOps持续集成</p></blockquote><h2 id="1-集成maven"><a href="#1-集成maven" class="headerlink" title="1. 集成maven"></a>1. 集成maven</h2><h3 id="1-1-先决条件"><a href="#1-1-先决条件" class="headerlink" title="1.1 先决条件"></a>1.1 先决条件</h3><ul><li>JDK：在maven3.3 以上的版本需要JDK版本1.7+。内存：没有最低限制。</li><li>磁盘：1G+可用磁盘空间。操作系统：没有限制。</li><li>下载maven <a href="http://maven.apache.org/download.cgi" target="_blank" rel="noopener">Download</a></li></ul><h3 id="1-2-安装maven"><a href="#1-2-安装maven" class="headerlink" title="1.2 安装maven"></a>1.2 安装maven</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar zxf apache-maven-3.6.0-bin.tar.gz -C /usr/<span class="hljs-built_in">local</span>/<br><span class="hljs-comment">#设置全局变量（/etc/profile）</span><br><span class="hljs-built_in">export</span> MAVEN_HOME=/usr/<span class="hljs-built_in">local</span>/apache-maven-3.6.0<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$MAVEN_HOME</span>/bin<br><span class="hljs-built_in">source</span> /etc/profile<br></code></pre></td></tr></table></figure><h3 id="1-3-Jenkins配置maven"><a href="#1-3-Jenkins配置maven" class="headerlink" title="1.3 Jenkins配置maven"></a>1.3 Jenkins配置maven</h3><ul><li><p>系统设置-&gt;全局工具配置 <img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymn3b3fwj30o007xweq.jpg" srcset="/img/loading.gif" alt=""></p></li><li><p>编写Jenkinsfile</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">node &#123;<br>    stage (<span class="hljs-string">"build"</span>)&#123;<br>        mavenHome = tool <span class="hljs-string">'M3'</span><br>        sh <span class="hljs-string">"<span class="hljs-variable">$&#123;mavenHome&#125;</span>/bin/mvn -v"</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><ul><li>构建测试 <img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymn49lvrj30o00e4my9.jpg" srcset="/img/loading.gif" alt="">到此jenkins集成maven就完成了。</li></ul><h3 id="1-4-maven常用命令"><a href="#1-4-maven常用命令" class="headerlink" title="1.4 maven常用命令"></a>1.4 maven常用命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">clean install -DskipTests<br>clean package<br></code></pre></td></tr></table></figure><h2 id="2-集成Ant"><a href="#2-集成Ant" class="headerlink" title="2. 集成Ant"></a>2. 集成Ant</h2><h3 id="2-1-先决条件"><a href="#2-1-先决条件" class="headerlink" title="2.1 先决条件"></a>2.1 先决条件</h3><ul><li>下载：<a href="https://ant.apache.org/bindownload.cgi" target="_blank" rel="noopener">Download</a><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymn4sopmj30kw0413z4.jpg" srcset="/img/loading.gif" alt=""></li></ul><h3 id="2-2-安装ant"><a href="#2-2-安装ant" class="headerlink" title="2.2 安装ant"></a>2.2 安装ant</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar zxf apache-ant-1.10.5-bin.tar.gz -C /usr/<span class="hljs-built_in">local</span>/<br><span class="hljs-comment">#添加全局变量（/etc/profile）</span><br><span class="hljs-built_in">export</span> ANT_HOME=/usr/<span class="hljs-built_in">local</span>/apache-ant-1.10.5<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$MAVEN_HOME</span>/bin:<span class="hljs-variable">$ANT_HOME</span>/bin<br><span class="hljs-built_in">source</span> /etc/profile<br></code></pre></td></tr></table></figure><ul><li>测试 <img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymn644tjj30mw020jrn.jpg" srcset="/img/loading.gif" alt=""></li></ul><h3 id="2-3-Jenkins配置ant"><a href="#2-3-Jenkins配置ant" class="headerlink" title="2.3 Jenkins配置ant"></a>2.3 Jenkins配置ant</h3><ul><li><p>系统设置-&gt;全局工具配置</p></li><li><p>编写Jenkinsfile</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">node &#123;<br>    stage (<span class="hljs-string">"build"</span>)&#123;<br>        antHome = tool <span class="hljs-string">'ANT'</span><br>        sh <span class="hljs-string">"<span class="hljs-variable">$&#123;antHome&#125;</span>/bin/ant -version"</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><ul><li><p>构建测试</p><p> <img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymn730xij30m807rq3e.jpg" srcset="/img/loading.gif" alt=""> 到此ant的集成就完成了</p></li></ul><h3 id="2-4-Ant常用命令"><a href="#2-4-Ant常用命令" class="headerlink" title="2.4 Ant常用命令"></a>2.4 Ant常用命令</h3><p><code>ant -buildfile -f build.xml</code></p><h2 id="3-集成Gradle"><a href="#3-集成Gradle" class="headerlink" title="3. 集成Gradle"></a>3. 集成Gradle</h2><h3 id="3-1-先决条件"><a href="#3-1-先决条件" class="headerlink" title="3.1 先决条件"></a>3.1 先决条件</h3><p> <img src="https://tva1.sinaimg.cn/large/006tNbRwgy1g9ymn7mrf3j30gd062wey.jpg" srcset="/img/loading.gif" alt=""></p><ul><li>下载:<a href="https://downloads.gradle.org/distributions/gradle-5.3-bin.zip" target="_blank" rel="noopener">Download</a></li></ul><h3 id="3-2-安装Gradle"><a href="#3-2-安装Gradle" class="headerlink" title="3.2 安装Gradle"></a>3.2 安装Gradle</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">unzip gradle-5.3-bin.zip -d /usr/<span class="hljs-built_in">local</span>/<br><span class="hljs-comment">#添加全局变量（/etc/profile）</span><br><span class="hljs-built_in">export</span> GRADLE_HOME=/usr/<span class="hljs-built_in">local</span>/gradle-5.3<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>: <span class="hljs-variable">$GRADLE_HOME</span>/bin<br><span class="hljs-built_in">source</span> /etc/profile<br></code></pre></td></tr></table></figure><h3 id="3-3-Jenkins配置gradle"><a href="#3-3-Jenkins配置gradle" class="headerlink" title="3.3 Jenkins配置gradle"></a>3.3 Jenkins配置gradle</h3><ul><li><p>系统设置-&gt;全局工具配置</p></li><li><p>编写Jenkinsfile</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">node &#123;<br>    stage (<span class="hljs-string">"gradlebuild"</span>)&#123;<br>        gradleHome = tool <span class="hljs-string">'GRADLE'</span><br>        sh <span class="hljs-string">"<span class="hljs-variable">$&#123;gradleHome&#125;</span>/bin/gradle -v"</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><ul><li>构建测试 <img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymn82gi8j30l20cu74x.jpg" srcset="/img/loading.gif" alt="">到此jenkins配置gradle完成</li></ul><h3 id="3-4-Gradle常用命令"><a href="#3-4-Gradle常用命令" class="headerlink" title="3.4 Gradle常用命令"></a>3.4 Gradle常用命令</h3><ul><li>./gradlew -v 版本号，首次运行，没有gradle的要下载的哦。</li><li>./gradlew clean 删除HelloWord/app目录下的build文件夹</li><li>./gradlew build 检查依赖并编译打包</li><li>./gradlew assembleDebug 编译并打Debug包</li><li>./gradlew assembleRelease 编译并打Release的包</li><li>./gradlew installRelease Release模式打包并安装</li><li>./gradlew uninstallRelease 卸载Release模式包</li></ul><h2 id="4-集成NPM"><a href="#4-集成NPM" class="headerlink" title="4.集成NPM"></a>4.集成NPM</h2><h3 id="4-1-先决条件"><a href="#4-1-先决条件" class="headerlink" title="4.1 先决条件"></a>4.1 先决条件</h3><ul><li>下载<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">Download</a></li></ul><h3 id="4-2-安装Node"><a href="#4-2-安装Node" class="headerlink" title="4.2 安装Node"></a>4.2 安装Node</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar xf node-v10.15.3-linux-x64.tar.xz -C /usr/<span class="hljs-built_in">local</span>/<br><span class="hljs-comment">#添加全局变量（/etc/profile）</span><br><span class="hljs-built_in">export</span> NODE_HOME=/usr/<span class="hljs-built_in">local</span>/node-v10.15.3-linux-x64<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>: <span class="hljs-variable">$NODE_HOME</span>/bin<br><span class="hljs-built_in">source</span> /etc/profile<br></code></pre></td></tr></table></figure><ul><li>测试</li></ul><h3 id="4-3-Jenkins配置Npm"><a href="#4-3-Jenkins配置Npm" class="headerlink" title="4.3 Jenkins配置Npm"></a>4.3 Jenkins配置Npm</h3><ul><li><p>在Jenkins全局工具配置中并没有node，可以直接通过Jenkinsfile定义使用。</p></li><li><p>Jenkinsfile</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">node &#123;<br>    stage (<span class="hljs-string">"npmbuild"</span>)&#123;<br>        sh <span class="hljs-string">""</span><span class="hljs-string">"</span><br><span class="hljs-string">           export npmHome=/usr/local/node-v10.15.3-linux-x64</span><br><span class="hljs-string">           export PATH=\$PATH:\$npmHome/bin</span><br><span class="hljs-string">           npm -v</span><br><span class="hljs-string">           "</span><span class="hljs-string">""</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><ul><li>构建测试</li></ul><h3 id="4-4-Npm常用构建命令"><a href="#4-4-Npm常用构建命令" class="headerlink" title="4.4 Npm常用构建命令"></a>4.4 Npm常用构建命令</h3><p><code>npm install &amp;&amp; npm run build</code></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymn8kwtuj30o00ajwf3.jpg" srcset="/img/loading.gif" alt=""></p><p><strong>欢迎关注微信公众号​：</strong></p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006y8mN6gy1g7d3llw1nkj30b40b4wee.jpg" srcset="/img/loading.gif" alt="欢迎关注公众号" style="width: 100px" />]]></content>
    
    
    <categories>
      
      <category>Jenkins</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Jenkins</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jenkins用户权限授权管理</title>
    <link href="/2019/11/03/Jenkins%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E6%8E%88%E6%9D%83%E7%AE%A1%E7%90%86/"/>
    <url>/2019/11/03/Jenkins%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E6%8E%88%E6%9D%83%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<blockquote><p>来源公众号： DevOps持续集成</p></blockquote><p><em>1.创建role</em></p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymm1tit7j30u00g53zf.jpg" srcset="/img/loading.gif" alt=""></p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymm2z33hj30u00eiwfg.jpg" srcset="/img/loading.gif" alt=""></p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymm3wg6xj30u00l3js1.jpg" srcset="/img/loading.gif" alt=""></p><p><em>2.授权插件API</em></p><h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">method:POST<br>url: http://demo.com:<span class="hljs-number">8080</span>/securityRealm/createAccountByAdmin<br><span class="hljs-keyword">data</span>: &#123;<span class="hljs-string">"username"</span>: userName, <span class="hljs-string">"password1"</span>: <span class="hljs-string">'123456'</span>, <span class="hljs-string">"password2"</span>: <span class="hljs-string">'123456'</span>, <span class="hljs-string">"fullname"</span> : userName,<span class="hljs-string">"email"</span> : userName + <span class="hljs-string">'@jenkins.com'</span>&#125;<br></code></pre></td></tr></table></figure><h3 id="用户授权插件"><a href="#用户授权插件" class="headerlink" title="用户授权插件"></a>用户授权插件</h3><pre><code>method:POSTurl:http://demo.com:8080/role-strategy/strategy/assignRoleroletype: globalRoles projectRolesdata : {&apos;type&apos;: &apos;globalRoles&apos;,&apos;roleName&apos;: roleName,&apos;sid&apos;: userName}</code></pre><h2 id="脚本内容-Python"><a href="#脚本内容-Python" class="headerlink" title="脚本内容(Python)"></a>脚本内容(Python)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#coding:utf8</span><br><br><span class="hljs-comment">#用户授权脚本</span><br><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">auth</span><span class="hljs-params">(object)</span>:</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self)</span>:</span><br>        self.Jenkins = &#123;<span class="hljs-string">"url"</span>:<span class="hljs-string">"http://deme.com:8080/role-strategy/strategy/assignRole"</span>,<br>                         <span class="hljs-string">"passwd"</span>:<span class="hljs-string">"xxxxxxxxxxxx"</span>&#125;<br><br>    <span class="hljs-comment">#创建用户</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Create</span><span class="hljs-params">(self,userName)</span>:</span><br>        uurl=<span class="hljs-string">"http://demo.com:8080/securityRealm/createAccountByAdmin"</span><br>        refdata = &#123;<span class="hljs-string">"username"</span>: userName,<br>                   <span class="hljs-string">"password1"</span>: <span class="hljs-string">'123456'</span>,<br>                   <span class="hljs-string">"password2"</span>: <span class="hljs-string">'123456'</span>,<br>                   <span class="hljs-string">"fullname"</span> : userName,<br>                   <span class="hljs-string">"email"</span> : userName + <span class="hljs-string">'@jenkins.com'</span>&#125;<br><br>        response = requests.post(uurl,data=refdata,auth=(<span class="hljs-string">'admin'</span>,self.Jenkins[<span class="hljs-string">"passwd"</span>]))<br>        <span class="hljs-comment">#print(response.status_code,response.text)</span><br><br>    <span class="hljs-comment">#授权</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Grant</span><span class="hljs-params">(self,roleType,roleName,userName)</span>:</span><br>        self.Create(userName)<br>        <span class="hljs-keyword">if</span> roleType == <span class="hljs-string">"global"</span> :<br>            data = &#123;<span class="hljs-string">'type'</span>: <span class="hljs-string">'globalRoles'</span>,<span class="hljs-string">'roleName'</span>: roleName,<span class="hljs-string">'sid'</span>: userName&#125;<br>        <span class="hljs-keyword">elif</span> roleType == <span class="hljs-string">"project"</span> :<br>            data = &#123;<span class="hljs-string">'type'</span>: <span class="hljs-string">'projectRoles'</span>,<span class="hljs-string">'roleName'</span>: roleName,<span class="hljs-string">'sid'</span>: userName&#125;<br><br>        response = requests.post(self.Jenkins[<span class="hljs-string">"url"</span>],<br>                                data=data,<br>                                auth=(<span class="hljs-string">'admin'</span>, self.Jenkins[<span class="hljs-string">"passwd"</span>]))<br>        print(response.status_code,response.text)<br><br>        <span class="hljs-keyword">return</span> int(response.status_code)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:<br>    <span class="hljs-keyword">if</span>  sys.argv[<span class="hljs-number">1</span>] == <span class="hljs-string">"help"</span>:<br>        print(<span class="hljs-string">"1. 添加用户到users.txt中，每行一个."</span>)<br>        print(<span class="hljs-string">"2. python role.py  global globalName"</span>)<br>        print(<span class="hljs-string">"3. python role.py  project projectName"</span>)<br>    <span class="hljs-keyword">else</span>:<br>        server = auth()<br>        roleType = sys.argv[<span class="hljs-number">1</span>]<br>        roleName = sys.argv[<span class="hljs-number">2</span>]<br><br>        <span class="hljs-comment">#get users</span><br>        f = open(<span class="hljs-string">"users.txt"</span>,<span class="hljs-string">"r"</span>)<br>        users = f.readlines()<br>        f.close()<br><br>        <span class="hljs-comment">#do grant</span><br>        <span class="hljs-keyword">for</span> user <span class="hljs-keyword">in</span> users :<br>            result = server.Grant(roleType,roleName,user)<br>            <span class="hljs-keyword">if</span> result &lt;=<span class="hljs-number">400</span> :<br>                print(<span class="hljs-string">"---&gt;&#123;0&#125;--&gt;&#123;1&#125;--&gt;&#123;2&#125; ---&gt;Success!"</span>.format(user,roleType,roleName))<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">"---&gt;&#123;0&#125;--&gt;&#123;1&#125;--&gt;&#123;2&#125; ---&gt;Error!"</span>.format(user,roleType,roleName))<br></code></pre></td></tr></table></figure><p>users.txt</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tex">zhangsan<br>lisi<br>wangwu<br></code></pre></td></tr></table></figure><p><em>最后：创建一个jenkins参数化job来管理用户的授权。</em></p><p><strong>欢迎关注微信公众号​：</strong></p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006y8mN6gy1g7d3llw1nkj30b40b4wee.jpg" srcset="/img/loading.gif" alt="欢迎关注公众号" style="width: 100px" />]]></content>
    
    
    <categories>
      
      <category>Jenkins</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Jenkins</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jenkins项目、视图、插件管理</title>
    <link href="/2019/11/03/Jenkins%E9%A1%B9%E7%9B%AE%E3%80%81%E8%A7%86%E5%9B%BE%E3%80%81%E6%8F%92%E4%BB%B6%E7%AE%A1%E7%90%86/"/>
    <url>/2019/11/03/Jenkins%E9%A1%B9%E7%9B%AE%E3%80%81%E8%A7%86%E5%9B%BE%E3%80%81%E6%8F%92%E4%BB%B6%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<blockquote><p>来源公众号： DevOps持续集成</p></blockquote><h2 id="1-项目管理"><a href="#1-项目管理" class="headerlink" title="1. 项目管理"></a>1. 项目管理</h2><h3 id="1-1-命名规范"><a href="#1-1-命名规范" class="headerlink" title="1.1 命名规范"></a>1.1 命名规范</h3><ul><li>业务名称-应用名称-应用类型_环境类型： cxy-wlck-ui_TEST, 只有命名规范才方便管理项目。</li></ul><h3 id="1-2-新建项目"><a href="#1-2-新建项目" class="headerlink" title="1.2 新建项目"></a>1.2 新建项目</h3><ul><li><p>管理页面</p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymqjv0iuj30o00e6dh5.jpg" srcset="/img/loading.gif" alt=""></p></li><li><p>设置构建历史 <img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymqksrhqj30o009jjrs.jpg" srcset="/img/loading.gif" alt="管理页面"></p></li><li><p>选择参数化构建 <img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymqmnw1pj30o00dp0t9.jpg" srcset="/img/loading.gif" alt="管理页面"></p></li><li><p>设置构建触发器 <img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymqn45u6j30o009qt9c.jpg" srcset="/img/loading.gif" alt="管理页面"></p></li><li><p>设置Jenkinsfile <img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymqnuhrwj30o00dp0t1.jpg" srcset="/img/loading.gif" alt="管理页面"></p></li><li><p>构建项目 <img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymqp4ydkj30o007et96.jpg" srcset="/img/loading.gif" alt="管理页面"></p></li><li><p>查看构建日志<img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymqpyesbj30o00ajmxv.jpg" srcset="/img/loading.gif" alt="管理页面"></p></li><li><p>调试Pipeline <img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymqqfr9mj30o00c9gme.jpg" srcset="/img/loading.gif" alt="管理页面"></p></li></ul><h3 id="1-3-删除-禁用项目"><a href="#1-3-删除-禁用项目" class="headerlink" title="1.3 删除/禁用项目"></a>1.3 删除/禁用项目</h3><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymqsivgdj30o00d20tz.jpg" srcset="/img/loading.gif" alt="管理页面"></p><h3 id="1-4-项目分类"><a href="#1-4-项目分类" class="headerlink" title="1.4 项目分类"></a>1.4 项目分类</h3><ul><li>以业务简称为名，创建工程文件夹。将同一个业务的工程全部放到同一个文件夹中。</li><li><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymqun77cj30o00gdtab.jpg" srcset="/img/loading.gif" alt="管理页面"></li><li>移动项目 <img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymqvkxikj30o009bdgk.jpg" srcset="/img/loading.gif" alt="管理页面"></li><li><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymqzfoxwj30o006dt90.jpg" srcset="/img/loading.gif" alt="管理页面"></li><li>外部 <img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymr0tgr3j30o004kq2z.jpg" srcset="/img/loading.gif" alt="管理页面"></li><li>内部 <img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymr1s9rvj30o007edg5.jpg" srcset="/img/loading.gif" alt="管理页面"></li></ul><h2 id="2-视图管理"><a href="#2-视图管理" class="headerlink" title="2. 视图管理"></a>2. 视图管理</h2><ul><li>默认会创建一个all视图里面存放所有的项目。</li></ul><h3 id="2-1-创建视图"><a href="#2-1-创建视图" class="headerlink" title="2.1 创建视图"></a>2.1 创建视图</h3><ul><li>凭据-&gt; 系统-&gt; 全局凭据</li><li><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymr31lv4j30o007rgly.jpg" srcset="/img/loading.gif" alt="管理页面"></li><li><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymr51wdtj30o00870t1.jpg" srcset="/img/loading.gif" alt="管理页面"></li><li><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymr7pr3qj30o00ivdgq.jpg" srcset="/img/loading.gif" alt="管理页面"></li><li><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymra3m95j30o005wq34.jpg" srcset="/img/loading.gif" alt="管理页面"></li></ul><h3 id="2-2-删除视图"><a href="#2-2-删除视图" class="headerlink" title="2.2 删除视图"></a>2.2 删除视图</h3><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymrb1gsvj30o006h74o.jpg" srcset="/img/loading.gif" alt="管理页面"></p><h3 id="2-3-更新视图"><a href="#2-3-更新视图" class="headerlink" title="2.3 更新视图"></a>2.3 更新视图</h3><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymrc2gcjj30o006vmxl.jpg" srcset="/img/loading.gif" alt="管理页面"></p><h2 id="3-插件管理"><a href="#3-插件管理" class="headerlink" title="3. 插件管理"></a>3. 插件管理</h2><ul><li>系统设置-&gt;插件管理。<br><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymrcwyspj30o0078mxq.jpg" srcset="/img/loading.gif" alt="管理页面"></li></ul><h3 id="3-1-安装插件"><a href="#3-1-安装插件" class="headerlink" title="3.1 安装插件"></a>3.1 安装插件</h3><ul><li>勾选要安装的插件，选择安装后不重启。（有些插件需要安装后重启）</li></ul><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymrev3rtj30o00gjta9.jpg" srcset="/img/loading.gif" alt="管理页面"></p><ul><li>安装<br><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymrft7ohj30o009uq3j.jpg" srcset="/img/loading.gif" alt="管理页面"></li></ul><h3 id="3-2-卸载插件"><a href="#3-2-卸载插件" class="headerlink" title="3.2 卸载插件"></a>3.2 卸载插件</h3><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymrgni6pj30o004gt8v.jpg" srcset="/img/loading.gif" alt="管理页面"></p><h3 id="3-3-上传插件"><a href="#3-3-上传插件" class="headerlink" title="3.3 上传插件"></a>3.3 上传插件</h3><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymrhlcdbj30o006lglu.jpg" srcset="/img/loading.gif" alt="管理页面"></p><h3 id="3-4-切换插件更新站点"><a href="#3-4-切换插件更新站点" class="headerlink" title="3.4 切换插件更新站点"></a>3.4 切换插件更新站点</h3><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymrjody2j30o004i0ss.jpg" srcset="/img/loading.gif" alt="管理页面"></p><p><strong>欢迎关注微信公众号​：</strong></p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006y8mN6gy1g7d3llw1nkj30b40b4wee.jpg" srcset="/img/loading.gif" alt="欢迎关注公众号" style="width: 100px" />]]></content>
    
    
    <categories>
      
      <category>Jenkins</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Jenkins</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jenkins用户、凭据、权限管理</title>
    <link href="/2019/11/03/Jenkins%E7%94%A8%E6%88%B7%E3%80%81%E5%87%AD%E6%8D%AE%E3%80%81%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/"/>
    <url>/2019/11/03/Jenkins%E7%94%A8%E6%88%B7%E3%80%81%E5%87%AD%E6%8D%AE%E3%80%81%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<blockquote><p>来源公众号： DevOps持续集成</p></blockquote><h2 id="1-用户管理"><a href="#1-用户管理" class="headerlink" title="1. 用户管理"></a>1. 用户管理</h2><ul><li><p>配置用户接入入口: 系统管理-&gt;全局安全配置。</p></li><li><p>默认使用的是Jenkins数据库存储。</p></li><li><p>可以选择集成LDAP服务或者是GItlab服务（需要安装插件后才会有）。</p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymt45ftfj30o00bk0t1.jpg" srcset="/img/loading.gif" alt=""></p></li></ul><h3 id="1-1-查看用户"><a href="#1-1-查看用户" class="headerlink" title="1.1 查看用户"></a>1.1 查看用户</h3><ul><li>以使用Jenkins专有数据库为例，用户管理入口: 系统管理-&gt; 管理用户</li></ul><h3 id="1-2-创建用户"><a href="#1-2-创建用户" class="headerlink" title="1.2 创建用户"></a>1.2 创建用户</h3><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymt56ehoj30o00ahwes.jpg" srcset="/img/loading.gif" alt=""></p><h3 id="1-3-删除用户"><a href="#1-3-删除用户" class="headerlink" title="1.3 删除用户"></a>1.3 删除用户</h3><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymt62pwkj30o007zdg0.jpg" srcset="/img/loading.gif" alt=""></p><h3 id="1-4-更新用户"><a href="#1-4-更新用户" class="headerlink" title="1.4 更新用户"></a>1.4 更新用户</h3><p><img src="https://tva1.sinaimg.cn/large/006tNbRwgy1g9ymt6wyxuj30o00hpq3n.jpg" srcset="/img/loading.gif" alt=""></p><h2 id="2-凭据管理"><a href="#2-凭据管理" class="headerlink" title="2. 凭据管理"></a>2. 凭据管理</h2><ul><li>凭据可以用来存储需要密文保护的数据库密码、Gitlab密码信息。</li><li>凭据类型： <img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymt7ev35j30o004sgls.jpg" srcset="/img/loading.gif" alt=""></li></ul><h3 id="2-1-查看凭据"><a href="#2-1-查看凭据" class="headerlink" title="2.1 查看凭据"></a>2.1 查看凭据</h3><ul><li>凭据-&gt; 系统-&gt; 全局凭据</li><li></li></ul><h3 id="2-2-新建凭据"><a href="#2-2-新建凭据" class="headerlink" title="2.2 新建凭据"></a>2.2 新建凭据</h3><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymt8dvbzj30o0099glw.jpg" srcset="/img/loading.gif" alt=""></p><h3 id="2-3-删除凭据"><a href="#2-3-删除凭据" class="headerlink" title="2.3 删除凭据"></a>2.3 删除凭据</h3><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymt9cza4j30o008m3yy.jpg" srcset="/img/loading.gif" alt=""></p><h3 id="2-4-更新凭据"><a href="#2-4-更新凭据" class="headerlink" title="2.4 更新凭据"></a>2.4 更新凭据</h3><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymtamrgfj30o007p3yt.jpg" srcset="/img/loading.gif" alt=""></p><h3 id="2-5-移动凭据"><a href="#2-5-移动凭据" class="headerlink" title="2.5 移动凭据"></a>2.5 移动凭据</h3><ul><li>凭据支持多个域，支持将凭据移动到其他域中。 <img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymtb3wc5j30o00660sz.jpg" srcset="/img/loading.gif" alt=""></li></ul><h2 id="3-权限管理"><a href="#3-权限管理" class="headerlink" title="3. 权限管理"></a>3. 权限管理</h2><ul><li>权限默认使用 Role-Based Strategy,其他方式如图所示。 <img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymtbmfpvj30gd07pdfz.jpg" srcset="/img/loading.gif" alt=""></li></ul><h3 id="3-1-管理权限"><a href="#3-1-管理权限" class="headerlink" title="3.1 管理权限"></a>3.1 管理权限</h3><ul><li><p>系统设置-&gt;Manage and Assign Roles-&gt;Manage Roles</p></li><li><p>Global roles：添加用户和用户组，分配某个用户属于哪个用户组。</p></li><li><p>Project roles：添加某个工程或某一组工程的用户或用户组</p></li><li><p>Slave roles：添加某个节点或某一组节点的用户或用户组</p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymtc6lpmj30o007ggly.jpg" srcset="/img/loading.gif" alt=""></p></li></ul><h3 id="3-2-全局权限"><a href="#3-2-全局权限" class="headerlink" title="3.2 全局权限"></a>3.2 全局权限</h3><p>凭据参数、字符参数、密码参数、布尔值参数、文件参数、文本参数、运行时参数、选项参数 <img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymtdyrwuj30o008m0tb.jpg" srcset="/img/loading.gif" alt=""></p><h3 id="3-3-项目权限"><a href="#3-3-项目权限" class="headerlink" title="3.3 项目权限"></a>3.3 项目权限</h3><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymteu2phj30o007iq3g.jpg" srcset="/img/loading.gif" alt=""></p><h3 id="3-4-权限授权"><a href="#3-4-权限授权" class="headerlink" title="3.4 权限授权"></a>3.4 权限授权</h3><ul><li>系统设置-&gt;Manage and Assign Roles-&gt;Assign Roles <img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymtfeal9j30o00g1t99.jpg" srcset="/img/loading.gif" alt=""></li></ul><p><strong>欢迎关注微信公众号​：</strong></p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006y8mN6gy1g7d3llw1nkj30b40b4wee.jpg" srcset="/img/loading.gif" alt="欢迎关注公众号" style="width: 100px" />]]></content>
    
    
    <categories>
      
      <category>Jenkins</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Jenkins</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jenkins安装</title>
    <link href="/2019/11/03/Jenkins%E5%AE%89%E8%A3%85/"/>
    <url>/2019/11/03/Jenkins%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<blockquote><p>来源公众号： DevOps持续集成</p></blockquote><h2 id="1-先决条件"><a href="#1-先决条件" class="headerlink" title="1. 先决条件"></a>1. 先决条件</h2><h3 id="1-1-软件要求"><a href="#1-1-软件要求" class="headerlink" title="1.1 软件要求"></a>1.1 软件要求</h3><p>Java8 无论是Java运行时环境（JRE）还是Java开发工具包（JDK）都可以。安装JDK：yum -y install java</p><h3 id="1-2-硬件要求"><a href="#1-2-硬件要求" class="headerlink" title="1.2 硬件要求"></a>1.2 硬件要求</h3><ul><li><p>最低配置：256MB可用内存，1GB可用磁盘空间（Docker推荐10GB）。</p></li><li><p>小团队配置：1GB+可用内存， 50GB+可用磁盘空间。</p></li><li><p>注意：如果将Jenkins以docker方式运行的话，这些都不是必须的。</p></li></ul><h2 id="2-安装部署"><a href="#2-安装部署" class="headerlink" title="2. 安装部署"></a>2. 安装部署</h2><h3 id="2-1-基于WAR包部署"><a href="#2-1-基于WAR包部署" class="headerlink" title="2.1 基于WAR包部署"></a>2.1 基于WAR包部署</h3><p>Jenkins的web应用程序archive（war）包是可以在任何支持Java的操作系统上运行。Jenkins最新 war包</p><ul><li>将下载的war包放到jenkins的目录中（可以自定义)。</li><li>运行命令 java -jar jenkins.war启动。</li><li>此时可以看到Jenkins的启动日志，查看是否有异常。</li><li>通过浏览器访问<a href="http://localhost:8080。">http://localhost:8080。</a></li></ul><p>注意：可以通过 –httpPort方式指定端口， java -jar jenkins.war -httpPort=9090。</p><h3 id="2-2-基于MAC系统部署"><a href="#2-2-基于MAC系统部署" class="headerlink" title="2.2 基于MAC系统部署"></a>2.2 基于MAC系统部署</h3><ul><li>下载软件包手动安装</li><li>brew install jenkins #安装jenkins最新版本</li><li>brew install jenkins-lts #安装jenkinsLTS版本</li></ul><h3 id="2-3-基于Windows系统安装"><a href="#2-3-基于Windows系统安装" class="headerlink" title="2.3 基于Windows系统安装"></a>2.3 基于Windows系统安装</h3><ul><li>下载软件包通过向导安装即可。</li></ul><h3 id="2-4-基于Linux系统部署（推荐）"><a href="#2-4-基于Linux系统部署（推荐）" class="headerlink" title="2.4 基于Linux系统部署（推荐）"></a>2.4 基于Linux系统部署（推荐）</h3><ul><li>下载软件包</li><li>rpm –ivh jenkins-2.150.3-1.1.noarch.rpm #安装</li><li>service jenkins start #启动服务</li><li>chkconfig jenkins on #开机自启</li></ul><h2 id="3-安装后配置"><a href="#3-安装后配置" class="headerlink" title="3. 安装后配置"></a>3. 安装后配置</h2><h3 id="3-1-解锁Jenkins"><a href="#3-1-解锁Jenkins" class="headerlink" title="3.1 解锁Jenkins"></a>3.1 解锁Jenkins</h3><ul><li>当您第一次访问Jenkins的时候，系统会要求您使用自动生成的密码对其进行解锁。</li><li>解锁秘钥可以通过$JENKINS_HOME/secrets/initialAdminPassword文件获取。还可以通过在启动日志中获取。 <img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymrvk8puj30o00gh74w.jpg" srcset="/img/loading.gif" alt=""></li></ul><h3 id="3-2-自定义Jenkins插件"><a href="#3-2-自定义Jenkins插件" class="headerlink" title="3.2 自定义Jenkins插件"></a>3.2 自定义Jenkins插件</h3><ul><li>解锁Jenkins之后再自定义Jenkins页面，您可以安装任何数量的插件作为初始化的一部分。</li><li>分别是安装建议的插件和选择要安装的插件（如果不确定要安装那些的时候可以选择此选项，灵活的自定义安装）。</li><li>插件安装多了也没关系，可以后面再jenkins插件管理页面删除哦。 <img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymrwm0zhj30o00bvt9e.jpg" srcset="/img/loading.gif" alt=""></li></ul><h3 id="3-3-创建用户"><a href="#3-3-创建用户" class="headerlink" title="3.3 创建用户"></a>3.3 创建用户</h3><ul><li>在这里创建一个管理员账号，到此jenkins的初始化配置已完成。 <img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymrz0si1j30o0097q34.jpg" srcset="/img/loading.gif" alt=""></li></ul><h3 id="3-4-配置更新站点"><a href="#3-4-配置更新站点" class="headerlink" title="3.4 配置更新站点"></a>3.4 配置更新站点</h3><ul><li>由于使用官方的站点速度相对很慢，这里采用清华大学的jenkins更新站点。</li><li>站点地址: <a href="https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json![](https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymrzyjnaj30o0057aal.jpg)" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json![](https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymrzyjnaj30o0057aal.jpg)</a></li></ul><h3 id="3-5-安装slave节点"><a href="#3-5-安装slave节点" class="headerlink" title="3.5 安装slave节点"></a>3.5 安装slave节点</h3><ul><li><p>系统管理-&gt;节点管理</p><p> <img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9yms0taq3j30o00a43z1.jpg" srcset="/img/loading.gif" alt=""></p></li><li><p>创建完成后会出现slave节点启动的命令，下载agent.jar，然后启动服务。 <img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9yms1twppj30o007egly.jpg" srcset="/img/loading.gif" alt=""></p></li><li><p>启动命令</p><p>  wget <a href="http://192.168.0.41/jnlpJars/agent.jar" target="_blank" rel="noopener">http://192.168.0.41/jnlpJars/agent.jar</a><br>  java -jar agent.jar -jnlpUrl <a href="http://192.168.0.41/computer/test1/slave-agent.jnlp" target="_blank" rel="noopener">http://192.168.0.41/computer/test1/slave-agent.jnlp</a> -secret 807b0135fb5b071d99930166ac4fc5dd0cf355e670a66da73120dfa2e8cebc5f -workDir “/var/lib/jenkins”</p></li><li><p>启动成功 <img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9yms2ncctj30o00cfq3m.jpg" srcset="/img/loading.gif" alt=""></p></li></ul><h3 id="3-6-Jenkins配置文件"><a href="#3-6-Jenkins配置文件" class="headerlink" title="3.6 Jenkins配置文件"></a>3.6 Jenkins配置文件</h3><ul><li>以rpm方式部署的配置文件在/etc/sysconfig/jenkins，可以定义Jenkins启动参数和端口。 <img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9yms4ki1hj30o00a4my6.jpg" srcset="/img/loading.gif" alt=""></li></ul><p><strong>欢迎关注微信公众号​：</strong></p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006y8mN6gy1g7d3llw1nkj30b40b4wee.jpg" srcset="/img/loading.gif" alt="欢迎关注公众号" style="width: 100px" />]]></content>
    
    
    <categories>
      
      <category>Jenkins</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Jenkins</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jenkins简介</title>
    <link href="/2019/11/03/Jenkins%E7%AE%80%E4%BB%8B/"/>
    <url>/2019/11/03/Jenkins%E7%AE%80%E4%BB%8B/</url>
    
    <content type="html"><![CDATA[<blockquote><p>来源公众号： DevOps持续集成</p></blockquote><h2 id="1-认识Jenkins"><a href="#1-认识Jenkins" class="headerlink" title="1. 认识Jenkins"></a>1. 认识Jenkins</h2><h3 id="1-1-Jenkins是什么？"><a href="#1-1-Jenkins是什么？" class="headerlink" title="1.1 Jenkins是什么？"></a>1.1 Jenkins是什么？</h3><p>Jenkins官网 Jenkins前身是Hudson，使用java语言开发的自动化发布工具。在中大型金融等企业中普遍使用Jenkins来作为项目发布工具。Jenkins官方提供的插件使Jenkins更为强大。</p><h3 id="1-2-Jenkins特点"><a href="#1-2-Jenkins特点" class="headerlink" title="1.2 Jenkins特点"></a>1.2 Jenkins特点</h3><ul><li>开源免费</li><li>多平台支持（windows/linux/macos）</li><li>主从分布式架构</li><li>提供web可视化配置管理页面</li><li>安装配置简单</li><li>插件资源丰富</li></ul><h3 id="1-3-Jenkins发展"><a href="#1-3-Jenkins发展" class="headerlink" title="1.3 Jenkins发展"></a>1.3 Jenkins发展</h3><p>Jenkins的前身是Hudson，采用JAVA编写的持续集成开源工具。Hudson由Sun公司在2004年启动，第一个版本于2005年在java.net发布。2007年开始Hudson逐渐取代CruiseControl和其他的开源构建工具的江湖地位。在2008年的JavaOne大会上在开发者解决方案中获得杜克选择大奖（Duke’s Choice Award）。</p><p>在2010年11月期间，因为Oracle对Sun的收购带来了Hudson的所有权问题。主要的项目贡献者和Oracle之间，尽管达成了很多协议，但有个关键问题就是商标名称“Hudson”。甲骨文在2010年12月声明拥有该名称并申请商标的权利。因此，2011年1月11日，有人要求投票将项目名称从“Hudson”改为“Jenkins”。2011年1月29日，该建议得到社区投票的批准，创建了Jenkins项目。</p><p>2011年2月1日，甲骨文表示，他们打算继续开发Hudson，并认为Jenkins只是一个分支，而不是重命名。因此，Jenkins和Hudson继续作为两个独立的项目，每个都认为对方是自己的分支。到2013年12月，GitHub上的Jenkins拥有567个项目成员和约1,100个公共仓库，与此相对的Hudson有32个项目成员和17个公共仓库。到现在两者的差异更多，应该说Jenkins已经全面超越了Hudson。此外，大家可能是出于讨厌Oracle的情绪，作为Java开发者天然地应该支持和使用Jenkins。</p><h2 id="2-Jenkins-WebUI"><a href="#2-Jenkins-WebUI" class="headerlink" title="2. Jenkins WebUI"></a>2. Jenkins WebUI</h2><h3 id="2-1-管理页面"><a href="#2-1-管理页面" class="headerlink" title="2.1 管理页面"></a>2.1 管理页面</h3><p>系统管理页面包含系统管理、全局安全管理、全局工具配置、节点管理、授权管理、插件管理、系统备份管理、日志监控管理<img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymm9o0udj30o00c7aaz.jpg" srcset="/img/loading.gif" alt=""></p><h3 id="2-2-项目管理页面"><a href="#2-2-项目管理页面" class="headerlink" title="2.2 项目管理页面"></a>2.2 项目管理页面</h3><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymma9vazj30o00cdmy0.jpg" srcset="/img/loading.gif" alt=""></p><h3 id="2-3-构建输出页面"><a href="#2-3-构建输出页面" class="headerlink" title="2.3 构建输出页面"></a>2.3 构建输出页面</h3><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymmbcwzkj30o00cb3z8.jpg" srcset="/img/loading.gif" alt=""></p><h2 id="3-Jenkins构建"><a href="#3-Jenkins构建" class="headerlink" title="3. Jenkins构建"></a>3. Jenkins构建</h2><h3 id="3-1-Jenkins项目类型"><a href="#3-1-Jenkins项目类型" class="headerlink" title="3.1 Jenkins项目类型"></a>3.1 Jenkins项目类型</h3><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymmc9js3j30o00fowfr.jpg" srcset="/img/loading.gif" alt=""></p><h3 id="3-2-Jenkins参数类型"><a href="#3-2-Jenkins参数类型" class="headerlink" title="3.2 Jenkins参数类型"></a>3.2 Jenkins参数类型</h3><p>凭据参数、字符参数、密码参数、布尔值参数、文件参数、文本参数、运行时参数、选项参数 <img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymmd3gdoj30o00hjq3s.jpg" srcset="/img/loading.gif" alt=""></p><h3 id="3-3-Jenkins触发器"><a href="#3-3-Jenkins触发器" class="headerlink" title="3.3 Jenkins触发器"></a>3.3 Jenkins触发器</h3><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymmdplflj30o008oq35.jpg" srcset="/img/loading.gif" alt=""></p><p><strong>欢迎关注微信公众号​：</strong></p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006y8mN6gy1g7d3llw1nkj30b40b4wee.jpg" srcset="/img/loading.gif" alt="欢迎关注公众号" style="width: 100px" />]]></content>
    
    
    <categories>
      
      <category>Jenkins</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Jenkins</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>几个Git仓库开源软件的比较</title>
    <link href="/2019/11/01/%E5%87%A0%E4%B8%AAGit%E4%BB%93%E5%BA%93%E5%BC%80%E6%BA%90%E8%BD%AF%E4%BB%B6%E7%9A%84%E6%AF%94%E8%BE%83/"/>
    <url>/2019/11/01/%E5%87%A0%E4%B8%AAGit%E4%BB%93%E5%BA%93%E5%BC%80%E6%BA%90%E8%BD%AF%E4%BB%B6%E7%9A%84%E6%AF%94%E8%BE%83/</url>
    
    <content type="html"><![CDATA[<h1 id="几个Git仓库开源软件的比较"><a href="#几个Git仓库开源软件的比较" class="headerlink" title="几个Git仓库开源软件的比较"></a>几个Git仓库开源软件的比较</h1><blockquote><p>打雷时你想到的是要下雨还是她害怕</p></blockquote><table><thead><tr><th align="center">特性</th><th align="center">gitlab</th><th align="center">gitblit</th><th align="center">gitbucket</th><th align="center">gogs</th><th align="center">gitolite</th></tr></thead><tbody><tr><td align="center">公开库</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="center">私有库</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="center">在线编辑</td><td align="center">√</td><td align="center">×</td><td align="center">√</td><td align="center">×</td><td align="center">×</td></tr><tr><td align="center">wiki</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">×</td></tr><tr><td align="center">issue</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">×</td></tr><tr><td align="center">fork</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">×</td></tr><tr><td align="center">pull request</td><td align="center">√</td><td align="center">×</td><td align="center">√</td><td align="center">√</td><td align="center">×</td></tr><tr><td align="center">支持ssh</td><td align="center">√</td><td align="center">√</td><td align="center">×</td><td align="center">√</td><td align="center">？</td></tr><tr><td align="center">邮件通知</td><td align="center">√</td><td align="center">？</td><td align="center">√</td><td align="center">√</td><td align="center">？</td></tr><tr><td align="center">项目统计</td><td align="center">√</td><td align="center">×</td><td align="center">√</td><td align="center">√</td><td align="center">×</td></tr><tr><td align="center">组织管理</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">×</td></tr><tr><td align="center">中文支持</td><td align="center">×</td><td align="center">√</td><td align="center">×</td><td align="center">√</td><td align="center">×</td></tr><tr><td align="center">权限控制</td><td align="center">√</td><td align="center">√</td><td align="center">×</td><td align="center">×</td><td align="center">√</td></tr><tr><td align="center">插件机制</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">×</td></tr><tr><td align="center">系统资源要求</td><td align="center">高</td><td align="center">高</td><td align="center">高</td><td align="center">很低</td><td align="center">低</td></tr><tr><td align="center">方便安装</td><td align="center">巨大不方便</td><td align="center">单文件部署</td><td align="center">单文件部署</td><td align="center">单文件部署</td><td align="center">未知</td></tr><tr><td align="center">开发语言</td><td align="center">ruby</td><td align="center">java</td><td align="center">scala</td><td align="center">go</td><td align="center">perl</td></tr><tr><td align="center">项目历史（年）</td><td align="center">?</td><td align="center">5</td><td align="center">3</td><td align="center">2</td><td align="center"></td></tr><tr><td align="center">开发者数量</td><td align="center">?</td><td align="center">97</td><td align="center">80</td><td align="center">196</td><td align="center"></td></tr></tbody></table><p>通过这个表格得出如下的结论：</p><ul><li>如果你希望开展git仓库托管服务并且信任gitlab的实力，可以采用gitlab，不过中文化的工作量不小。</li><li>如果仅仅是小型团队的内部git仓库管理，gogs足够了。尽管缺少细致的权限控制，但是极低的资源占用，丰富的功能还是很吸引人的。而且，gogs的开发似乎很活跃，贡献人数也比较多。BTW，gogs项目是中国人创建的。</li><li>如果必须采用java部署，gitblit目前是不错的选择，但是gitblit缺少了pull request这个重量级的协作工具是一大遗憾。</li></ul><p><strong>欢迎关注微信公众号​：</strong></p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006y8mN6gy1g7d3llw1nkj30b40b4wee-20200407103030299.jpg" srcset="/img/loading.gif" alt="欢迎关注公众号" style="width: 100px" />]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Git</tag>
      
      <tag>Vcs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python爬取某音乐网站里面的某板块</title>
    <link href="/2019/10/22/Python%E7%88%AC%E5%8F%96%E6%9F%90%E9%9F%B3%E4%B9%90%E7%BD%91%E7%AB%99%E9%87%8C%E9%9D%A2%E7%9A%84%E6%9F%90%E6%9D%BF%E5%9D%97/"/>
    <url>/2019/10/22/Python%E7%88%AC%E5%8F%96%E6%9F%90%E9%9F%B3%E4%B9%90%E7%BD%91%E7%AB%99%E9%87%8C%E9%9D%A2%E7%9A%84%E6%9F%90%E6%9D%BF%E5%9D%97/</url>
    
    <content type="html"><![CDATA[<p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymp6b9hxj311s0ogwjk.jpg" srcset="/img/loading.gif" alt="img"></p><blockquote><p>Python爬取某音乐网站里面的某板块。</p><p>本代码只作用学习交流使用</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @FileName: qq_music.py</span><br><br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<br><span class="hljs-keyword">from</span> selenium.webdriver.chrome.options <span class="hljs-keyword">import</span> Options<br><span class="hljs-keyword">from</span> selenium.webdriver.common.by <span class="hljs-keyword">import</span> By<br><span class="hljs-keyword">from</span> selenium.webdriver.support <span class="hljs-keyword">import</span> expected_conditions <span class="hljs-keyword">as</span> EC<br><span class="hljs-keyword">from</span> selenium.webdriver.support.ui <span class="hljs-keyword">import</span> WebDriverWait<br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> tqdm<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">QqMusic</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-comment"># 设置 chrome 无界面化模式</span><br>        self.chrome_options = Options()<br>        self.chrome_options.add_argument(<span class="hljs-string">'--headless'</span>)<br>        self.chrome_options.add_argument(<span class="hljs-string">'--disable-gpu'</span>)<br>        chrome_driver = <span class="hljs-string">"/usr/local/bin/chromedriver"</span>  <span class="hljs-comment"># 指定位置</span><br>        self.header = &#123;<br>            <span class="hljs-string">"accept"</span>: <span class="hljs-string">"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3"</span>,<br>            <span class="hljs-string">"accept-language"</span>: <span class="hljs-string">"zh-CN,zh;q=0.9"</span>,<br>            <span class="hljs-string">"referer"</span>: <span class="hljs-string">"https://y.qq.com/n/yqq/toplist/26.html"</span>,<br>            <span class="hljs-string">"upgrade-insecure-requests"</span>: <span class="hljs-string">"1"</span>,<br>            <span class="hljs-string">"user-agent"</span>: <span class="hljs-string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36"</span><br>        &#125;<br>        self.driver = webdriver.Chrome(chrome_driver, options=self.chrome_options)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">loading_music</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-string">"""</span><br><span class="hljs-string">        等到列表里面的歌曲 加载完成后在处理</span><br><span class="hljs-string"></span><br><span class="hljs-string">        # 等待元素出现在DOM</span><br><span class="hljs-string">        WebDriverWait(self._driver).until(EC.presence_of_element_located((By.ID, value)))</span><br><span class="hljs-string"></span><br><span class="hljs-string">        # 等待元素显示在页面</span><br><span class="hljs-string">        WebDriverWait(self._driver,10).until(EC.visibility_of_element_located((By.NAME, value)))</span><br><span class="hljs-string"></span><br><span class="hljs-string">        # 等待元素从页面消失</span><br><span class="hljs-string">        WebDriverWait(self._driver, 10, 0.2).until_not(EC.visibility_of_element_located((By.CLASS_NAME, value))))</span><br><span class="hljs-string"></span><br><span class="hljs-string">        # 等待页面的title显示</span><br><span class="hljs-string">        WebDriverWait(self._driver, 5,0.2).until(EC.title_contains(title))</span><br><span class="hljs-string"></span><br><span class="hljs-string">        一次查找多个元素 (这些方法会返回一个list列表):</span><br><span class="hljs-string">        find_elements_by_name</span><br><span class="hljs-string">        find_elements_by_xpath</span><br><span class="hljs-string">        find_elements_by_link_text</span><br><span class="hljs-string">        find_elements_by_partial_link_text</span><br><span class="hljs-string">        find_elements_by_tag_name</span><br><span class="hljs-string">        find_elements_by_class_name</span><br><span class="hljs-string">        find_elements_by_css_selector</span><br><span class="hljs-string">        :return:</span><br><span class="hljs-string">        """</span><br>        self.driver.get(<span class="hljs-string">"https://y.qq.com/n/yqq/toplist/26.html"</span>)<br>        print(self.driver.title)<br>        WebDriverWait(self.driver, <span class="hljs-number">10</span>).until(<br>            EC.presence_of_all_elements_located((By.CLASS_NAME, <span class="hljs-string">"songlist__songname_txt"</span>)))<br>        lists = self.driver.find_elements_by_class_name(<span class="hljs-string">"songlist__songname_txt"</span>)<br>        pattern = re.compile(<span class="hljs-string">r"https://y.qq.com/n/yqq/song/(\S+).html"</span>)  <span class="hljs-comment"># 取出每首歌的具体链接</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(lists)):<br>            li = lists.__getitem__(i)<br>            a = li.find_element_by_class_name(<span class="hljs-string">"js_song"</span>)<br>            href = a.get_attribute(<span class="hljs-string">"href"</span>)<br>            music_name = a.get_attribute(<span class="hljs-string">"title"</span>)<br>            m = pattern.match(href)<br>            <span class="hljs-keyword">yield</span> m.group(<span class="hljs-number">1</span>), music_name<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">cut_download_url</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-string">"""</span><br><span class="hljs-string">        筛选和查找下载的url</span><br><span class="hljs-string">        :return:</span><br><span class="hljs-string">        """</span><br>        <span class="hljs-keyword">for</span> music_url, music_name <span class="hljs-keyword">in</span> self.loading_music():<br>            data = json.dumps(&#123;<span class="hljs-string">"req"</span>: &#123;<span class="hljs-string">"module"</span>: <span class="hljs-string">"CDN.SrfCdnDispatchServer"</span>, <span class="hljs-string">"method"</span>: <span class="hljs-string">"GetCdnDispatch"</span>,<br>                                       <span class="hljs-string">"param"</span>: &#123;<span class="hljs-string">"guid"</span>: <span class="hljs-string">"3802082216"</span>, <span class="hljs-string">"calltype"</span>: <span class="hljs-number">0</span>, <span class="hljs-string">"userip"</span>: <span class="hljs-string">""</span>&#125;<br>                                       &#125;,<br>                               <span class="hljs-string">"req_0"</span>: &#123;<br>                                   <span class="hljs-string">"module"</span>: <span class="hljs-string">"vkey.GetVkeyServer"</span>, <span class="hljs-string">"method"</span>: <span class="hljs-string">"CgiGetVkey"</span>,<br>                                   <span class="hljs-string">"param"</span>: &#123;<br>                                       <span class="hljs-string">"guid"</span>: <span class="hljs-string">"3802082216"</span>, <span class="hljs-string">"songmid"</span>: [<span class="hljs-string">f'<span class="hljs-subst">&#123;music_url&#125;</span>'</span>],<br>                                       <span class="hljs-string">"songtype"</span>: [<span class="hljs-number">0</span>], <span class="hljs-string">"uin"</span>: <span class="hljs-string">"0"</span>, <span class="hljs-string">"loginflag"</span>: <span class="hljs-number">1</span>, <span class="hljs-string">"platform"</span>: <span class="hljs-string">"20"</span><br>                                   &#125;<br>                               &#125;, <span class="hljs-string">"comm"</span>: &#123;<span class="hljs-string">"uin"</span>: <span class="hljs-number">0</span>, <span class="hljs-string">"format"</span>: <span class="hljs-string">"json"</span>, <span class="hljs-string">"ct"</span>: <span class="hljs-number">24</span>, <span class="hljs-string">"cv"</span>: <span class="hljs-number">0</span>&#125;&#125;)<br>            url = <span class="hljs-string">"https://u.y.qq.com/cgi-bin/musicu.fcg?callback=getplaysongvkey3131073469569151&amp;"</span> \<br>                  <span class="hljs-string">"g_tk=5381&amp;jsonpCallback=getplaysongvkey3131073469569151&amp;loginUin=0&amp;hostUin=0&amp;"</span> \<br>                  <span class="hljs-string">f"format=jsonp&amp;inCharset=utf8&amp;outCharset=utf-8¬ice=0&amp;platform=yqq&amp;needNewCode=0&amp;data=<span class="hljs-subst">&#123;data&#125;</span>"</span><br>            response = requests.get(url=<span class="hljs-string">f"<span class="hljs-subst">&#123;url&#125;</span>"</span>,<br>                                    headers=self.header)<br>            html = response.text<br>            <span class="hljs-comment"># music_json = json.loads(re.findall(r'^\w+\((.*)\)$',html)[0])</span><br>            music_json = html.split(<span class="hljs-string">"("</span>)[<span class="hljs-number">1</span>].split(<span class="hljs-string">")"</span>)[<span class="hljs-number">0</span>]<br>            music_json = json.loads(music_json)<br>            req = music_json[<span class="hljs-string">'req'</span>][<span class="hljs-string">'data'</span>]<br>            sip = req[<span class="hljs-string">"sip"</span>][<span class="hljs-number">-1</span>]<br>            purl = music_json[<span class="hljs-string">'req_0'</span>][<span class="hljs-string">'data'</span>][<span class="hljs-string">'midurlinfo'</span>][<span class="hljs-number">0</span>][<span class="hljs-string">'purl'</span>]<br>            url = <span class="hljs-string">f"<span class="hljs-subst">&#123;sip&#125;</span><span class="hljs-subst">&#123;purl&#125;</span>"</span><br>            <span class="hljs-keyword">yield</span> url, music_name<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">downloading</span><span class="hljs-params">(self, url, music_name)</span>:</span><br>        <span class="hljs-string">"""</span><br><span class="hljs-string">        开始下载</span><br><span class="hljs-string">        :param url:</span><br><span class="hljs-string">        :param music_name:</span><br><span class="hljs-string">        :return:</span><br><span class="hljs-string">        """</span><br>        res = requests.get(<span class="hljs-string">f"<span class="hljs-subst">&#123;url&#125;</span>"</span>)<br>        chunk_size = <span class="hljs-number">1024</span><br>        <span class="hljs-comment"># content_size = int(res.headers['content-length'])</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(<span class="hljs-string">"qq_music"</span>):<br>            os.mkdir(<span class="hljs-string">"qq_music"</span>)<br>        <span class="hljs-keyword">with</span> open(<span class="hljs-string">f"qq_music/<span class="hljs-subst">&#123;music_name&#125;</span>.m4a"</span>, <span class="hljs-string">'wb'</span>) <span class="hljs-keyword">as</span> f:<br>            <span class="hljs-comment"># pbar = tqdm(total=int(content_size/1024))</span><br>            <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> res.iter_content(chunk_size=chunk_size):<br>                f.write(data)<br>                <span class="hljs-comment"># pbar.update()</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span><span class="hljs-params">(self)</span>:</span><br>        downloads = [x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> self.cut_download_url()]<br>        pbar = tqdm(total=len(downloads))<br>        <span class="hljs-keyword">for</span> num, (url, music_name) <span class="hljs-keyword">in</span> enumerate(downloads):<br>            self.downloading(url, music_name)<br>            pbar.update()<br><br><br>QqMusic().run()<br></code></pre></td></tr></table></figure><p>运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 qq_music.py<br></code></pre></td></tr></table></figure><p>结果：</p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymp77qqcj325e02oaaw.jpg" srcset="/img/loading.gif" alt="image-20191022190329400"></p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymp92c3jj31ei0jqq7q.jpg" srcset="/img/loading.gif" alt="image-20191022190449649"></p><p><strong>欢迎关注微信公众号​：</strong></p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006y8mN6gy1g7d3llw1nkj30b40b4wee.jpg" srcset="/img/loading.gif" alt="欢迎关注公众号" style="width: 100px" />]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python自动更换壁纸爬虫与tkinter结合</title>
    <link href="/2019/10/14/Python%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%8D%A2%E5%A3%81%E7%BA%B8%E7%88%AC%E8%99%AB%E4%B8%8Etkinter%E7%BB%93%E5%90%88/"/>
    <url>/2019/10/14/Python%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%8D%A2%E5%A3%81%E7%BA%B8%E7%88%AC%E8%99%AB%E4%B8%8Etkinter%E7%BB%93%E5%90%88/</url>
    
    <content type="html"><![CDATA[<p>直接上代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> ctypes<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><span class="hljs-keyword">from</span> tkinter <span class="hljs-keyword">import</span> Tk, Label, Button,Entry,StringVar,messagebox<br><span class="hljs-comment"># '放到AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup下把本文件后缀设为pyw 就会开机自启'</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bz</span><span class="hljs-params">(object)</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self)</span>:</span><br>        self.curent_url = <span class="hljs-string">'https://tenapi.cn/img/acg.php'</span><br>        self.root = Tk()<br>        self.root.attributes(<span class="hljs-string">"-alpha"</span>, <span class="hljs-number">0.8</span>)<br>        self.root.title(<span class="hljs-string">'壁纸切---by Alterem'</span>)<br>        self.root.geometry(<span class="hljs-string">'218x55+1300+20'</span>)<br>        self.b1 = Button(self.root, text=<span class="hljs-string">' 换一类 '</span>, command=self.change_type, fg=<span class="hljs-string">'#00f235'</span>,width=<span class="hljs-number">8</span>).place(x=<span class="hljs-number">0</span>, y=<span class="hljs-number">0</span>)<br>        self.b2 = Button(self.root, text=<span class="hljs-string">'下一张&gt;&gt;  频率(分)'</span>, command=self.change_next, fg=<span class="hljs-string">'blue'</span>,width=<span class="hljs-number">22</span>).place(x=<span class="hljs-number">63</span>, y=<span class="hljs-number">0</span>)<br>        self.b3 = Button(self.root, text=<span class="hljs-string">'停止切换'</span>, command=self.stop, fg=<span class="hljs-string">'red'</span>, width=<span class="hljs-number">8</span>).place(x=<span class="hljs-number">0</span>, y=<span class="hljs-number">30</span>)<br>        self.label = Label(self.root, text=<span class="hljs-string">'二次元'</span>,fg=<span class="hljs-string">'#9e3dff'</span>)<br>        self.label.place(x=<span class="hljs-number">85</span>, y=<span class="hljs-number">30</span>)<br>        e = StringVar()<br>        self.input=Entry(self.root,textvariable=e,fg=<span class="hljs-string">'#ffaf0a'</span>)<br>        e.set(<span class="hljs-number">0.1</span>)       <span class="hljs-comment">#默认0.1分钟   6s</span><br>        self.input.place(x=<span class="hljs-number">153</span>, y=<span class="hljs-number">30</span>)<br>        self.url_list = &#123;<span class="hljs-number">1</span>: [<span class="hljs-string">'影视'</span>, <span class="hljs-string">'http://pic.tsmp4.net/api/yingshi/img.php'</span>],<br>                         <span class="hljs-number">2</span>: [<span class="hljs-string">'随机'</span>, <span class="hljs-string">'http://lorempixel.com/1920/1080/'</span>],<br>                         <span class="hljs-number">3</span>: [<span class="hljs-string">'女神'</span>, <span class="hljs-string">'http://pic.tsmp4.net/api/nvsheng/img.php'</span>],<br>                         <span class="hljs-number">4</span>: [<span class="hljs-string">'风景'</span>, <span class="hljs-string">'http://pic.tsmp4.net/api/fengjing/img.php'</span>],<br>                         <span class="hljs-number">5</span>: [<span class="hljs-string">'二次元'</span>, <span class="hljs-string">'https://tenapi.cn/img/acg.php'</span>]&#125;<br>        self.path = <span class="hljs-string">'D:\壁纸'</span><br>        self.filepath = self.path + <span class="hljs-string">'/img.jpg'</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(self.path):<br>            os.makedirs(self.path)<br>        self.flag = <span class="hljs-literal">True</span><br>        self.start = <span class="hljs-number">1</span><br> <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">stop</span><span class="hljs-params">(self)</span>:</span><br>        self.flag = <span class="hljs-literal">False</span><br> <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">change_type</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-keyword">if</span> self.start &gt; <span class="hljs-number">5</span>:<br>            self.start = <span class="hljs-number">1</span><br>        list = self.url_list.get(self.start)<br>        curent_type = list[<span class="hljs-number">0</span>]<br>        self.curent_url = list[<span class="hljs-number">1</span>]<br>        self.label[<span class="hljs-string">'text'</span>] = curent_type<br>        self.start += <span class="hljs-number">1</span><br> <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">change_next</span><span class="hljs-params">(self)</span>:</span><br>        data = requests.get(url=self.curent_url).content<br>        <span class="hljs-keyword">with</span> open(self.filepath, <span class="hljs-string">'wb'</span>) <span class="hljs-keyword">as</span> f:<br>            f.write(data)<br>        self.config()<br> <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_img</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-keyword">try</span>:<br>            self.num = eval(self.input.get()) * <span class="hljs-number">60</span>  <span class="hljs-comment">#捕获结束界面后的异常</span><br>        <span class="hljs-keyword">except</span> Exception:<br>            <span class="hljs-keyword">pass</span><br>        <span class="hljs-keyword">try</span>:<br>            data = requests.get(url=self.curent_url).content<br>            <span class="hljs-keyword">with</span> open(self.filepath, <span class="hljs-string">'wb'</span>) <span class="hljs-keyword">as</span> f:<br>                f.write(data)<br>            time.sleep(self.num)       <span class="hljs-comment"># 睡眠单位秒</span><br>            self.config()<br>        <span class="hljs-keyword">except</span> Exception:<br>            <span class="hljs-keyword">pass</span><br> <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">config</span><span class="hljs-params">(self)</span>:</span><br>        ctypes.windll.user32.SystemParametersInfoW(<span class="hljs-number">20</span>, <span class="hljs-number">0</span>, self.filepath, <span class="hljs-number">0</span>)  <span class="hljs-comment"># 设置桌面壁纸.</span><br> <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">img</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-keyword">while</span> self.flag:<br>            self.get_img()<br> <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span><span class="hljs-params">(self)</span>:</span><br>        t1 = Thread(target=self.img)<br>        <span class="hljs-comment"># t1.setDaemon(True)           #设置守护线程 ---&gt;是否完全关闭</span><br>        t1.start()<br>        self.root.mainloop()<br>        <span class="hljs-keyword">if</span> self.flag:<br>            root = Tk()<br>            root.withdraw()<br>            messagebox.showinfo(<span class="hljs-string">"by Alterem"</span>, <span class="hljs-string">"只关闭了界面! 图片还在切换! 请进入任务管理器结束进程"</span>)<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:<br>    b = Bz()<br>    b.run()<br></code></pre></td></tr></table></figure><p><strong>欢迎关注微信公众号​：</strong></p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006y8mN6gy1g7d3llw1nkj30b40b4wee.jpg" srcset="/img/loading.gif" alt="欢迎关注公众号" style="width: 100px" />]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Tkinter</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL的5种时间类型的比较</title>
    <link href="/2019/10/13/MySQL%E7%9A%845%E7%A7%8D%E6%97%B6%E9%97%B4%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%AF%94%E8%BE%83/"/>
    <url>/2019/10/13/MySQL%E7%9A%845%E7%A7%8D%E6%97%B6%E9%97%B4%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%AF%94%E8%BE%83/</url>
    
    <content type="html"><![CDATA[<table><thead><tr><th>日期时间类型</th><th>占用空间</th><th>日期格式</th><th>最小值</th><th>最大值</th><th>零值表示</th></tr></thead><tbody><tr><td>DATETIME</td><td>8 bytes</td><td>YYYY-MM-DD HH:MM:SS</td><td>1000-01-01 00:00:00</td><td>9999-12-31 23:59:59</td><td>0000-00-00 00:00:00</td></tr><tr><td>TIMESTAMP</td><td>4 bytes</td><td>YYYY-MM-DD HH:MM:SS</td><td>19700101080001</td><td>2038 年的某个时刻</td><td>00000000000000</td></tr><tr><td>DATE</td><td>4 bytes</td><td>YYYY-MM-DD</td><td>1000-01-01</td><td>9999-12-31</td><td>0000-00-00</td></tr><tr><td>TIME</td><td>3 bytes</td><td>HH:MM:SS</td><td>-838:59:59</td><td>838:59:59</td><td>00:00:00</td></tr><tr><td>YEAR</td><td>1 bytes</td><td>YYYY</td><td>1901</td><td>2155</td><td>0000</td></tr></tbody></table><p><strong>DATETIME</strong></p><pre><code>DATETIME 用于表示 年月日 时分秒，是 DATE 和 TIME 的组合，并且记录的年份（见上表）比较长久。如果实际应用中有这样的需求，就可以使用 DATETIME 类型。</code></pre><p>1、DATETIME列可以设置为多个，默认可为null，可以手动设置其值。  </p><p>2、DATETIME列不可设定默认值。 </p><p>3、DATETIME列可以变相的设定默认值，比如通过触发器、或者在插入数据时候，将DATETIME字段值设置为now()，这样可以做到了，尤其是后者，在程序开发中常常用到。</p><p> <strong>TIMESTAMP</strong></p><ul><li><p>TIMESTAMP 用于表示 年月日 时分秒，但是记录的年份（见上表）比较短暂，TIMESTAMP列必须有默认值，默认值可以为“0000-00-00 00:00:00”，但不能为null。</p></li><li><p>TIMESTAMP 和时区相关，更能反映当前时间。当插入日期时，会先转换为本地时区后再存放；当查询日期时，会将日期转换为本地时区后再显示。所以不同时区的人看到的同一时间是  不一样的。</p></li><li><p>表中的第一个 TIMESTAMP 列自动设置为系统时间（CURRENT_TIMESTAMP）。当插入或更新一行，但没有明确给 TIMESTAMP 列赋值，也会自动设置为当前系统时间。如果表中有第二个 TIMESTAMP 列，则默认值设置为0000-00-00 00:00:00。</p></li><li><p>TIMESTAMP 的属性受 Mysql 版本和服务器 SQLMode 的影响较大。</p><p>   如果记录的日期需要让不同时区的人使用，最好使用 TIMESTAMP。</p></li></ul><p>注：一般建表时候，创建时间用datetime，更新时间用timestamp。</p><p> <strong>DATE</strong></p><pre><code>DATE 用于表示 年月日，如果实际应用值需要保存 年月日 就可以使用 DATE。</code></pre><p> <strong>TIME</strong></p><pre><code>TIME 用于表示 时分秒，如果实际应用值需要保存 时分秒 就可以使用 TIME。</code></pre><p> <strong>YEAR</strong></p><pre><code>YEAR 用于表示 年份，YEAR 有 2 位（最好使用4位）和 4 位格式的年。 默认是4位。如果实际应用只保存年份，那么用 1 bytes 保存 YEAR 类型完全可以。不但能够节约存储空间，还能提高表的操作效率。</code></pre><p><strong>欢迎关注微信公众号​：</strong></p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006y8mN6gy1g7d3llw1nkj30b40b4wee.jpg" srcset="/img/loading.gif" alt="欢迎关注公众号" style="width: 100px" />]]></content>
    
    
    <categories>
      
      <category>DataBase</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySql在CentOS上执行自动备份</title>
    <link href="/2019/10/13/MySQL%E5%9C%A8CentOS%E4%B8%8A%E6%89%A7%E8%A1%8C%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BD/"/>
    <url>/2019/10/13/MySQL%E5%9C%A8CentOS%E4%B8%8A%E6%89%A7%E8%A1%8C%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BD/</url>
    
    <content type="html"><![CDATA[<p>​    开发中我们常常有使用Svn或者Git来管理我们的代码或者是项目相关的文件，然而他们都有一个共同点就是：<strong>版本控制</strong></p><p>​    很多人会问为什么要使用Svn或者是Git，那么我会问：我相信你写的代码很好，但是有一天你修改了很多很多的Bug，但是突然想到以前的代码中有一个比较重要的算法你不小心覆盖掉了，这时候你应该怎么办？</p><p>​    或许你会告诉我你可以在修改这些代码之前备份一次当前修改的文件，或者是当前项目。</p><p>​    但是时间久了你的机器上会有多少备份文件呢？</p><p>​    如果有一天你的同事需要回滚到之前的代码看一下那时候Bug的原因，你会从你的机器上找到指定时间的文件发给他嘛？</p><p>​    当然不是，我们有Svn或者是Git之后我们可以方便的看到文件之前的版本，还可以方便的对比。那么现在清楚了版本控制的重要性了。</p><p>​    同样数据库也是这样，我们的系统99%都离不开数据库，因为我们总要把数据存储起来。</p><p>​    那如果我们数据库被误删、被黑客入侵、被恶意修改怎么办？</p><p>​    那么我们可以试着让我们的服务器自动来帮我们备份数据库的数据到指定位置，万一有一天我们的数据库不小心手抖了，我们还可以用备份下来的数据库脚本直接恢复。</p><p>​    上脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># db username</span><br>db_user=<span class="hljs-string">"test"</span>  <br><span class="hljs-comment"># db password</span><br>db_passwd=<span class="hljs-string">"test"</span><br><span class="hljs-comment"># db host</span><br>db_host=<span class="hljs-string">"121.201.5.216"</span><br><span class="hljs-comment"># backup db name</span><br>db_name=<span class="hljs-string">"Alterem"</span>  <br><span class="hljs-comment"># the directory for story your backup file.  </span><br>backup_dir=<span class="hljs-string">"backup"</span>  <span class="hljs-built_in">cd</span> <br><span class="hljs-comment"># date format for backup file (dd-mm-yyyy)  </span><br>time=<span class="hljs-string">"<span class="hljs-variable">$(date +"%Y-%m-%d-%H-%M-%S")</span>"</span>  <br><span class="hljs-comment"># mysql, mysqldump and some other bin's path  </span><br>MYSQL=<span class="hljs-string">"/usr/local/mysql/bin/mysql"</span>  <br>MYSQLDUMP=<span class="hljs-string">"/usr/local/mysql/bin/mysqldump"</span>  <br>GZIP=<span class="hljs-string">"/bin/gzip"</span>  <br>  <br><span class="hljs-variable">$MYSQLDUMP</span> -u <span class="hljs-variable">$db_user</span> -h <span class="hljs-variable">$db_host</span> -p<span class="hljs-variable">$db_passwd</span> <span class="hljs-variable">$db_name</span> | <span class="hljs-variable">$GZIP</span> -9 &gt; <span class="hljs-string">"/data/backup/<span class="hljs-variable">$backup_dir</span>/<span class="hljs-variable">$db_name</span>"</span>_<span class="hljs-string">"<span class="hljs-variable">$time</span>.gz"</span><br></code></pre></td></tr></table></figure><h3 id="创建定时器"><a href="#创建定时器" class="headerlink" title="创建定时器"></a>创建定时器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">crontab -e<br></code></pre></td></tr></table></figure><p>添加定时器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 每天凌晨 1 点 30 分 进行数据备份</span><br>30  1  *  *  * /root/mysql-backup.sh<br></code></pre></td></tr></table></figure><p>重启定时器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/etc/rc.d/init.d/crond restart<br></code></pre></td></tr></table></figure><h3 id="cron解析"><a href="#cron解析" class="headerlink" title="cron解析"></a>cron解析</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># For details see man 4 crontabs</span><br><br><span class="hljs-comment"># Example of job definition:</span><br><span class="hljs-comment"># .---------------- minute (0 - 59)</span><br><span class="hljs-comment"># |  .------------- hour (0 - 23)</span><br><span class="hljs-comment"># |  |  .---------- day of month (1 - 31)</span><br><span class="hljs-comment"># |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...</span><br><span class="hljs-comment"># |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat</span><br><span class="hljs-comment"># |  |  |  |  |</span><br><span class="hljs-comment"># *  *  *  *  * user-name command to be executed</span><br></code></pre></td></tr></table></figure><p><a href="http://cron.qqe2.com/" target="_blank" rel="noopener">在线Cron表达式生成器</a>：<a href="http://cron.qqe2.com/" target="_blank" rel="noopener">http://cron.qqe2.com/</a></p><p><strong>欢迎关注微信公众号​：</strong></p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006y8mN6gy1g7d3llw1nkj30b40b4wee.jpg" srcset="/img/loading.gif" alt="欢迎关注公众号" style="width: 100px" />]]></content>
    
    
    <categories>
      
      <category>DataBase</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python拆分excel</title>
    <link href="/2019/10/11/Python%E6%8B%86%E5%88%86excel/"/>
    <url>/2019/10/11/Python%E6%8B%86%E5%88%86excel/</url>
    
    <content type="html"><![CDATA[<p>根据某一列，拆分成几个不同的EXCEL文件<br>操作方法：将EXCEL文件拖至EXE文件上，根据提示操作。</p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymnkx1s0g311j0jj18k.gif" srcset="/img/loading.gif" alt="img"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> openpyxl<br><span class="hljs-keyword">from</span> openpyxl.utils <span class="hljs-keyword">import</span> get_column_letter<br><span class="hljs-keyword">import</span> xlrd<br><span class="hljs-keyword">import</span> sys, os, collections<br><span class="hljs-keyword">from</span> pprint <span class="hljs-keyword">import</span> pprint<br><span class="hljs-keyword">from</span> copy <span class="hljs-keyword">import</span> copy<br> <br> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">splitExcel</span><span class="hljs-params">(object)</span>:</span><br> <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, sourceFile, titleLine=None, splitColumn=None)</span>:</span><br>        self.sourceFile = sourceFile<br>        self.sourceWorkbook = openpyxl.load_workbook(sourceFile)<br>        self.targetWorkbook = openpyxl.Workbook()<br>        self.targetWorkbook.remove(self.targetWorkbook.active)<br> <br>        <span class="hljs-comment"># 源工作表（object对象）</span><br>        self.sourceWorksheet = <span class="hljs-literal">None</span><br>        <span class="hljs-comment"># 最大行数</span><br>        self.sourceWorkbookMaxRow = <span class="hljs-literal">None</span><br>        <span class="hljs-comment"># 最大列数</span><br>        self.sourceWorkbookMaxColumn = <span class="hljs-literal">None</span><br>        <span class="hljs-comment"># 源工作表索引号</span><br>        self.sourceWorksheetIndex = <span class="hljs-literal">None</span><br>        <span class="hljs-comment"># 标题所在行号，用户输入时索引从1开始，内部处理时请留意索引数</span><br>        <span class="hljs-comment"># if titleLine == None:</span><br>        <span class="hljs-comment">#     titleLine = int(input('请输入标题所在行[2]: ').strip())</span><br>        self.titleLine = titleLine<br>        <span class="hljs-comment"># 根据哪个列进行拆分，用户输入时索引从1开始，内部处理时请留意索引数</span><br>        self.splitColumn = splitColumn<br>        <span class="hljs-comment"># 源工作薄当前行号</span><br>        self.sbCurrectLine = <span class="hljs-literal">None</span><br>        <span class="hljs-comment"># 目标工作薄各表当前数据行号</span><br>        self.tbCurrectLines = &#123;&#125;<br>        <span class="hljs-comment"># 表头文字</span><br>        self.header = []<br>        <span class="hljs-comment"># 各表数据</span><br>        self.data = collections.OrderedDict()<br>        <span class="hljs-comment"># 保存列宽</span><br>        self.columnsWidth = collections.OrderedDict()<br>        <span class="hljs-comment"># 格式</span><br>        self.formats = &#123;&#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">readData</span><span class="hljs-params">(self)</span>:</span><br>        wb = xlrd.open_workbook(self.sourceFile)<br>        ws = wb.sheet_by_index(self.sourceWorksheetIndex)<br>        <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> range(ws.nrows):<br>            <span class="hljs-keyword">if</span> x &lt; self.titleLine:<br>                <span class="hljs-comment"># 表头</span><br>                self.header.append(ws.row_values(x))<br>            <span class="hljs-keyword">else</span>:<br>                v = ws.cell(x, self.splitColumn - <span class="hljs-number">1</span>).value<br>                sheetName = self.clearSheetName(v)<br>                <span class="hljs-comment"># 将表名加入data字典</span><br>                <span class="hljs-keyword">if</span> sheetName <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> self.data.keys():<br>                    self.data[sheetName] = []<br>                <span class="hljs-comment"># 添加数据</span><br>                self.data[sheetName].append(ws.row_values(x))<br> <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">selectSplitSheet</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-keyword">if</span> len(self.sourceWorkbook.sheetnames) == <span class="hljs-number">1</span>:<br>            self.sourceWorksheet = self.sourceWorkbook.active<br>            self.sourceWorksheetIndex = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">else</span>:<br>            _n_ = <span class="hljs-number">0</span><br>            print(<span class="hljs-string">'在工作薄中找到以下工作表：'</span>)<br>            <span class="hljs-keyword">for</span> SheetName <span class="hljs-keyword">in</span> self.sourceWorkbook.sheetnames:<br>                print(_n_, SheetName)<br>                _n_ += <span class="hljs-number">1</span><br> <br>            n = <span class="hljs-number">0</span><br>            _input = input(<span class="hljs-string">'请输入要拆分表的序号[0]: '</span>).strip()<br>            <span class="hljs-keyword">if</span> _input != <span class="hljs-string">''</span>:<br>                n = int(_input)<br>            self.sourceWorksheet = self.sourceWorkbook.worksheets[n]<br>            self.sourceWorksheetIndex = n<br> <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">selectSplitColumn</span><span class="hljs-params">(self)</span>:</span><br>        wb = xlrd.open_workbook(self.sourceFile)<br>        ws = wb.sheet_by_index(self.sourceWorksheetIndex)<br> <br>        <span class="hljs-comment"># 保存一下最大行数、列数，以供其它（属性）地方使用</span><br>        self.sourceWorkbookMaxRow = ws.nrows<br>        self.sourceWorkbookMaxColumn = ws.ncols<br> <br>        print(<span class="hljs-string">'\n在工作表的标题行（第 %s 行）找到以下列: '</span> % self.titleLine)<br> <br>        <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, ws.ncols + <span class="hljs-number">1</span>):<br>            print(y, ws.cell(self.titleLine - <span class="hljs-number">1</span>, y - <span class="hljs-number">1</span>).value)<br> <br>        columnNum = input(<span class="hljs-string">'请输入拆分列号[2]: '</span>).strip()<br>        <span class="hljs-keyword">if</span> columnNum == <span class="hljs-string">''</span>:<br>            columnNum = <span class="hljs-number">2</span><br>        <span class="hljs-keyword">else</span>:<br>            columnNum = int(columnNum)<br>        self.splitColumn = columnNum<br> <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">readCellsStyle</span><span class="hljs-params">(self)</span>:</span><br>        ws = self.sourceWorksheet<br>        maxColumn = self.sourceWorkbookMaxColumn<br>        styles = [[<span class="hljs-literal">None</span>] * (maxColumn + <span class="hljs-number">11</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(self.titleLine + <span class="hljs-number">11</span>)]<br>        fonts = [[<span class="hljs-literal">None</span>] * (maxColumn + <span class="hljs-number">11</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(self.titleLine + <span class="hljs-number">11</span>)]<br>        borders = [[<span class="hljs-literal">None</span>] * (maxColumn + <span class="hljs-number">11</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(self.titleLine + <span class="hljs-number">11</span>)]<br>        fills = [[<span class="hljs-literal">None</span>] * (maxColumn + <span class="hljs-number">11</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(self.titleLine + <span class="hljs-number">11</span>)]<br>        alignments = [[<span class="hljs-literal">None</span>] * (maxColumn + <span class="hljs-number">11</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(self.titleLine + <span class="hljs-number">11</span>)]<br>        number_formats = [[<span class="hljs-literal">None</span>] * (maxColumn + <span class="hljs-number">11</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(self.titleLine + <span class="hljs-number">11</span>)]<br>        protections = [[<span class="hljs-literal">None</span>] * (maxColumn + <span class="hljs-number">11</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(self.titleLine + <span class="hljs-number">11</span>)]<br>        heights = [<span class="hljs-literal">None</span>] * (self.titleLine + <span class="hljs-number">11</span>)<br>        widths = [<span class="hljs-literal">None</span>] * (maxColumn + <span class="hljs-number">11</span>)<br>        <span class="hljs-comment"># isDates = [None] * (maxColumn + 11)</span><br> <br>        <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, self.titleLine + <span class="hljs-number">2</span>):<br>            heights[x] = ws.row_dimensions[x].height<br>            <span class="hljs-comment"># print(x,'height',heights[x])</span><br>            <span class="hljs-comment"># for y in range(1, ws.max_column + 1):</span><br>            <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, maxColumn + <span class="hljs-number">1</span>):<br>                styles[x][y] = copy(ws.cell(x, y).style.replace(<span class="hljs-string">'常规'</span>, <span class="hljs-string">'Normal'</span>))<br>                fonts[x][y] = copy(ws.cell(x, y).font)<br>                borders[x][y] = copy(ws.cell(x, y).border)<br>                fills[x][y] = copy(ws.cell(x, y).fill)<br>                alignments[x][y] = copy(ws.cell(x, y).alignment)<br>                number_formats[x][y] = copy(ws.cell(x, y).number_format)<br>                protections[x][y] = copy(ws.cell(x, y).protection)<br>                <span class="hljs-keyword">if</span> y <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> widths:<br>                    widths[y] = ws.column_dimensions[get_column_letter(y)].width<br>                <span class="hljs-comment"># print(y, get_column_letter(y), ws.column_dimensions[get_column_letter(y)].width)</span><br>                <span class="hljs-comment"># if y not in isDates:</span><br>                <span class="hljs-comment">#     isDates[y] = ws.cell(x, y).is_date</span><br> <br>        self.formats[<span class="hljs-string">'heights'</span>] = heights<br>        self.formats[<span class="hljs-string">'styles'</span>] = styles<br>        self.formats[<span class="hljs-string">'fonts'</span>] = fonts<br>        self.formats[<span class="hljs-string">'borders'</span>] = borders<br>        self.formats[<span class="hljs-string">'fills'</span>] = fills<br>        self.formats[<span class="hljs-string">'alignments'</span>] = alignments<br>        self.formats[<span class="hljs-string">'number_formats'</span>] = number_formats<br>        self.formats[<span class="hljs-string">'protections'</span>] = protections<br>        self.formats[<span class="hljs-string">'widths'</span>] = widths<br>        <span class="hljs-comment"># self.formats['isDates'] = isDates</span><br> <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">writeFormatToNewWorkbook</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-keyword">for</span> sheetName <span class="hljs-keyword">in</span> self.data.keys():<br>            ws = self.targetWorkbook[sheetName]<br>            <span class="hljs-comment"># for x in range(1,self.titleLine+2):</span><br>            <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, ws.max_row + <span class="hljs-number">1</span>):<br>                <span class="hljs-comment"># 表头</span><br>                <span class="hljs-keyword">if</span> x &lt;= self.titleLine:<br>                    xx = x<br>                    <span class="hljs-comment"># ws.row_dimensions[x].height = self.formats['heights'][x]</span><br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-comment"># 表数据</span><br>                    xx = self.titleLine + <span class="hljs-number">1</span><br>                height = self.formats[<span class="hljs-string">'heights'</span>][xx]<br>                <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> height == <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> height &gt; <span class="hljs-number">0</span>:<br>                    ws.row_dimensions[x].height = self.formats[<span class="hljs-string">'heights'</span>][xx]<br> <br>                <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, ws.max_column + <span class="hljs-number">1</span>):<br>                    <span class="hljs-comment"># 表头</span><br>                    <span class="hljs-keyword">if</span> x &lt;= self.titleLine:<br>                        <span class="hljs-comment"># 路过空白单元格</span><br>                        <span class="hljs-comment"># if ws.cell(x, y).value == '':</span><br>                        <span class="hljs-comment">#     continue</span><br>                        width = self.formats[<span class="hljs-string">'widths'</span>][y]<br>                        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> width == <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> width &gt; <span class="hljs-number">0</span>:<br>                            ws.column_dimensions[get_column_letter(y)].width = self.formats[<span class="hljs-string">'widths'</span>][y]<br>                        xx = x<br>                    <span class="hljs-keyword">else</span>:<br>                        <span class="hljs-comment"># 表数据</span><br>                        xx = self.titleLine + <span class="hljs-number">1</span><br>                    ws.cell(x, y).style = self.formats[<span class="hljs-string">'styles'</span>][xx][y]<br>                    ws.cell(x, y).font = self.formats[<span class="hljs-string">'fonts'</span>][xx][y]<br>                    ws.cell(x, y).border = self.formats[<span class="hljs-string">'borders'</span>][xx][y]<br>                    ws.cell(x, y).fill = self.formats[<span class="hljs-string">'fills'</span>][xx][y]<br>                    ws.cell(x, y).alignment = self.formats[<span class="hljs-string">'alignments'</span>][xx][y]<br>                    ws.cell(x, y).number_format = self.formats[<span class="hljs-string">'number_formats'</span>][xx][y]<br>                    ws.cell(x, y).protection = self.formats[<span class="hljs-string">'protections'</span>][xx][y]<br> <br>                    <span class="hljs-comment"># if x&gt;self.titleLine and self.formats['isDates'][y]:</span><br>                    <span class="hljs-comment">#     ws.cell(x, y).number_format = 'yyyy/mm/dd'</span><br> <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">writeDataToNewWorkbook</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-keyword">for</span> sheetName <span class="hljs-keyword">in</span> self.data.keys():<br>            ws = self.targetWorkbook.create_sheet(sheetName)<br>            <span class="hljs-comment"># 写入头文字</span><br>            x = <span class="hljs-number">0</span>  <span class="hljs-comment"># 行号</span><br>            <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> self.header:<br>                x += <span class="hljs-number">1</span><br>                y = <span class="hljs-number">0</span>  <span class="hljs-comment"># 列号</span><br>                <span class="hljs-keyword">for</span> cellValue <span class="hljs-keyword">in</span> row:<br>                    y += <span class="hljs-number">1</span><br>                    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> cellValue == <span class="hljs-string">''</span>:<br>                        ws.cell(x, y).value = cellValue<br>            <span class="hljs-comment"># 写入数据</span><br>            <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> self.data[sheetName]:<br>                ws.append(row)<br> <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">clearSheetName</span><span class="hljs-params">(self, name, replaceAs=<span class="hljs-string">'-'</span>)</span>:</span><br>        invalidChars = <span class="hljs-string">r':\/?*[]：'</span><br>        <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> invalidChars:<br>            name = name.replace(c, replaceAs).strip()<br>        <span class="hljs-keyword">return</span> name<br> <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">selectTitleLine</span><span class="hljs-params">(self)</span>:</span><br>        wb = xlrd.open_workbook(self.sourceFile)<br>        ws = wb.sheet_by_index(self.sourceWorksheetIndex)<br> <br>        <span class="hljs-comment"># 保存一下最大行数、列数，以供其它（属性）地方使用</span><br>        self.sourceWorkbookMaxRow = ws.nrows<br>        self.sourceWorkbookMaxColumn = ws.ncols<br> <br>        print(<span class="hljs-string">'打印所拆分工作表前10行，前5列数据：'</span>)<br>        maxY = ws.ncols<br>        <span class="hljs-keyword">if</span> ws.ncols &gt; <span class="hljs-number">5</span>:<br>            maxY = <span class="hljs-number">5</span><br>        <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> range(<span class="hljs-number">10</span>):<br>            tempList = []<br>            <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> range(maxY):<br>                tempList.append(ws.cell(x, y).value)<br>            print(<span class="hljs-string">'第%s行：'</span> % (x + <span class="hljs-number">1</span>), tempList)<br> <br>        titleLine = <span class="hljs-number">2</span><br>        n = input(<span class="hljs-string">'\n请输入标题行所在行号[2]：'</span>).strip()<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> n == <span class="hljs-string">''</span>:<br>            titleLine = int(n)<br> <br>        self.titleLine = titleLine<br> <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">make</span><span class="hljs-params">(self)</span>:</span><br>        self.selectSplitSheet()<br>        self.selectTitleLine()<br>        self.selectSplitColumn()<br> <br>        print(<span class="hljs-string">'开始读取数据...'</span>)<br>        self.readData()<br>        print(<span class="hljs-string">'开始读取格式...'</span>)<br>        self.readCellsStyle()<br>        print(<span class="hljs-string">'开始写入数据至分表...'</span>)<br>        self.writeDataToNewWorkbook()<br>        print(<span class="hljs-string">'开始写入格式至分表...'</span>)<br>        self.writeFormatToNewWorkbook()<br> <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">save</span><span class="hljs-params">(self, filename=None)</span>:</span><br>        <span class="hljs-keyword">if</span> filename == <span class="hljs-literal">None</span>:<br>            splitPath = os.path.split(self.sourceFile)<br>            filename = splitPath[<span class="hljs-number">0</span>] + <span class="hljs-string">'/拆分_'</span> + splitPath[<span class="hljs-number">1</span>]<br>        self.targetWorkbook.save(filename)<br>        self.sourceWorkbook.close()<br>        self.targetWorkbook.close()<br>        <span class="hljs-keyword">return</span> filename<br> <br> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">saveWorksheetToWorkbook</span><span class="hljs-params">(object)</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, excelFile)</span>:</span><br>        self.excelFile = excelFile<br> <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">saveTo</span><span class="hljs-params">(self, savePath=None, addNumToFilename=True)</span>:</span><br>        <span class="hljs-keyword">if</span> savePath == <span class="hljs-literal">None</span>:<br>            splitPath = os.path.splitext(self.excelFile)<br>            savePath = splitPath[<span class="hljs-number">0</span>]<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(savePath):<br>                os.makedirs(savePath, exist_ok=<span class="hljs-literal">True</span>)<br> <br>        wb = openpyxl.load_workbook(self.excelFile)<br>        sheetNames = wb.sheetnames<br>        wb.close()<br> <br>        <span class="hljs-comment">#</span><br>        <span class="hljs-comment"># _input=input('正在保存各表至独立工作薄，文件名前是否加序号？[Y] Y/N：').strip().lower()</span><br>        <span class="hljs-comment"># if _input=='n':</span><br>        <span class="hljs-comment">#     addNumToFilename=False</span><br> <br>        n=<span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> sheetName <span class="hljs-keyword">in</span> sheetNames:<br>            n+=<span class="hljs-number">1</span><br>            print(<span class="hljs-string">'保存'</span>, n, sheetName)<br>            wb = openpyxl.load_workbook(self.excelFile)<br>            <span class="hljs-keyword">for</span> ws <span class="hljs-keyword">in</span> wb.worksheets:<br>                <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> sheetName == ws.title:<br>                    wb.remove(ws)<br> <br>            xh=<span class="hljs-string">''</span><br>            <span class="hljs-keyword">if</span> addNumToFilename:<br>                xh=str(n)<br>            filename=<span class="hljs-string">'%s/%s%s.xlsx'</span> % (savePath, xh,sheetName)<br>            wb.save(filename)<br>            wb.close()<br> <br>        <span class="hljs-keyword">return</span> savePath<br> <br> <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:<br>    file = <span class="hljs-string">r'C:\Users\Alterem\Desktop\汇总.xlsx'</span><br>    file = sys.argv[<span class="hljs-number">1</span>]<br>    se = splitExcel(file)<br>    <span class="hljs-comment"># file = r'C:\Users\Alterem\Desktop\2019年积分排名－2019-07-09.xlsx'</span><br>    <span class="hljs-comment"># se = splitExcel(file, 1, 3)</span><br>    se.make()<br>    f = se.save()<br>    print(<span class="hljs-string">'拆分汇总文件：'</span>, f)<br> <br>    <span class="hljs-comment"># f=r'C:\Users\Alterem\Desktop\汇总.拆分.xlsx'</span><br>    saveTo = saveWorksheetToWorkbook(f)<br>    p = saveTo.saveTo()<br>    print(<span class="hljs-string">'拆分表保存文件夹：'</span>, p)<br> <br>    input(<span class="hljs-string">'\n完成，按回车键退出。'</span>)<br></code></pre></td></tr></table></figure><p>欢迎提出问题</p><p><strong>欢迎关注微信公众号​：</strong></p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006y8mN6gy1g7d3llw1nkj30b40b4wee.jpg" srcset="/img/loading.gif" alt="欢迎关注公众号" style="width: 100px" />]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>excel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Lombok介绍、使用方法和总结</title>
    <link href="/2019/09/30/Lombok%E4%BB%8B%E7%BB%8D%E3%80%81%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E5%92%8C%E6%80%BB%E7%BB%93/"/>
    <url>/2019/09/30/Lombok%E4%BB%8B%E7%BB%8D%E3%80%81%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E5%92%8C%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<blockquote><p>文章来源公众号：猿人谷</p></blockquote><h1 id="1-Lombok背景介绍"><a href="#1-Lombok背景介绍" class="headerlink" title="1 Lombok背景介绍"></a>1 Lombok背景介绍</h1><p>官方介绍如下：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tex">Project Lombok makes java a spicier language by adding 'handlers' that know how to build and compile simple, boilerplate-free, not-quite-java code.<br></code></pre></td></tr></table></figure><p>大致意思是Lombok通过增加一些“处理程序”，可以让java变得简洁、快速。</p><h1 id="2-Lombok使用方法"><a href="#2-Lombok使用方法" class="headerlink" title="2 Lombok使用方法"></a>2 Lombok使用方法</h1><p>Lombok能以简单的注解形式来简化java代码，提高开发人员的开发效率。例如开发中经常需要写的javabean，都需要花时间去添加相应的getter/setter，也许还要去写构造器、equals等方法，而且需要维护，当属性多时会出现大量的getter/setter方法，这些显得很冗长也没有太多技术含量，一旦修改属性，就容易出现忘记修改对应方法的失误。</p><p>Lombok能通过注解的方式，在编译时自动为属性生成构造器、getter/setter、equals、hashcode、toString方法。出现的神奇就是在源码中没有getter和setter方法，但是在编译生成的字节码文件中有getter和setter方法。这样就省去了手动重建这些代码的麻烦，使代码看起来更简洁些。</p><p>Lombok的使用跟引用jar包一样，可以在官网（<a href="https://projectlombok.org/download）下载jar包，也可以使用maven添加依赖：" target="_blank" rel="noopener">https://projectlombok.org/download）下载jar包，也可以使用maven添加依赖：</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.16.20<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>接下来我们来分析Lombok中注解的具体用法。</p><h2 id="2-1-Data"><a href="#2-1-Data" class="headerlink" title="2.1 @Data"></a>2.1 @Data</h2><p>@Data注解在类上，会为类的所有属性自动生成setter/getter、equals、canEqual、hashCode、toString方法，如为final属性，则不会为该属性生成setter方法。</p><p>官方实例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> lombok.AccessLevel;<br><span class="hljs-keyword">import</span> lombok.Setter;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.ToString;<br><br><span class="hljs-meta">@Data</span> <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DataExample</span> </span>&#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String name;<br>  <span class="hljs-meta">@Setter</span>(AccessLevel.PACKAGE) <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">double</span> score;<br>  <span class="hljs-keyword">private</span> String[] tags;<br>  <br>  <span class="hljs-meta">@ToString</span>(includeFieldNames=<span class="hljs-keyword">true</span>)<br>  <span class="hljs-meta">@Data</span>(staticConstructor=<span class="hljs-string">"of"</span>)<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Exercise</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> T value;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如不使用Lombok，则实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DataExample</span> </span>&#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String name;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">double</span> score;<br>  <span class="hljs-keyword">private</span> String[] tags;<br>  <br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">DataExample</span><span class="hljs-params">(String name)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.name = name;<br>  &#125;<br>  <br>  <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.name;<br>  &#125;<br>  <br>  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.age = age;<br>  &#125;<br>  <br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.age;<br>  &#125;<br>  <br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setScore</span><span class="hljs-params">(<span class="hljs-keyword">double</span> score)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.score = score;<br>  &#125;<br>  <br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">getScore</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.score;<br>  &#125;<br>  <br>  <span class="hljs-keyword">public</span> String[] getTags() &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.tags;<br>  &#125;<br>  <br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setTags</span><span class="hljs-params">(String[] tags)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.tags = tags;<br>  &#125;<br>  <br>  <span class="hljs-meta">@Override</span> <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">"DataExample("</span> + <span class="hljs-keyword">this</span>.getName() + <span class="hljs-string">", "</span> + <span class="hljs-keyword">this</span>.getAge() + <span class="hljs-string">", "</span> + <span class="hljs-keyword">this</span>.getScore() + <span class="hljs-string">", "</span> + Arrays.deepToString(<span class="hljs-keyword">this</span>.getTags()) + <span class="hljs-string">")"</span>;<br>  &#125;<br>  <br>  <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">canEqual</span><span class="hljs-params">(Object other)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> other <span class="hljs-keyword">instanceof</span> DataExample;<br>  &#125;<br>  <br>  <span class="hljs-meta">@Override</span> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object o)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (o == <span class="hljs-keyword">this</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    <span class="hljs-keyword">if</span> (!(o <span class="hljs-keyword">instanceof</span> DataExample)) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    DataExample other = (DataExample) o;<br>    <span class="hljs-keyword">if</span> (!other.canEqual((Object)<span class="hljs-keyword">this</span>)) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.getName() == <span class="hljs-keyword">null</span> ? other.getName() != <span class="hljs-keyword">null</span> : !<span class="hljs-keyword">this</span>.getName().equals(other.getName())) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.getAge() != other.getAge()) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    <span class="hljs-keyword">if</span> (Double.compare(<span class="hljs-keyword">this</span>.getScore(), other.getScore()) != <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    <span class="hljs-keyword">if</span> (!Arrays.deepEquals(<span class="hljs-keyword">this</span>.getTags(), other.getTags())) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>  &#125;<br>  <br>  <span class="hljs-meta">@Override</span> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hashCode</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> PRIME = <span class="hljs-number">59</span>;<br>    <span class="hljs-keyword">int</span> result = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> temp1 = Double.doubleToLongBits(<span class="hljs-keyword">this</span>.getScore());<br>    result = (result*PRIME) + (<span class="hljs-keyword">this</span>.getName() == <span class="hljs-keyword">null</span> ? <span class="hljs-number">43</span> : <span class="hljs-keyword">this</span>.getName().hashCode());<br>    result = (result*PRIME) + <span class="hljs-keyword">this</span>.getAge();<br>    result = (result*PRIME) + (<span class="hljs-keyword">int</span>)(temp1 ^ (temp1 &gt;&gt;&gt; <span class="hljs-number">32</span>));<br>    result = (result*PRIME) + Arrays.deepHashCode(<span class="hljs-keyword">this</span>.getTags());<br>    <span class="hljs-keyword">return</span> result;<br>  &#125;<br>  <br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Exercise</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> T value;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Exercise</span><span class="hljs-params">(String name, T value)</span> </span>&#123;<br>      <span class="hljs-keyword">this</span>.name = name;<br>      <span class="hljs-keyword">this</span>.value = value;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function">Exercise&lt;T&gt; <span class="hljs-title">of</span><span class="hljs-params">(String name, T value)</span> </span>&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Exercise&lt;T&gt;(name, value);<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.name;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">getValue</span><span class="hljs-params">()</span> </span>&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.value;<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span> <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">"Exercise(name="</span> + <span class="hljs-keyword">this</span>.getName() + <span class="hljs-string">", value="</span> + <span class="hljs-keyword">this</span>.getValue() + <span class="hljs-string">")"</span>;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">canEqual</span><span class="hljs-params">(Object other)</span> </span>&#123;<br>      <span class="hljs-keyword">return</span> other <span class="hljs-keyword">instanceof</span> Exercise;<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object o)</span> </span>&#123;<br>      <span class="hljs-keyword">if</span> (o == <span class="hljs-keyword">this</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>      <span class="hljs-keyword">if</span> (!(o <span class="hljs-keyword">instanceof</span> Exercise)) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>      Exercise&lt;?&gt; other = (Exercise&lt;?&gt;) o;<br>      <span class="hljs-keyword">if</span> (!other.canEqual((Object)<span class="hljs-keyword">this</span>)) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.getName() == <span class="hljs-keyword">null</span> ? other.getValue() != <span class="hljs-keyword">null</span> : !<span class="hljs-keyword">this</span>.getName().equals(other.getName())) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.getValue() == <span class="hljs-keyword">null</span> ? other.getValue() != <span class="hljs-keyword">null</span> : !<span class="hljs-keyword">this</span>.getValue().equals(other.getValue())) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hashCode</span><span class="hljs-params">()</span> </span>&#123;<br>      <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> PRIME = <span class="hljs-number">59</span>;<br>      <span class="hljs-keyword">int</span> result = <span class="hljs-number">1</span>;<br>      result = (result*PRIME) + (<span class="hljs-keyword">this</span>.getName() == <span class="hljs-keyword">null</span> ? <span class="hljs-number">43</span> : <span class="hljs-keyword">this</span>.getName().hashCode());<br>      result = (result*PRIME) + (<span class="hljs-keyword">this</span>.getValue() == <span class="hljs-keyword">null</span> ? <span class="hljs-number">43</span> : <span class="hljs-keyword">this</span>.getValue().hashCode());<br>      <span class="hljs-keyword">return</span> result;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-2-Getter-Setter"><a href="#2-2-Getter-Setter" class="headerlink" title="2.2 @Getter/@Setter"></a>2.2 @Getter/@Setter</h2><p>如果觉得@Data太过残暴（因为@Data集合了@ToString、@EqualsAndHashCode、@Getter/@Setter、@RequiredArgsConstructor的所有特性）不够精细，可以使用@Getter/@Setter注解，此注解在属性上，可以为相应的属性自动生成Getter/Setter方法，示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> lombok.AccessLevel;<br><span class="hljs-keyword">import</span> lombok.Getter;<br><span class="hljs-keyword">import</span> lombok.Setter;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GetterSetterExample</span> </span>&#123;<br><br>  <span class="hljs-meta">@Getter</span> <span class="hljs-meta">@Setter</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age = <span class="hljs-number">10</span>;<br>  <br>  <span class="hljs-meta">@Setter</span>(AccessLevel.PROTECTED) <span class="hljs-keyword">private</span> String name;<br>  <br>  <span class="hljs-meta">@Override</span> <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> String.format(<span class="hljs-string">"%s (age: %d)"</span>, name, age);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果不使用Lombok：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GetterSetterExample</span> </span>&#123;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age = <span class="hljs-number">10</span>;<br><br>  <span class="hljs-keyword">private</span> String name;<br>  <br>  <span class="hljs-meta">@Override</span> <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> String.format(<span class="hljs-string">"%s (age: %d)"</span>, name, age);<br>  &#125;<br>  <br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> age;<br>  &#125;<br>  <br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.age = age;<br>  &#125;<br>  <br>  <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.name = name;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-3-NonNull"><a href="#2-3-NonNull" class="headerlink" title="2.3 @NonNull"></a>2.3 @NonNull</h2><p>该注解用在属性或构造器上，Lombok会生成一个非空的声明，可用于校验参数，能帮助避免空指针。</p><p>示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> lombok.NonNull;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NonNullExample</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Something</span> </span>&#123;<br>  <span class="hljs-keyword">private</span> String name;<br>  <br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">NonNullExample</span><span class="hljs-params">(@NonNull Person person)</span> </span>&#123;<br>    <span class="hljs-keyword">super</span>(<span class="hljs-string">"Hello"</span>);<br>    <span class="hljs-keyword">this</span>.name = person.getName();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>不使用Lombok：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> lombok.NonNull;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NonNullExample</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Something</span> </span>&#123;<br>  <span class="hljs-keyword">private</span> String name;<br>  <br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">NonNullExample</span><span class="hljs-params">(@NonNull Person person)</span> </span>&#123;<br>    <span class="hljs-keyword">super</span>(<span class="hljs-string">"Hello"</span>);<br>    <span class="hljs-keyword">if</span> (person == <span class="hljs-keyword">null</span>) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NullPointerException(<span class="hljs-string">"person"</span>);<br>    &#125;<br>    <span class="hljs-keyword">this</span>.name = person.getName();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-4-Cleanup"><a href="#2-4-Cleanup" class="headerlink" title="2.4 @Cleanup"></a>2.4 @Cleanup</h2><p>该注解能帮助我们自动调用close()方法，很大的简化了代码。</p><p>示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> lombok.Cleanup;<br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CleanupExample</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>    <span class="hljs-meta">@Cleanup</span> InputStream in = <span class="hljs-keyword">new</span> FileInputStream(args[<span class="hljs-number">0</span>]);<br>    <span class="hljs-meta">@Cleanup</span> OutputStream out = <span class="hljs-keyword">new</span> FileOutputStream(args[<span class="hljs-number">1</span>]);<br>    <span class="hljs-keyword">byte</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">10000</span>];<br>    <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>      <span class="hljs-keyword">int</span> r = in.read(b);<br>      <span class="hljs-keyword">if</span> (r == -<span class="hljs-number">1</span>) <span class="hljs-keyword">break</span>;<br>      out.write(b, <span class="hljs-number">0</span>, r);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如不使用Lombok，则需如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CleanupExample</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>    InputStream in = <span class="hljs-keyword">new</span> FileInputStream(args[<span class="hljs-number">0</span>]);<br>    <span class="hljs-keyword">try</span> &#123;<br>      OutputStream out = <span class="hljs-keyword">new</span> FileOutputStream(args[<span class="hljs-number">1</span>]);<br>      <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">byte</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">10000</span>];<br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>          <span class="hljs-keyword">int</span> r = in.read(b);<br>          <span class="hljs-keyword">if</span> (r == -<span class="hljs-number">1</span>) <span class="hljs-keyword">break</span>;<br>          out.write(b, <span class="hljs-number">0</span>, r);<br>        &#125;<br>      &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">if</span> (out != <span class="hljs-keyword">null</span>) &#123;<br>          out.close();<br>        &#125;<br>      &#125;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>      <span class="hljs-keyword">if</span> (in != <span class="hljs-keyword">null</span>) &#123;<br>        in.close();<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-5-EqualsAndHashCode"><a href="#2-5-EqualsAndHashCode" class="headerlink" title="2.5 @EqualsAndHashCode"></a>2.5 @EqualsAndHashCode</h2><p>默认情况下，会使用所有非静态（non-static）和非瞬态（non-transient）属性来生成equals和hasCode，也能通过exclude注解来排除一些属性。</p><p>示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> lombok.EqualsAndHashCode;<br><br><span class="hljs-meta">@EqualsAndHashCode</span>(exclude=&#123;<span class="hljs-string">"id"</span>, <span class="hljs-string">"shape"</span>&#125;)<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EqualsAndHashCodeExample</span> </span>&#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> <span class="hljs-keyword">int</span> transientVar = <span class="hljs-number">10</span>;<br>  <span class="hljs-keyword">private</span> String name;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">double</span> score;<br>  <span class="hljs-keyword">private</span> Shape shape = <span class="hljs-keyword">new</span> Square(<span class="hljs-number">5</span>, <span class="hljs-number">10</span>);<br>  <span class="hljs-keyword">private</span> String[] tags;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>  <br>  <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.name;<br>  &#125;<br>  <br>  <span class="hljs-meta">@EqualsAndHashCode</span>(callSuper=<span class="hljs-keyword">true</span>)<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Square</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Shape</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> width, height;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Square</span><span class="hljs-params">(<span class="hljs-keyword">int</span> width, <span class="hljs-keyword">int</span> height)</span> </span>&#123;<br>      <span class="hljs-keyword">this</span>.width = width;<br>      <span class="hljs-keyword">this</span>.height = height;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-6-ToString"><a href="#2-6-ToString" class="headerlink" title="2.6 @ToString"></a>2.6 @ToString</h2><p>类使用@ToString注解，Lombok会生成一个toString()方法，默认情况下，会输出类名、所有属性（会按照属性定义顺序），用逗号来分割。</p><p>通过将<code>includeFieldNames</code>参数设为true，就能明确的输出toString()属性。这一点是不是有点绕口，通过代码来看会更清晰些。</p><p>使用Lombok的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> lombok.ToString;<br><br><span class="hljs-meta">@ToString</span>(exclude=<span class="hljs-string">"id"</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ToStringExample</span> </span>&#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> STATIC_VAR = <span class="hljs-number">10</span>;<br>  <span class="hljs-keyword">private</span> String name;<br>  <span class="hljs-keyword">private</span> Shape shape = <span class="hljs-keyword">new</span> Square(<span class="hljs-number">5</span>, <span class="hljs-number">10</span>);<br>  <span class="hljs-keyword">private</span> String[] tags;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>  <br>  <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.getName();<br>  &#125;<br>  <br>  <span class="hljs-meta">@ToString</span>(callSuper=<span class="hljs-keyword">true</span>, includeFieldNames=<span class="hljs-keyword">true</span>)<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Square</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Shape</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> width, height;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Square</span><span class="hljs-params">(<span class="hljs-keyword">int</span> width, <span class="hljs-keyword">int</span> height)</span> </span>&#123;<br>      <span class="hljs-keyword">this</span>.width = width;<br>      <span class="hljs-keyword">this</span>.height = height;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>不使用Lombok的示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ToStringExample</span> </span>&#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> STATIC_VAR = <span class="hljs-number">10</span>;<br>  <span class="hljs-keyword">private</span> String name;<br>  <span class="hljs-keyword">private</span> Shape shape = <span class="hljs-keyword">new</span> Square(<span class="hljs-number">5</span>, <span class="hljs-number">10</span>);<br>  <span class="hljs-keyword">private</span> String[] tags;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>  <br>  <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.getName();<br>  &#125;<br>  <br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Square</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Shape</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> width, height;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Square</span><span class="hljs-params">(<span class="hljs-keyword">int</span> width, <span class="hljs-keyword">int</span> height)</span> </span>&#123;<br>      <span class="hljs-keyword">this</span>.width = width;<br>      <span class="hljs-keyword">this</span>.height = height;<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span> <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">"Square(super="</span> + <span class="hljs-keyword">super</span>.toString() + <span class="hljs-string">", width="</span> + <span class="hljs-keyword">this</span>.width + <span class="hljs-string">", height="</span> + <span class="hljs-keyword">this</span>.height + <span class="hljs-string">")"</span>;<br>    &#125;<br>  &#125;<br>  <br>  <span class="hljs-meta">@Override</span> <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">"ToStringExample("</span> + <span class="hljs-keyword">this</span>.getName() + <span class="hljs-string">", "</span> + <span class="hljs-keyword">this</span>.shape + <span class="hljs-string">", "</span> + Arrays.deepToString(<span class="hljs-keyword">this</span>.tags) + <span class="hljs-string">")"</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-7-NoArgsConstructor-RequiredArgsConstructor-and-AllArgsConstructor"><a href="#2-7-NoArgsConstructor-RequiredArgsConstructor-and-AllArgsConstructor" class="headerlink" title="2.7 @NoArgsConstructor, @RequiredArgsConstructor and @AllArgsConstructor"></a>2.7 @NoArgsConstructor, @RequiredArgsConstructor and @AllArgsConstructor</h2><p>无参构造器、部分参数构造器、全参构造器。Lombok没法实现多种参数构造器的重载。</p><p>Lombok示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> lombok.AccessLevel;<br><span class="hljs-keyword">import</span> lombok.RequiredArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.NonNull;<br><br><span class="hljs-meta">@RequiredArgsConstructor</span>(staticName = <span class="hljs-string">"of"</span>)<br><span class="hljs-meta">@AllArgsConstructor</span>(access = AccessLevel.PROTECTED)<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConstructorExample</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> x, y;<br>  <span class="hljs-meta">@NonNull</span> <span class="hljs-keyword">private</span> T description;<br>  <br>  <span class="hljs-meta">@NoArgsConstructor</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NoArgsExample</span> </span>&#123;<br>    <span class="hljs-meta">@NonNull</span> <span class="hljs-keyword">private</span> String field;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>不使用Lombok的示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConstructorExample</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> x, y;<br>  <span class="hljs-meta">@NonNull</span> <span class="hljs-keyword">private</span> T description;<br>  <br>  <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">ConstructorExample</span><span class="hljs-params">(T description)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (description == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NullPointerException(<span class="hljs-string">"description"</span>);<br>    <span class="hljs-keyword">this</span>.description = description;<br>  &#125;<br>  <br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function">ConstructorExample&lt;T&gt; <span class="hljs-title">of</span><span class="hljs-params">(T description)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ConstructorExample&lt;T&gt;(description);<br>  &#125;<br>  <br>  <span class="hljs-meta">@java</span>.beans.ConstructorProperties(&#123;<span class="hljs-string">"x"</span>, <span class="hljs-string">"y"</span>, <span class="hljs-string">"description"</span>&#125;)<br>  <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-title">ConstructorExample</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y, T description)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (description == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NullPointerException(<span class="hljs-string">"description"</span>);<br>    <span class="hljs-keyword">this</span>.x = x;<br>    <span class="hljs-keyword">this</span>.y = y;<br>    <span class="hljs-keyword">this</span>.description = description;<br>  &#125;<br>  <br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NoArgsExample</span> </span>&#123;<br>    <span class="hljs-meta">@NonNull</span> <span class="hljs-keyword">private</span> String field;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">NoArgsExample</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="3-Lombok工作原理分析"><a href="#3-Lombok工作原理分析" class="headerlink" title="3 Lombok工作原理分析"></a>3 Lombok工作原理分析</h1><p>会发现在Lombok使用的过程中，只需要添加相应的注解，无需再为此写任何代码。自动生成的代码到底是如何产生的呢？</p><p>核心之处就是对于注解的解析上。JDK5引入了注解的同时，也提供了两种解析方式。</p><ul><li>运行时解析</li></ul><p>运行时能够解析的注解，必须将@Retention设置为RUNTIME，这样就可以通过反射拿到该注解。java.lang,reflect反射包中提供了一个接口AnnotatedElement，该接口定义了获取注解信息的几个方法，Class、Constructor、Field、Method、Package等都实现了该接口，对反射熟悉的朋友应该都会很熟悉这种解析方式。</p><ul><li>编译时解析</li></ul><p>编译时解析有两种机制，分别简单描述下：</p><p>1）Annotation Processing Tool</p><p>apt自JDK5产生，JDK7已标记为过期，不推荐使用，JDK8中已彻底删除，自JDK6开始，可以使用Pluggable Annotation Processing API来替换它，apt被替换主要有2点原因：</p><ul><li>api都在com.sun.mirror非标准包下</li><li>没有集成到javac中，需要额外运行</li></ul><p>2）Pluggable Annotation Processing API</p><p><a href="https://jcp.org/en/jsr/detail?id=269" target="_blank" rel="noopener">JSR 269</a>自JDK6加入，作为apt的替代方案，它解决了apt的两个问题，javac在执行的时候会调用实现了该API的程序，这样我们就可以对编译器做一些增强，这时javac执行的过程如下：</p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymsf9xjbj30go0230sq.jpg" srcset="/img/loading.gif" alt="123"></p><p>Lombok本质上就是一个实现了“<a href="https://www.jcp.org/en/jsr/detail?id=269" target="_blank" rel="noopener">JSR 269 API</a>”的程序。在使用javac的过程中，它产生作用的具体流程如下：</p><ol><li>javac对源代码进行分析，生成了一棵抽象语法树（AST）</li><li>运行过程中调用实现了“JSR 269 API”的Lombok程序</li><li>此时Lombok就对第一步骤得到的AST进行处理，找到@Data注解所在类对应的语法树（AST），然后修改该语法树（AST），增加getter和setter方法定义的相应树节点</li><li>javac使用修改后的抽象语法树（AST）生成字节码文件，即给class增加新的节点（代码块）</li></ol><p>拜读了Lombok源码，对应注解的实现都在HandleXXX中，比如@Getter注解的实现时HandleGetter.handle()。还有一些其它类库使用这种方式实现，比如<a href="https://github.com/google/auto" target="_blank" rel="noopener">Google Auto</a>、<a href="http://square.github.io/dagger/" target="_blank" rel="noopener">Dagger</a>等等。</p><h1 id="4-Lombok的优缺点"><a href="#4-Lombok的优缺点" class="headerlink" title="4. Lombok的优缺点"></a>4. Lombok的优缺点</h1><p>优点：</p><ol><li>能通过注解的形式自动生成构造器、getter/setter、equals、hashcode、toString等方法，提高了一定的开发效率</li><li>让代码变得简洁，不用过多的去关注相应的方法</li><li>属性做修改时，也简化了维护为这些属性所生成的getter/setter方法等</li></ol><p>缺点：</p><ol><li>不支持多种参数构造器的重载</li><li>虽然省去了手动创建getter/setter方法的麻烦，但大大降低了源代码的可读性和完整性，降低了阅读源代码的舒适度</li></ol><h1 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h1><p>Lombok虽然有很多优点，但Lombok更类似于一种IDE插件，项目也需要依赖相应的jar包。Lombok依赖jar包是因为编译时要用它的注解，为什么说它又类似插件？因为在使用时，eclipse或IntelliJ IDEA都需要安装相应的插件，在编译器编译时通过操作AST（抽象语法树）改变字节码生成，变向的就是说它在改变java语法。它不像spring的依赖注入或者mybatis的ORM一样是运行时的特性，而是编译时的特性。这里我个人最感觉不爽的地方就是对插件的依赖！因为Lombok只是省去了一些人工生成代码的麻烦，但IDE都有快捷键来协助生成getter/setter等方法，也非常方便。</p><p>知乎上有位大神发表过对Lombok的一些看法：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tex">这是一种低级趣味的插件，不建议使用。JAVA发展到今天，各种插件层出不穷，如何甄别各种插件的优劣？能从架构上优化你的设计的，能提高应用程序性能的 ，<br>实现高度封装可扩展的...， 像lombok这种，像这种插件，已经不仅仅是插件了，改变了你如何编写源码，事实上，少去了代码你写上去又如何？ <br>如果JAVA家族到处充斥这样的东西，那只不过是一坨披着金属颜色的屎，迟早会被其它的语言取代。<br></code></pre></td></tr></table></figure><p>虽然话糙但理确实不糙，试想一个项目有非常多类似Lombok这样的插件，个人觉得真的会极大的降低阅读源代码的舒适度。</p><p>虽然非常不建议在属性的getter/setter写一些业务代码，但在多年项目的实战中，有时通过给getter/setter加一点点业务代码，能极大的简化某些业务场景的代码。所谓取舍，也许就是这时的舍弃一定的规范，取得极大的方便。</p><p>我现在非常坚信一条理念，任何编程语言或插件，都仅仅只是工具而已，即使工具再强大也在于用的人，就如同小米加步枪照样能赢飞机大炮的道理一样。结合具体业务场景和项目实际情况，无需一味追求高大上的技术，适合的才是王道。</p><p>Lombok有它的得天独厚的优点，也有它避之不及的缺点，熟知其优缺点，在实战中灵活运用才是王道。</p><p>参考：</p><p><a href="https://projectlombok.org/features/" target="_blank" rel="noopener">https://projectlombok.org/features/</a></p><p><a href="https://github.com/rzwitserloot/lombok?spm=a2c4e.11153940.blogcont59972.5.2aeb6d32hayLHv" target="_blank" rel="noopener">https://github.com/rzwitserloot/lombok?spm=a2c4e.11153940.blogcont59972.5.2aeb6d32hayLHv</a></p><p><a href="https://www.zhihu.com/question/42348457" target="_blank" rel="noopener">https://www.zhihu.com/question/42348457</a></p><p><a href="https://blog.csdn.net/ghsau/article/details/52334762" target="_blank" rel="noopener">https://blog.csdn.net/ghsau/article/details/52334762</a></p><p><strong>欢迎关注微信公众号​：</strong></p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006y8mN6gy1g7d3llw1nkj30b40b4wee.jpg" srcset="/img/loading.gif" alt="欢迎关注公众号" style="width: 100px" />]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Lombok</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>高可用的一些思考和理解</title>
    <link href="/2019/09/29/%E9%AB%98%E5%8F%AF%E7%94%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83%E5%92%8C%E7%90%86%E8%A7%A3/"/>
    <url>/2019/09/29/%E9%AB%98%E5%8F%AF%E7%94%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83%E5%92%8C%E7%90%86%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文来源公众号：匠心零度</p></blockquote><p>在目前的互联网大时代，在高并发等冲击下，还必须保证<strong>服务高可用</strong>，如果服务不高可用那么意味着：</p><ul><li>系统不是7*24小时提供服务，那么用户体验就特别差了，可能用户下次不用了，留不住用户。</li><li>当系统不可用的时候，对公司的形象是有所影响的，BAT类似这种技术都是象征的。</li><li>最重要的一点，当系统不可用的时候，直接损失就是金钱！！！基本都是秒算损失的，依稀记得<strong>2015年5月28日携程网瘫痪事件</strong>，按照携程一季度财报公布的数据，携程宕机的损失为平均每小时106.48万美元。</li></ul><p>高可用是非常复杂的，自己水平有限，并不能涵盖那么多，只能说是自己对高可用的一些思考和理解。</p><h2 id="那么怎么使系统高可用呢？"><a href="#那么怎么使系统高可用呢？" class="headerlink" title="那么怎么使系统高可用呢？"></a>那么怎么使系统高可用呢？</h2><blockquote><p>我们不能让服务器不挂，让服务不挂，那么怎么样让这种必败的局面不会有问题呢，就是可以挂，服务可以坏，那么怎么让系统还可以提供服务呢？</p></blockquote><p>首先如果机器有很多，服务有很多，就算坏了一部分也没有问题啊，必败的局面得到的解决。下面进行一步一步剖析，如果机器里面存储了特定值，那么就不能扩展，必须是用挂的那台机器，那么这个是不行的，机器问题好解决，相同的配置替代是容易的，那么应用服务也是类似，应用服务可以不存储状态有关的值在任何机器而自己内部不会有存储一些特定的特征数据，如果有就没办法很容易的扩展，只有当每个主件都是一样的时候，无任何差异，我们才好替换，容易扩展，那么这个就叫着<strong>服务的无状态化。</strong></p><blockquote><p>假如目前服务已经是无状态化了，那么如何让系统动态的感知到服务挂了呢？不然请求还是回去到挂的那台机器，怎么转移到新的机器呢？那么可能就需要<strong>服务发现与注册了。</strong></p><p>如果达到了上面的情况，应对一般的情况基本已经够了，但是互联网是复杂的，刚刚说的机器坏，服务坏了的问题，那么如果网络出现短暂不通因为怎么办呢？</p></blockquote><p>所以服务之间应该有<strong>心跳的检测，</strong>来定期看看是否可通（机器坏了，服务挂了，网络不通了）反正就是不可达了。这种情况通过服务注册与发现即可解决，但是有时候网络是闪断下那么在那种特定的情况呢？比如刚刚a服务已经把请求发送给了b服务，b服务已经接收到请求了，那么这个时候忽然网络断了，但是b服务进行把逻辑处理做完成了，但是a服务反应的就是没有响应，前台超时了，那么再一次触发下，那么如果b服务把之前的逻辑再做一遍是否存在问题呢？ 比如支付，已经付款200元，难道再付款200元吗？这里需要提到一个<strong>幂等性</strong>的设计概念，什么是幂等呢，就是多次执行结果都一样，如果有幂等性设计那么就不怕这种情况了，在没有得到反馈情况<strong>重试</strong>即可，也不会出现问题。</p><blockquote><p>达到上面说的这些就是应对机器坏了，服务挂了，网络不通或者闪断等情况已经基本没有什么大问题了，那么目前互联网都是高并发，那么在高并发的情况，如何来提高系统的能力的？</p></blockquote><p>就和搬东西一样，一个人慢，可以多来点人一起帮东西，由于上面的架构是可以添加机器，服务的，那么很容易想到的就是多来点机器和服务。那么这样一定比机器少要快的，比如有5台机器，那么很多请求过来了，用什么策略让他们分摊到不同的机器呢？通过设备，通过一些软件层面，但是其中一定有服务发现注册，不然没办法动态知道节点变化，还有就是对一些信息的控制，黑白名单，访问频率等。<strong>很多时候，加机器可能看起来比较low，但是有时候的确比较有效，但是也不能一味的加机器，有些情况加机器是解决不了的了。</strong></p><p>机器多了的确快了，如果在服务里面有一个阻塞方法，那么就算服务在多也没用，所以必须注意关于<strong>服务超时的问题，</strong>由于服务是幂等的，就算再次执行也没有任何关系，有了超时就不会卡很久影响到后面的服务了（下游服务宕机了，线程死锁了，下游服务忙等等）。</p><p>关于同步，异步的一些设计模式，在有些必须顺序执行的业务场景就必须要使用同步了，在非必须的这种场景那么用异步一定比同步处理的并发量要大（由于中间件经历很多步骤，所以从单个请求的总时间来看并不一定有同步的快，但是从一个宏观的角度来看提高并发的请求会大很多了）。简单聊聊异步，在一个服务内部，异步那么就需要提到多线程了，多线程很多有点提高cpu利用率，提高系统性能，但是实现成本要高很多了，那么不同服务直接的如何异步呢，消息中间件了，（消息中间件很难，第一要保证<strong>真异步，</strong>第二需要保证<strong>不重不漏</strong>，就这2点真的很难，特别是在大数据情况下），特别是网络I/O需要重点考虑异步模型，不过Netty封装的挺好了。</p><blockquote><p>由于每个机器，或者服务都是有上限的，如果量一下泄洪式的过来并且不是他的能力可以处理的，那么该如果解决呢？</p></blockquote><p>该问题在生活中到处可见，刚刚好国庆回家、出去玩，随处可见该事项体现，比如过安检的时候，有一个保安专门拿一个牌看人差不多了，让后面的人等，等处理的查不多了，在让后面的人进行，之后类似在等。，但是如果有级别高的，或者车快发车了，一般让他们先过，在软件架构里面应该叫<strong>限流、服务降级，</strong>一般有两种控制策略（1，拒绝部分请求，2，关闭部分服务）可能之前的时候都提到了关闭部分服务，不过现在不推荐了（<strong>毕竟也是公司技术实力的体现</strong>），目前重点说的是关于拒绝部分请求，关于这块的控制在那里添加？就是那块需要控制，应该每层都需要加下该控制。</p><p>依稀记得行业里面有句话，<strong>高并发、高可用三大法宝：限流、降级、缓存</strong>，关于缓存，大家应该接触的最多，互联网业务特点就是读多写少，那么就非常适合使用缓存了。</p><blockquote><p>由于所以请求在一个服务，扩展还是不好扩展，而且统一服务里面有些调用特别多，有些调用就比较少，因为继续划分，继续拆，这样还是可以再次提高并发。</p></blockquote><p><strong>微服务了，</strong>微服务概念很多，首先提到的就是搞垂直拆分，很容易理解，之后垂直业务可能也很多，还需要继续水平拆分，（这里一切的拆分依据都是根据自己公司的业务，理解越深才的越好）。</p><p>通过上面的这些，服务可以挂，机器可以坏，网络不通或者闪断的问题都解决了，并且可以提高并发，尽最大努力来让服务高可用。<strong>那么由于这么做带来了很多问题，</strong>所以需要把这些修改带来的问题解决：</p><ul><li>以前在一个服务里面，对于事务的控制很容易，那么微服务之后，事务的控制就显的特别重要了，很多时候我们不能强一致性，但是我们可以做到<strong>最终一致性</strong>就是可以的。</li><li>调用链监控也就显得特别重要了，一起的还有预警也特别重要了。</li><li>分布式日志也显得特别重要了。</li><li>高级的jstack、Btrace在真实环境就是特别重要的。</li></ul><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><blockquote><p>本人水平有限，难免会有一些理解偏差的地方，如果发现，欢迎各位积极指出，感谢！！！</p></blockquote><p><strong>欢迎关注微信公众号​：</strong></p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006y8mN6gy1g7d3llw1nkj30b40b4wee-20200407102957991.jpg" srcset="/img/loading.gif" alt="欢迎关注公众号" style="width: 100px" />]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>高可用</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Python】哄女朋友的那些奇技淫巧</title>
    <link href="/2019/09/27/%E3%80%90Python%E3%80%91%E5%93%84%E5%A5%B3%E6%9C%8B%E5%8F%8B%E7%9A%84%E9%82%A3%E4%BA%9B%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/"/>
    <url>/2019/09/27/%E3%80%90Python%E3%80%91%E5%93%84%E5%A5%B3%E6%9C%8B%E5%8F%8B%E7%9A%84%E9%82%A3%E4%BA%9B%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文来源公众号： <strong>Python乱炖</strong></p><img src="https://mp.weixin.qq.com/mp/qrcode?scene=10000004&size=102&__biz=MzU1NDcwNTE2OA==&mid=2247486190&idx=1&sn=a1707f91b23d437f758131818d73dda4&send_time=" srcset="/img/loading.gif" alt="欢迎关注公众号" style="width: 100px" /></blockquote><h3 id="Python里面的奇技淫巧"><a href="#Python里面的奇技淫巧" class="headerlink" title="Python里面的奇技淫巧"></a>Python里面的奇技淫巧</h3><blockquote><p><strong>声明</strong></p><p><strong>“以下所有模块均可</strong></p><p><strong>使用pip直接安装”</strong></p></blockquote><p><strong>说python是</strong></p><p><strong>所有编程语言里面</strong></p><p><strong>最奇葩的语言</strong></p><p><strong>这肯定是没错了</strong></p><p><strong>它可以做</strong></p><p><strong>自动化，爬虫，数据，AI，机器学习</strong></p><p><strong>这些我们暂且不说</strong></p><p><strong>可是它竟然还可以</strong></p><p><strong>撩妹</strong></p><p><strong>撩到妹</strong></p><p><strong>定位女朋友</strong></p><p><strong>和女朋友聊天</strong></p><p><strong>天天和女朋友早晚安</strong></p><p><strong>给女朋友打电话</strong></p><p><strong>讨女朋友开心</strong></p><p><strong>让女朋友崇拜你</strong></p><p><strong>………</strong></p><p><strong>怎么样？</strong></p><p><strong>够厉害吧</strong></p><p><strong>赶紧跟着狗哥</strong></p><p><strong>来看看python里面的奇技淫巧吧！</strong></p><h3 id="pinyin"><a href="#pinyin" class="headerlink" title="pinyin"></a>pinyin</h3><p><strong>第一个就是我们的pinyin模块了，这个模块骚就骚在可以直接把中文汉字转化成中文的汉语拼音，甚至连第几声发音都可以给你搞出来，具体使用很简单，导入后直接使用get方法即可：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pinyin<br>transf = pinyin.get(<span class="hljs-string">"狗哥"</span>)<br>trans2 = pinyin.get(<span class="hljs-string">"狗哥"</span>, format=<span class="hljs-string">"strip"</span>)<br></code></pre></td></tr></table></figure><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymoss66zj30q70g7q3p.jpg" srcset="/img/loading.gif" alt="img"></p><h3 id="qrcode"><a href="#qrcode" class="headerlink" title="qrcode"></a>qrcode</h3><p><strong>下面这个是我们的二维码生成器，可以将文字，号码，网址存放在二维码中，只需要只用make方法去生成二维码，如何使用save方法保存二维码图片即可。很简单的两部搞定！下面我们来看一个栗子：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> qrcode<br>words=<span class="hljs-string">'https://mp.weixin.qq.com/mp/profile_ext?action=home&amp;__biz=MzU1NDcwNTE2OA==&amp;scene=126#wechat_redirect'</span><br>img = qrcode.make(words)<br>img.save(<span class="hljs-string">'test.png'</span>)<br>img.show()<br></code></pre></td></tr></table></figure><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymou71fqj30u00g70ts.jpg" srcset="/img/loading.gif" alt="img"></p><h3 id="myqr"><a href="#myqr" class="headerlink" title="myqr"></a>myqr</h3><p><strong>如果说刚刚的qrcode已经足够神奇了的话，那这个将会更加神奇，因为它可以以图片为背景来生成二维码，背景图片可以是动态gif也可以是静态jpg，png，整个生成二维码的步骤也要比上面简单许多，你甚至都不需要敲代码就可以享受到动态二维码的美好，可以直接在终端（cmd）敲一句口令即可生成二维码！（需要安装好myqr）</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">myqr <span class="hljs-string">"https://mp.weixin.qq.com/mp/profile_ext?action=home&amp;__biz=MzU1NDcwNTE2OA==&amp;scene=126#wechat_redirect"</span> -v 1 -l Q -n <span class="hljs-string">"s_qr.gif"</span> -p s.gif -con 1.2 -bri 1.2 -c<br></code></pre></td></tr></table></figure><p><strong>整个口令你需要修改的就是：</strong></p><p><strong>url网址修改成你需要的</strong></p><p><strong>s.gif修改成你自己图片的地址</strong></p><p><strong>其他的参数你不知道什么意思均可以不动</strong></p><p><strong>如果想了解具体参数是什么意思，可参考狗哥公众号内python生成二维码那片文章。</strong></p><p><strong>效果如下：</strong></p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymow2exxg30e90e9qk3.gif" srcset="/img/loading.gif" alt="img"></p><h3 id="jieba"><a href="#jieba" class="headerlink" title="jieba"></a>jieba</h3><p><strong>jieba，真的就是结巴的意思，主要是用来进行分词的。</strong></p><p><strong>jieba 可以**</strong>把一句话拆分成多个词。**</p><p><strong>从一句话（一段话）中提取最重要的几个关键词。</strong></p><p><strong>最常用的功能应该就是这些吧，分词之后结合 TF-IDF，就可以做搜索工具和相关推荐了。</strong></p><p><strong>狗哥推荐：结合本次推荐的这些模块，使用结巴工具来和女朋友聊天，是个不错的主意！</strong></p><p>下面看看切割示范：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> jieba<br>string = <span class="hljs-string">"大家都说狗哥好，狗哥帅气人又好"</span><br>sl = jieba.cut(string, cut_all=<span class="hljs-literal">True</span>)<br>print(<span class="hljs-string">'全的模式:'</span>, list(sl))<br>sl = jieba.cut(string, cut_all=<span class="hljs-literal">False</span>)<br>print(<span class="hljs-string">"精确模式:"</span>, list(sl))<br>sl = jieba.cut(string)<br>print(<span class="hljs-string">'搜索模式:'</span>, list(sl))<br></code></pre></td></tr></table></figure><p><strong>结巴还有很多高级的方法，希望大家多多发掘，如果实在懒，在狗哥的公众号里面搜一下也就找到了。</strong></p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymowyfkmj30u0042dgw.jpg" srcset="/img/loading.gif" alt="img"></p><p><strong>itchat/wxpy</strong></p><p><strong>itchat和wxpy这两个模块功能都差不多，都是用于微信聊天的，可以用来获取朋友圈好友的数据，也可以用来和好友聊天自动回复等等。（接上图灵机器人也是无敌了）</strong></p><p><strong>使用itchat很简单，导入模块后调用login方法便可以直接扫码登陆了：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> itchat<br>itchat.login()<br></code></pre></td></tr></table></figure><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymoxyhxhj30u00h0ac1.jpg" srcset="/img/loading.gif" alt="img"></p><p><strong>登陆了之后可以通过get_friends方法获取到所有的微信好友</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">friends = itchat.get_friends(update=<span class="hljs-literal">True</span>)[<span class="hljs-number">0</span>:]<br></code></pre></td></tr></table></figure><p><strong>至于获取微信好友要干啥，那就随你了，狗哥直接教你发送消息吧，直接使用send方法指明发送对象即可：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">users = itchat.search_friends(<span class="hljs-string">"亲爱的"</span>)userName = users[<span class="hljs-number">0</span>][<span class="hljs-string">'UserName'</span>]print(userName)itchat.send(<span class="hljs-string">'亲爱的，送你一个杨树林要不要？'</span>, toUserName=userName)<br></code></pre></td></tr></table></figure><p><strong>这边狗哥直接选择了一个用户直接发送消息</strong></p><p><strong>当然，我们除了发送消息，还可以设置自动回复：</strong></p><p><strong>定义几个方法，调用itchat自带的装饰器即可：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> itchat.content <span class="hljs-keyword">import</span> *<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">reply</span><span class="hljs-params">(msg)</span>:</span><br>   itchat.send((<span class="hljs-string">'23333'</span>), msg[<span class="hljs-string">'FromUserName'</span>])<br><span class="hljs-meta">@itchat.msg_register([PICTURE])</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">pic_replay</span><span class="hljs-params">(msg)</span>:</span><br>   itchat.send((<span class="hljs-string">'最近又漂亮了'</span>),<br>           msg[<span class="hljs-string">'FromUserName'</span>])<br><br><span class="hljs-meta">@itchat.msg_register([RECORDING])</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">rec_replay</span><span class="hljs-params">(msg)</span>:</span><br>   itchat.send((<span class="hljs-string">'连声音都是这么迷人'</span>),<br>           msg[<span class="hljs-string">'FromUserName'</span>])<br><br><span class="hljs-meta">@itchat.msg_register([VIDEO,])</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">video_replay</span><span class="hljs-params">(msg)</span>:</span><br>   itchat.send((<span class="hljs-string">'我没流量了，视频打不开啊'</span>),<br>           msg[<span class="hljs-string">'FromUserName'</span>])<br><br><span class="hljs-meta">@itchat.msg_register([SHARING])</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">share_replay</span><span class="hljs-params">(msg)</span>:</span><br>   itchat.send((<span class="hljs-string">'这链接我这么怎么点不进去啊'</span>),<br>           msg[<span class="hljs-string">'FromUserName'</span>])<br></code></pre></td></tr></table></figure><p><strong>没错定义好回复的对象，只要登陆上了，这些回复就会生效了！</strong></p><p><strong>狗哥测试的一个例子：</strong></p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymozpmrzj30a20ftdg9.jpg" srcset="/img/loading.gif" alt="img"></p><h3 id="wordcloud"><a href="#wordcloud" class="headerlink" title="wordcloud"></a>wordcloud</h3><p><strong>下面这个看起来比较鬼畜，但是其实在数据可视化里面它的用处还是比较强大的。</strong></p><p><strong>词云这个东西一般与numpy，matplotlib，jieba，pillow连用，用起来也是挺麻烦的</strong></p><p><strong>狗哥这里整理了一个简单的版本供大家参考：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> jieba<br><span class="hljs-keyword">from</span> wordcloud <span class="hljs-keyword">import</span> WordCloud,\<br>   ImageColorGenerator,\<br>   STOPWORDS<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br><span class="hljs-keyword">with</span> open(<span class="hljs-string">'content.txt'</span>, <span class="hljs-string">'r'</span>, encoding=<span class="hljs-string">'utf-8'</span>) <span class="hljs-keyword">as</span> f:<br>   word = (f.read())<br>   f.close()<br><br><span class="hljs-comment"># 图片模板和字体</span><br>image = np.array(Image.open(<span class="hljs-string">'ditu.jpg'</span>))<br>font = <span class="hljs-string">r'C:\\Windows\\fonts\\msyh.ttf'</span><br><br><span class="hljs-comment"># 去掉英文，保留中文</span><br>resultword = re.sub(<span class="hljs-string">"[A-Za-z0-9\[\`\~\!\@\#\$\^\&amp;\*\(\)\=\|\&#123;\&#125;"</span><br>                   <span class="hljs-string">"\'\:\;\'\,\[\]\.\&lt;\&gt;\/\?\~\。\@\#\\\&amp;\*\%]"</span>,<br>                   <span class="hljs-string">""</span>, word)<br>wordlist_after_jieba = jieba.cut(resultword)<br>wl_space_split = <span class="hljs-string">" "</span>.join(wordlist_after_jieba)<br><br><span class="hljs-comment"># 设置停用词</span><br>sw = set(STOPWORDS)<br><br><span class="hljs-comment"># 关键一步</span><br>my_wordcloud = WordCloud(scale=<span class="hljs-number">4</span>,<br>                        font_path=font,<br>                        mask=image,<br>                        stopwords=sw,<br>                        background_color=<span class="hljs-string">'white'</span>,<br>                        max_words=<span class="hljs-number">100</span>,<br>                        max_font_size=<span class="hljs-number">60</span>,<br>                        random_state=<span class="hljs-number">20</span>).\<br>   generate(wl_space_split)<br><br><span class="hljs-comment"># 显示生成的词云</span><br>plt.imshow(my_wordcloud)<br>plt.axis(<span class="hljs-string">"off"</span>)<br>plt.show()<br><br><span class="hljs-comment"># 保存生成的图片</span><br>my_wordcloud.to_file(<span class="hljs-string">'result.jpg'</span>)<br></code></pre></td></tr></table></figure><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymp0rpdnj30oo0e1n02.jpg" srcset="/img/loading.gif" alt="img"></p><p>欢迎关注微信公众号​：</p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006y8mN6gy1g7d3llw1nkj30b40b4wee.jpg" srcset="/img/loading.gif" alt="欢迎关注公众号" style="width: 100px" />]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SonarQube的使用-在idea&amp;eclipse中安装与使用sonarlint</title>
    <link href="/2019/09/26/SonarQube%E7%9A%84%E4%BD%BF%E7%94%A8-%E5%9C%A8idea&amp;eclipse%E4%B8%AD%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8sonarlint/"/>
    <url>/2019/09/26/SonarQube%E7%9A%84%E4%BD%BF%E7%94%A8-%E5%9C%A8idea&amp;eclipse%E4%B8%AD%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8sonarlint/</url>
    
    <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a><strong>介绍</strong></h3><p>​        代码质量管理的开源平台，用于管理源代码的质量 通过插件形式，可以支持包括java,C#,C/C++,PL/SQL,Cobol,JavaScrip,Groovy等等二十几种编程语言的代码质量管理与检测。集成了CheckStyle，PMD，Findbugs等工具校验规则，具有重复代码发现，代码测试覆盖率，代码注释率，及所有的检测率变化追踪的功能特性。</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a><strong>特点</strong></h3><p>​        SonarQube:开源的代码质量管控平台，我们使用的<a href="http://localhost:9000即为SonarQube。">http://localhost:9000即为SonarQube。</a></p><p>​        SonarLint:一个扩展插件，可以安装在idea与eclipse等开发工具中</p><h3 id="Eclipse中的使用"><a href="#Eclipse中的使用" class="headerlink" title="Eclipse中的使用"></a><strong>Eclipse中的使用</strong></h3><h4 id="1、-安装"><a href="#1、-安装" class="headerlink" title="1、  安装"></a>1、  安装</h4><p>​            help -&gt; eclipse marketplace…，搜索sonarlint, Install。</p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ympesx0zj30u00xmtba.jpg" srcset="/img/loading.gif" alt="eclipse marketplace"></p><h4 id="2、-使用"><a href="#2、-使用" class="headerlink" title="2、  使用"></a>2、  使用</h4><p>打开java文件，soanrlint会自动进行检测，对于不规范或有问题的代码会在下方划蓝色波浪线，如图：</p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ympglu0dj30vs0c2ab1.jpg" srcset="/img/loading.gif" alt="soanrlint"></p><p>鼠标放在蓝色部分会有弹框显示错误信息或建议修改信息</p><p>点击“open description of rule”可以查看具体的错误描述，错误示例及修改示例。</p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymphmzexj322s0okgqj.jpg" srcset="/img/loading.gif" alt="info"></p><p>在项目或单个java文件上右键 -&gt; sonarlint -&gt; Analyze 进行手动操作分析。这样SonarLint Report面板中查看所有的异常信息</p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ympkahq6j323a0om42c.jpg" srcset="/img/loading.gif" alt="error"></p><h4 id="3、Server"><a href="#3、Server" class="headerlink" title="3、Server"></a>3、Server</h4><p>连接SonarQube的主要目的是同步分析规则、质量规则与自定义设置。操作如下：</p><p>从Window -&gt; show view 中找到SonarLint Bindings打开；</p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ympltet3j30gw0n0gn5.jpg" srcset="/img/loading.gif" alt="open"></p><p>在该面板空白处 右键创建 server连接，选择SonarQube</p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ympmmr9zj30zy0n0jss.jpg" srcset="/img/loading.gif" alt="new"></p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ympnoy67j30zy0n03zm.jpg" srcset="/img/loading.gif" alt="url"></p><p>url为：<a href="http://localhost:9000" target="_blank" rel="noopener">http://localhost:9000</a></p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymppxsmgj30zy0n0js9.jpg" srcset="/img/loading.gif" alt="utoken"></p><p>使用UserName+Password或者token登陆</p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ympraf22j30zy0n0myf.jpg" srcset="/img/loading.gif" alt="token"></p><p>没有token可以点击右侧按钮创建，或者寻找管理员创建</p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ympt5lc9j30zy0n0q44.jpg" srcset="/img/loading.gif" alt="locahost"></p><p>配置名称</p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ympu9mwcj30zy0n0dgx.jpg" srcset="/img/loading.gif" alt="finish"></p><p>完成服务配置</p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ympv4ohxj30t60n0mxw.jpg" srcset="/img/loading.gif" alt="bind"></p><p>绑定工程，点击add</p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ympwi0fcj30l80ksjsq.jpg" srcset="/img/loading.gif" alt="add"></p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ympxit8fj30t60n0q3t.jpg" srcset="/img/loading.gif" alt="next"></p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ympyhmppj31qm0sawhz.jpg" srcset="/img/loading.gif" alt="setting"></p><p>输入sonarQube中创建的工程的名称</p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ympzptzaj30t60n0gmu.jpg" srcset="/img/loading.gif" alt="f"></p><p>完成</p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymq1afbhj323k0oaq5r.jpg" srcset="/img/loading.gif" alt=""></p><h4 id="4、-结果同步SonarQube显示"><a href="#4、-结果同步SonarQube显示" class="headerlink" title="4、 结果同步SonarQube显示"></a>4、 结果同步SonarQube显示</h4><p>在maven的settings.xml中配置如下：</p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymq283h7j31ey0gan0q.jpg" srcset="/img/loading.gif" alt="setting"></p><p>配置完成后，使用soanr:sonar命令运行项目，此部分要求JDK为1.8。<code>clean install sonar:sonar</code></p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymq40r24j326c0raqb5.jpg" srcset="/img/loading.gif" alt="package"></p><p>可以打开<a href="http://localhost:9000/dashboard?id=com.xxx查看对应的错误信息，也可以在SonarQube点击Issues进行查看" target="_blank" rel="noopener">http://localhost:9000/dashboard?id=com.xxx查看对应的错误信息，也可以在SonarQube点击Issues进行查看</a></p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymq5616rj31jw0b20vw.jpg" srcset="/img/loading.gif" alt=""></p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymq7qiowj315y0u0jtb.jpg" srcset="/img/loading.gif" alt=""></p><h3 id="IDEA中使用"><a href="#IDEA中使用" class="headerlink" title="IDEA中使用"></a><strong>IDEA中使用</strong></h3><h4 id="1、-安装-1"><a href="#1、-安装-1" class="headerlink" title="1、  安装"></a>1、  安装</h4><p>​            File -&gt; settings -&gt; plugins 搜索sonarLint，Install。</p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymq84v9pj31cg07074z.jpg" srcset="/img/loading.gif" alt="install"></p><h4 id="2、-使用-1"><a href="#2、-使用-1" class="headerlink" title="2、 使用"></a>2、 使用</h4><p>在左下角点击隐藏面板，可以看到sonarLint，打开</p><p>打开java文件，soanrlint会自动进行检测，对于不规范或有问题的代码会添加暗金色的背景色，鼠标放上去会有如图提示：</p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymqa33uhj315o0u0n20.jpg" srcset="/img/loading.gif" alt="error"></p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymqb0kjsj32hc0u0jy5.jpg" srcset="/img/loading.gif" alt="error"></p><p>也可以通过点击上图的绿色倒三角手动执行分析。</p><h4 id="3、-Server"><a href="#3、-Server" class="headerlink" title="3、 Server"></a>3、 Server</h4><p>连接SonarQube的主要目的是同步分析规则、质量规则与自定义设置。操作如下：</p><p>从File -&gt; settings -&gt; OtherSettings中找到“SonarLint General Settings”打开；</p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymqcut2ej31nq0q4mzv.jpg" srcset="/img/loading.gif" alt=""></p><p>点击加号，输入一个name，如localhost;选择SonarQube，Url为<a href="http://localhost9000；" target="_blank" rel="noopener">http://localhost9000；</a></p><p>选择Login/Password或者token，输入账号与密码或者token；</p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymqea12tj31nq0q4q51.jpg" srcset="/img/loading.gif" alt=""></p><p>finish</p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymqf8fetj31nq0q475u.jpg" srcset="/img/loading.gif" alt="finish"></p><p>勾选“Enable binding to remote SonarQube Server”,选择添加的server,搜索到你需要绑定的项目，然后选择确认。</p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymqg4txyj313s0u0dhl.jpg" srcset="/img/loading.gif" alt=""></p><h4 id="4、结果同步SonarQube显示"><a href="#4、结果同步SonarQube显示" class="headerlink" title="4、结果同步SonarQube显示"></a>4、结果同步SonarQube显示</h4><p>同Eclipse部分，此部分要求JDK为1.8。</p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymqh83gmj31330u0gnp.jpg" srcset="/img/loading.gif" alt=""></p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymqhzedij31330u0gnp.jpg" srcset="/img/loading.gif" alt="png"></p><p><strong>欢迎关注微信公众号​：</strong></p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006y8mN6gy1g7d3llw1nkj30b40b4wee.jpg" srcset="/img/loading.gif" alt="欢迎关注公众号" style="width: 100px" />]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>SonarQube</tag>
      
      <tag>SonarLint</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[SonarQube的使用] SonarQube安装</title>
    <link href="/2019/09/26/SonarQube%E7%9A%84%E4%BD%BF%E7%94%A8-SonarQube%E5%AE%89%E8%A3%85/"/>
    <url>/2019/09/26/SonarQube%E7%9A%84%E4%BD%BF%E7%94%A8-SonarQube%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h2 id="工欲善其事必先利其器"><a href="#工欲善其事必先利其器" class="headerlink" title="工欲善其事必先利其器"></a>工欲善其事必先利其器</h2><h3 id="一-SonarQube代码质量检查工具简介"><a href="#一-SonarQube代码质量检查工具简介" class="headerlink" title="一 . SonarQube代码质量检查工具简介"></a>一 . SonarQube代码质量检查工具简介</h3><blockquote><p>Sonar (SonarQube)是一个开源平台，用于管理源代码的质量</p><p>Sonar 不只是一个质量数据报告工具，更是代码质量管理平台</p></blockquote><p>支持Java, C#, C/C++, PL/SQL, Cobol, JavaScrip, Groovy 等等二十几种编程语言的代码质量管理与检测。</p><p>Sonar可以从以下七个维度检测代码质量，而作为开发人员至少需要处理前5种代码质量问题。</p><ol><li><p>不遵循代码标准</p></li><li><p>sonar可以通过PMD,CheckStyle,Findbugs等等代码规则检测工具规范代码编写。</p></li><li><p>潜在的缺陷</p><p>sonar可以通过PMD,CheckStyle,Findbugs等等代码规则检测工具检 测出潜在的缺陷。</p></li><li><p>糟糕的复杂度分布</p><p>文件、类、方法等，如果复杂度过高将难以改变，这会使得开发人员 难以理解它们, 且如果没有自动化的单元测试，对于程</p><p>序中的任何组件的改变都将可能导致需要全面的回归测试。</p></li><li><p>重复</p><p>显然程序中包含大量复制粘贴的代码是质量低下的，sonar可以展示 源码中重复严重的地方。</p></li><li><p>注释不足或者过多</p><p>没有注释将使代码可读性变差，特别是当不可避免地出现人员变动 时，程序的可读性将大幅下降 而过多的注释又会使得开发人员将精力过多地花费在阅读注释上，亦违背初衷。</p></li><li><p>缺乏单元测试</p><p>sonar可以很方便地统计并展示单元测试覆盖率。</p></li><li><p>糟糕的设计</p><p>通过sonar可以找出循环，展示包与包、类与类之间的相互依赖关系，可以检测自定义的架构规则 通过sonar可以管理第三方</p><p>的jar包，可以利用LCOM4检测单个任务规则的应用情况， 检测藕合。</p></li></ol><h4 id="为什么要选择sonarQube"><a href="#为什么要选择sonarQube" class="headerlink" title="为什么要选择sonarQube?"></a>为什么要选择sonarQube?</h4><p>个人使用之后认为 : sonarQube的优势如下(相比于阿里编码规约这种市面上常见类似软件):</p><ol><li><p>更加优秀的图形化界面</p><p>基本上通过界面就可以对自己项目的代码状况一目了然</p></li><li><p>可以查询出其它软件难以定位到的问题</p><p>比如 : </p><p>可能导致空指针异常的问题 (对象在进行使用前没有加空的判断)</p><p>可能导致内存泄漏的问题, 在try catch 块里面,直接使用e.printStackTrace()将堆栈信息打印到内存的</p><p>可能导致的漏洞 : 成员变量使用public定义的</p><p>还有诸如 : 流等未关闭或者是非正常关闭都能够检测出来!</p><p>功能非常强大!!</p></li></ol><h3 id="二-安装："><a href="#二-安装：" class="headerlink" title="二. 安装："></a>二. 安装：</h3><h4 id="2-1-安装SonarQube-web-server"><a href="#2-1-安装SonarQube-web-server" class="headerlink" title="2.1 安装SonarQube web server"></a>2.1 安装SonarQube web server</h4><ol><li><p>首先确保安装了jdk1.8 +</p></li><li><p>到此链接 <a href="https://www.sonarqube.org/downloads/" target="_blank" rel="noopener">https://www.sonarqube.org/downloads/</a> </p><p>下载sonalqube(下载社区版,是开源的),</p></li></ol><p>我下载的是sonarqube-7.2.1，因为最新版<strong>7.9.1</strong>需要<strong>jdk11</strong>支持</p><p>并解压,解压完之后的目录如下 :</p><p>  <img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymoi44lcj31eo0omagi.jpg" srcset="/img/loading.gif" alt=""></p><ol start="3"><li><p>到解压目录的bin\macosx-universal-64(对应系统)目录下:</p><p>linux、Mac <code>sh sonar.sh start</code>启动</p><p>windows 双击<code>StartSonar.bat</code> 启动</p></li><li><p>到浏览器界面,输入 : <a href="http://localhost:9000" target="_blank" rel="noopener">http://localhost:9000</a> </p><p>如果能访问表明安装成功</p></li></ol><h4 id="2-2-安装数据库"><a href="#2-2-安装数据库" class="headerlink" title="2.2 安装数据库"></a>2.2 安装数据库</h4><ol><li><p>版本要求:</p><p>在conf目录下的sonar.properties文件下:</p><p>有这样一行配置 : </p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#----- MySQL &gt;=5.6 &amp;&amp; &lt; 8.0</span><br></code></pre></td></tr></table></figure></li><li><p>为sonarqube 创建一个数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">database</span> sonar;<br><span class="hljs-comment">-- 创建数据库</span><br></code></pre></td></tr></table></figure></li><li><p>创建sonarqube用户并进行授权</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">'username'</span>@<span class="hljs-string">'host'</span> <span class="hljs-keyword">IDENTIFIED</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">'password'</span>; <br><span class="hljs-comment">-- 创建用户并设置密码</span><br><span class="hljs-comment">-- username 为创建的用户名</span><br><span class="hljs-comment">-- host 为对应的主机地址,本地就是localhost</span><br><span class="hljs-comment">-- password 为设置的密码</span><br><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">ALL</span> <span class="hljs-keyword">ON</span> *.* <span class="hljs-keyword">TO</span> <span class="hljs-string">'username'</span>@<span class="hljs-string">'localhost'</span>;<br><span class="hljs-comment">-- 对用户进行授权操作</span><br></code></pre></td></tr></table></figure></li><li><p>修改SonarQube配置文件,添加Mysql相关配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">sonar.jdbc.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/sonar?useUnicode=true&amp;characterEncoding=utf8&amp;rewriteBatchedStatements=true&amp;useConfigs=maxPerformance&amp;useSSL=false</span><br><span class="hljs-comment"># 刚刚创建的sonarQube用户</span><br><span class="hljs-meta">sonar.jdbc.username</span>=<span class="hljs-string">sonar</span><br><span class="hljs-comment"># 创建用户对应的密码</span><br><span class="hljs-meta">sonar.jdbc.password</span>=<span class="hljs-string">sonar</span><br><span class="hljs-comment"># 设置编码格式为UTF-8</span><br><span class="hljs-meta">sonar.sorceEncoding</span>=<span class="hljs-string">UTF-8</span><br><span class="hljs-comment"># sonar登陆用户名</span><br><span class="hljs-meta">sonar.login</span>=<span class="hljs-string">admin</span><br><span class="hljs-comment"># sonar登陆密码</span><br><span class="hljs-meta">sonar.password</span>=<span class="hljs-string">admin</span><br></code></pre></td></tr></table></figure></li></ol><h4 id="2-3-重新启动服务端"><a href="#2-3-重新启动服务端" class="headerlink" title="2.3 重新启动服务端"></a>2.3 重新启动服务端</h4><ol><li><p>退出 SonarQube 服务端</p><p>在之前弹出的cmd窗口执行ctrl + c,</p><p>弹出来的提示选择Y,退出SonarQube服务</p></li><li><p>双击StartSonar.bat文件, 重新启动SonarQube</p><p>这次因为要进行数据库的初始化操作,所以需要的时间可能稍微久一点</p></li><li><p>启动成功后,浏览器输入 : <a href="http://localhost:9000" target="_blank" rel="noopener">http://localhost:9000</a> 进入界面</p></li><li><p>登录 </p><p>点击界面右上角的登录按钮, 进行登录 :</p><p>初始的账户名 : admin</p><p>初始的密码  :  admin</p><p>附 : 一些关键配置的修改,如 主机地址,context,端口号等:</p><p>通常情况下使用默认的配置即可!</p><p>文件 /conf/sonar.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#sonar.web.host=0.0.0.0 </span><br><span class="hljs-comment">#sonar.web.context=</span><br><span class="hljs-comment">#sonar.web.port=9000</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="三-使用"><a href="#三-使用" class="headerlink" title="三. 使用"></a>三. 使用</h3><h4 id="3-1-安装必要的插件-汉化包举例"><a href="#3-1-安装必要的插件-汉化包举例" class="headerlink" title="3.1. 安装必要的插件 (汉化包举例)"></a>3.1. 安装必要的插件 (汉化包举例)</h4><p>点击 导航栏的 Administration, 选择Marketplace</p><p>搜索 Chinese pack, 点击install进行安装</p><p>安装成功后, 重启 SonarQube !</p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymoldzq6j31jr0u0wk8.jpg" srcset="/img/loading.gif" alt="pack"></p><h4 id="3-2-开始分析项目代码源代码"><a href="#3-2-开始分析项目代码源代码" class="headerlink" title="3.2. 开始分析项目代码源代码"></a>3.2. 开始分析项目代码源代码</h4><p>使用maven的方式进行分析</p><h5 id="3-2-1-编辑maven-的settings-xml文件"><a href="#3-2-1-编辑maven-的settings-xml文件" class="headerlink" title="3.2.1 编辑maven 的settings.xml文件"></a>3.2.1 编辑maven 的settings.xml文件</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">pluginGroups</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">pluginGroup</span>&gt;</span>org.sonarsource.scanner.maven<span class="hljs-tag">&lt;/<span class="hljs-name">pluginGroup</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">pluginGroups</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">profiles</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>sonar<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">activation</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">activeByDefault</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">activeByDefault</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">activation</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">sonar.host.url</span>&gt;</span>http://loaclhost:9000<span class="hljs-tag">&lt;/<span class="hljs-name">sonar.host.url</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">profiles</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></td></tr></table></figure><p>其中sonar.host.url 值就是 上文启动的sonar 服务器地址。</p><h5 id="3-2-2-对maven项目进行分析"><a href="#3-2-2-对maven项目进行分析" class="headerlink" title="3.2.2 对maven项目进行分析"></a>3.2.2 对maven项目进行分析</h5><p>到项目所在的文件路径下: </p><p>使用命令提示符或者是power shell执行 如下命令: </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mvn org.sonarsource.scanner.maven:sonar-maven-plugin:3.6.0.1398:sonar<br></code></pre></td></tr></table></figure><p>出现: BUILD SUCCESS 标识之后</p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymomt8guj32dq0sutlb.jpg" srcset="/img/loading.gif" alt="BUILD SUCCESS"></p><p>刷新界面查看 :</p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymopjdz6j31bv0u0n3x.jpg" srcset="/img/loading.gif" alt=""></p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymoqvxqaj31bv0u0n3x.jpg" srcset="/img/loading.gif" alt=""></p><h4 id="3-3-配置分析参数"><a href="#3-3-配置分析参数" class="headerlink" title="3.3 配置分析参数"></a>3.3 配置分析参数</h4><p>强制参数：    </p><ol><li>Server<br>sonar.host.url        <a href="http://localhost:9000" target="_blank" rel="noopener">http://localhost:9000</a></li><li>Project Configuration<br>sonar.projectKey              Maven   <groupId>:<artifactId><br>sonar.sources                  Maven 默认的源码路径</li></ol><p>可以配置的参数：</p><ol><li>Project identity<br>sonar.projectName        项目名称<br>sonar.projectversion     项目版本</li><li>Authentication<br>sonar.login                  分析该项目的用户名称<br>sonar.password                分析该项目的用户密码</li></ol><h4 id="3-4-程序员用户使用说明"><a href="#3-4-程序员用户使用说明" class="headerlink" title="3.4. 程序员用户使用说明"></a>3.4. 程序员用户使用说明</h4><p>SonarQube Web管理者通过配置和设置以下参数值对项目源代码进行：</p><p>复杂度、覆盖率、文档、重复、问题、可维护性、可靠性、安全性、大小等约束和规范。</p><p>sonar中的质量阈管理以下内容。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs scheme">复杂度<br>复杂度<br>复杂度/类<br>复杂度/文件<br>复杂度/方法<br>覆盖率<br>分支覆盖<br>集成测试的新分支覆盖<br>新代码的分支覆盖率<br>覆盖率<br>新集成测试覆盖<br>新覆盖率<br>集成测试分支覆盖<br>集成测试覆盖<br>集成测试覆盖行<br>集成测试未覆盖分支<br>集成测试未覆盖行<br>代码覆盖率<br>集成测试的新行覆盖<br>新代码覆盖率<br>代码行<br>集成测试的新行覆盖<br>覆盖的新代码<br>总体分支覆盖率<br>总体新分支覆盖率<br>总体覆盖率<br>总体新覆盖率<br>总体代码覆盖率<br>总体新代码覆盖率<br>总体覆盖的新行数<br>总体未覆盖分支<br>总体未覆盖的新分支<br>总体未覆盖代码<br>总体未覆盖新行数<br>单元测试忽略数<br>未覆盖分支<br>集成测试未覆盖的新分支<br>未覆盖新分支<br>未覆盖的代码<br>集成测试未覆盖的行<br>未覆盖的新代码<br>单元测试持续时间<br>单元测试错误数<br>单元测试失败数<br>单元测试成功 (%)<br>单元测试数<br>文档<br>注释行<br>注释 (%)<br>公共API<br>公共注释的API (%)<br>公共未注释的API<br>重复<br>重复块<br>重复文件<br>重复行<br>重复行(%)<br>问题<br>阻断违规<br>确认问题<br>严重违规<br>误判问题<br>提示违规<br>违规<br>主要违规<br>次要违规<br>新阻断违规<br>新严重违规<br>新提示违规<br>新违规<br>新主要违规<br>新次要违规<br>开启问题<br>重开问题<br>不修复的问题<br>可维护性<br>新代码的技术债务<br>坏味道<br>达到可维护性A级所需的工作<br>新增坏味道<br>技术债务<br>技术债务比率<br>新代码技术债务比率<br>Management<br>Burned budget<br>Business value<br>Team size<br>可靠性<br>Bugs<br>新增Bugs<br>可靠性修复工作<br>新代码的可靠性修复工作<br>安全性<br>新增漏洞<br>安全修复工作<br>新代码的安全修复工作<br>漏洞<br>大小<br>类<br>目录<br>文件<br>方法<br>生成的行数<br>生成的代码行数<br>行数<br>代码行数<br>项目<br>语句<br></code></pre></td></tr></table></figure><p><strong>欢迎关注微信公众号​：</strong></p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006y8mN6gy1g7d3llw1nkj30b40b4wee.jpg" srcset="/img/loading.gif" alt="欢迎关注公众号" style="width: 100px" />]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>SonarQube</tag>
      
      <tag>Sonar</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>教程|教你如何给你的头像添加一个好看的国旗</title>
    <link href="/2019/09/24/%E6%95%99%E7%A8%8B-%E6%95%99%E4%BD%A0%E5%A6%82%E4%BD%95%E7%BB%99%E4%BD%A0%E7%9A%84%E5%A4%B4%E5%83%8F%E6%B7%BB%E5%8A%A0%E4%B8%80%E4%B8%AA%E5%A5%BD%E7%9C%8B%E7%9A%84%E5%9B%BD%E6%97%97/"/>
    <url>/2019/09/24/%E6%95%99%E7%A8%8B-%E6%95%99%E4%BD%A0%E5%A6%82%E4%BD%95%E7%BB%99%E4%BD%A0%E7%9A%84%E5%A4%B4%E5%83%8F%E6%B7%BB%E5%8A%A0%E4%B8%80%E4%B8%AA%E5%A5%BD%E7%9C%8B%E7%9A%84%E5%9B%BD%E6%97%97/</url>
    
    <content type="html"><![CDATA[<p>今天朋友圈又火了，听说原因是 <strong>@腾讯官网</strong> 就能得到一顶绿色的帽子，啊呸，是一个好看的国庆节头像，可是听说没一会就502了，那么我们自己动手实现一个吧</p><p>由于代码比较简单就不一一介绍了。</p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> cvs = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"cvs"</span>);<br><span class="hljs-keyword">var</span> ctx = cvs.getContext(<span class="hljs-string">"2d"</span>);<br><span class="hljs-keyword">var</span> exportImage = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"export"</span>);<br><span class="hljs-keyword">var</span> img = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"img"</span>);<br><span class="hljs-keyword">var</span> hat = <span class="hljs-string">"hat6"</span>;<br><span class="hljs-keyword">var</span> canvasFabric;<br><span class="hljs-keyword">var</span> hatInstance;<br><span class="hljs-keyword">var</span> screenWidth = <span class="hljs-built_in">window</span>.screen.width &lt; <span class="hljs-number">500</span> ? <span class="hljs-built_in">window</span>.screen.width : <span class="hljs-number">300</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">viewer</span>(<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-keyword">var</span> file = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"upload"</span>).files[<span class="hljs-number">0</span>];<br><span class="hljs-built_in">console</span>.log(file);<br><span class="hljs-keyword">var</span> reader = <span class="hljs-keyword">new</span> FileReader;<br><span class="hljs-keyword">if</span> (file) &#123;<br>reader.readAsDataURL(file);<br>reader.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;<br>img.src = reader.result;<br>img.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>img2Cvs(img)<br>&#125;<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>img.src = <span class="hljs-string">""</span><br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">img2Cvs</span>(<span class="hljs-params">img</span>) </span>&#123;<br>cvs.width = img.width;<br>cvs.height = img.height;<br>cvs.style.display = <span class="hljs-string">"block"</span>;<br>canvasFabric = <span class="hljs-keyword">new</span> fabric.Canvas(<span class="hljs-string">"cvs"</span>, &#123;<br>width: screenWidth,<br>height: screenWidth,<br>backgroundImage: <span class="hljs-keyword">new</span> fabric.Image(img, &#123;<br>scaleX: screenWidth / img.width,<br>scaleY: screenWidth / img.height<br>&#125;)<br>&#125;);<br>changeHat();<br><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"uploadContainer"</span>).style.display = <span class="hljs-string">"none"</span>;<br><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"uploadText"</span>).style.display = <span class="hljs-string">"none"</span>;<br><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"upload"</span>).style.display = <span class="hljs-string">"none"</span>;<br><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"change"</span>).style.display = <span class="hljs-string">"block"</span>;<br><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"exportBtn"</span>).style.display = <span class="hljs-string">"block"</span>;<br><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"tip"</span>).style.opacity = <span class="hljs-number">1</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">changeHat</span>(<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-built_in">document</span>.getElementById(hat).style.display = <span class="hljs-string">"none"</span>;<br><span class="hljs-keyword">var</span> hats = <span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">"hide"</span>);<br>hat = <span class="hljs-string">"hat"</span> + (+hat.replace(<span class="hljs-string">"hat"</span>, <span class="hljs-string">""</span>) + <span class="hljs-number">1</span>) % hats.length;<br><span class="hljs-keyword">var</span> hatImage = <span class="hljs-built_in">document</span>.getElementById(hat);<br>hatImage.style.display = <span class="hljs-string">"block"</span>;<br><span class="hljs-keyword">if</span> (hatInstance) &#123;<br>canvasFabric.remove(hatInstance)<br>&#125;<br>hatInstance = <span class="hljs-keyword">new</span> fabric.Image(hatImage, &#123;<br>top: <span class="hljs-number">40</span>,<br>left: screenWidth / <span class="hljs-number">3</span>,<br>scaleX: <span class="hljs-number">100</span> / hatImage.width,<br>scaleY: <span class="hljs-number">100</span> / hatImage.height,<br>cornerColor: <span class="hljs-string">"#0b3a42"</span>,<br>cornerStrokeColor: <span class="hljs-string">"#fff"</span>,<br>cornerStyle: <span class="hljs-string">"circle"</span>,<br>transparentCorners: <span class="hljs-literal">false</span>,<br>rotatingPointOffset: <span class="hljs-number">30</span><br>&#125;);<br>hatInstance.setControlVisible(<span class="hljs-string">"bl"</span>, <span class="hljs-literal">false</span>);<br>hatInstance.setControlVisible(<span class="hljs-string">"tr"</span>, <span class="hljs-literal">false</span>);<br>hatInstance.setControlVisible(<span class="hljs-string">"tl"</span>, <span class="hljs-literal">false</span>);<br>hatInstance.setControlVisible(<span class="hljs-string">"mr"</span>, <span class="hljs-literal">false</span>);<br>hatInstance.setControlVisible(<span class="hljs-string">"mt"</span>, <span class="hljs-literal">false</span>);<br>canvasFabric.add(hatInstance)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">exportFunc</span>(<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">"canvas-container"</span>)[<span class="hljs-number">0</span>].style.display = <span class="hljs-string">"none"</span>;<br><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"exportBtn"</span>).style.display = <span class="hljs-string">"none"</span>;<br><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"tip"</span>).innerHTML = <span class="hljs-string">"长按图片保存或分享"</span>;<br><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"change"</span>).style.display = <span class="hljs-string">"none"</span>;<br>cvs.style.display = <span class="hljs-string">"none"</span>;<br>exportImage.style.display = <span class="hljs-string">"block"</span>;<br>exportImage.src = canvasFabric.toDataURL(&#123;<br>width: screenWidth,<br>height: screenWidth<br>&#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>最后效果</p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymmwsocwj31tg0roq69.jpg" srcset="/img/loading.gif" alt="image-20190924171759373"></p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymmxqcayj30t80lgjte.jpg" srcset="/img/loading.gif" alt="image-20190924171817825"></p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymmzogrjj315m0kejur.jpg" srcset="/img/loading.gif" alt="image-20190924171842699">拖动图片可见已经拼合成一张完整图片了</p><p>右键查看源代码</p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymn2ezqkj31jm0c0784.jpg" srcset="/img/loading.gif" alt="image-20190924171947774"></p><p>源码地址：<a href="https://github.com/alterem/avatar.git" target="_blank" rel="noopener">https://github.com/alterem/avatar.git</a></p><p>演示地址：<a href="http://alterem.gitee.io/avatar/" target="_blank" rel="noopener">http://alterem.gitee.io/avatar/</a></p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>Javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在SpringMVC项目中使用HIkariCP</title>
    <link href="/2019/06/24/%E5%9C%A8SpringMVC%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8HIkariCP/"/>
    <url>/2019/06/24/%E5%9C%A8SpringMVC%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8HIkariCP/</url>
    
    <content type="html"><![CDATA[<h4 id="什么是HIkariCP"><a href="#什么是HIkariCP" class="headerlink" title="什么是HIkariCP"></a>什么是HIkariCP</h4><blockquote><p><a href="https://www.jianshu.com/p/15b846107a7c" target="_blank" rel="noopener">https://www.jianshu.com/p/15b846107a7c</a></p></blockquote><h4 id="使用HikariCP数据源"><a href="#使用HikariCP数据源" class="headerlink" title="使用HikariCP数据源"></a>使用HikariCP数据源</h4><h5 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.zaxxer<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>HikariCP<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><a id="more"></a><h5 id="Spring-mvc-xml"><a href="#Spring-mvc-xml" class="headerlink" title="Spring-mvc.xml"></a>Spring-mvc.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"dataSource"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.zaxxer.hikari.HikariDataSource"</span> <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">"shutdown"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"driverClassName"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$&#123;jdbc.driver&#125;"</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"jdbcUrl"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$&#123;jdbc.url&#125;"</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"username"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$&#123;jdbc.username&#125;"</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$&#123;jdbc.password&#125;"</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"connectionTestQuery"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"SELECT 1"</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 生效超时 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"validationTimeout"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"3000"</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!-- 连接只读数据库时配置为true， 保证安全 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"readOnly"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"false"</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!-- 等待连接池分配连接的最大时长（毫秒），超过这个时长还没可用的连接则发生SQLException， 缺省:30秒 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"connectionTimeout"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"60000"</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!-- 一个连接idle状态的最大时长（毫秒），超时则被释放（retired），缺省:10分钟 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"idleTimeout"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"60000"</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!-- 一个连接的生命时长（毫秒），超时而且没被使用则被释放（retired），缺省:30分钟，建议设置比数据库超时时长少30秒，参考MySQL</span><br><span class="hljs-comment">            wait_timeout参数（show variables like '%timeout%';） --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"maxLifetime"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"60000"</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!-- 连接池中允许的最大连接数。缺省值：10；推荐的公式：((core_count * 2) + effective_spindle_count) --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"maximumPoolSize"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"10"</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="启动成功日志"><a href="#启动成功日志" class="headerlink" title="启动成功日志"></a>启动成功日志</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs bash">17:36:50.838 [main] WARN  com.zaxxer.hikari.HikariConfig - HikariPool-1 - idleTimeout has been <span class="hljs-built_in">set</span> but has no effect because the pool is operating as a fixed size pool.<br>17:36:50.838 [main] DEBUG com.zaxxer.hikari.HikariConfig - HikariPool-1 - configuration:<br>17:36:50.841 [main] DEBUG com.zaxxer.hikari.HikariConfig - allowPoolSuspension.............false<br>17:36:50.841 [main] DEBUG com.zaxxer.hikari.HikariConfig - autoCommit......................true<br>17:36:50.841 [main] DEBUG com.zaxxer.hikari.HikariConfig - catalog.........................none<br>17:36:50.841 [main] DEBUG com.zaxxer.hikari.HikariConfig - connectionInitSql...............none<br>17:36:50.841 [main] DEBUG com.zaxxer.hikari.HikariConfig - connectionTestQuery.............<span class="hljs-string">"SELECT 1"</span><br>17:36:50.841 [main] DEBUG com.zaxxer.hikari.HikariConfig - connectionTimeout...............60000<br>17:36:50.841 [main] DEBUG com.zaxxer.hikari.HikariConfig - dataSource......................none<br>17:36:50.841 [main] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceClassName.............none<br>17:36:50.841 [main] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceJNDI..................none<br>17:36:50.843 [main] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceProperties............&#123;password=&lt;masked&gt;&#125;<br>17:36:50.843 [main] DEBUG com.zaxxer.hikari.HikariConfig - driverClassName.................<span class="hljs-string">"com.mysql.jdbc.Driver"</span><br>17:36:50.843 [main] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckProperties...........&#123;&#125;<br>17:36:50.843 [main] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckRegistry.............none<br>17:36:50.843 [main] DEBUG com.zaxxer.hikari.HikariConfig - idleTimeout.....................60000<br>17:36:50.843 [main] DEBUG com.zaxxer.hikari.HikariConfig - initializationFailTimeout.......1<br>17:36:50.843 [main] DEBUG com.zaxxer.hikari.HikariConfig - isolateInternalQueries..........false<br>17:36:50.843 [main] DEBUG com.zaxxer.hikari.HikariConfig - jdbcUrl.........................jdbc:mysql://ykx.uerp.net:3306/ykx?useUnicode=<span class="hljs-literal">true</span>&amp;characterEncoding=utf8<br>17:36:50.843 [main] DEBUG com.zaxxer.hikari.HikariConfig - leakDetectionThreshold..........0<br>17:36:50.843 [main] DEBUG com.zaxxer.hikari.HikariConfig - maxLifetime.....................60000<br>17:36:50.843 [main] DEBUG com.zaxxer.hikari.HikariConfig - maximumPoolSize.................10<br>17:36:50.843 [main] DEBUG com.zaxxer.hikari.HikariConfig - metricRegistry..................none<br>17:36:50.843 [main] DEBUG com.zaxxer.hikari.HikariConfig - metricsTrackerFactory...........none<br>17:36:50.843 [main] DEBUG com.zaxxer.hikari.HikariConfig - minimumIdle.....................10<br>17:36:50.843 [main] DEBUG com.zaxxer.hikari.HikariConfig - password........................&lt;masked&gt;<br>17:36:50.843 [main] DEBUG com.zaxxer.hikari.HikariConfig - poolName........................<span class="hljs-string">"HikariPool-1"</span><br>17:36:50.843 [main] DEBUG com.zaxxer.hikari.HikariConfig - readOnly........................false<br>17:36:50.843 [main] DEBUG com.zaxxer.hikari.HikariConfig - registerMbeans..................false<br>17:36:50.844 [main] DEBUG com.zaxxer.hikari.HikariConfig - scheduledExecutor...............none<br>17:36:50.844 [main] DEBUG com.zaxxer.hikari.HikariConfig - schema..........................none<br>17:36:50.844 [main] DEBUG com.zaxxer.hikari.HikariConfig - threadFactory...................internal<br>17:36:50.844 [main] DEBUG com.zaxxer.hikari.HikariConfig - transactionIsolation............default<br>17:36:50.844 [main] DEBUG com.zaxxer.hikari.HikariConfig - username........................<span class="hljs-string">"ykx"</span><br>17:36:50.844 [main] DEBUG com.zaxxer.hikari.HikariConfig - validationTimeout...............3000<br>17:36:50.844 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...<br>17:36:51.257 [main] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.jdbc.JDBC4Connection@1d77a31d<br>17:36:51.260 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>HIkariCP</tag>
      
      <tag>DataSource</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MyBatis在Spring环境下的事务管理</title>
    <link href="/2019/06/13/MyBatis%E5%9C%A8Spring%E7%8E%AF%E5%A2%83%E4%B8%8B%E7%9A%84%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86/"/>
    <url>/2019/06/13/MyBatis%E5%9C%A8Spring%E7%8E%AF%E5%A2%83%E4%B8%8B%E7%9A%84%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>MyBatis的设计思想很简单，可以看做是对JDBC的一次封装，并提供强大的动态SQL映射功能。但是由于它本身也有一些缓存、事务管理等功能，所以实际使用中还是会碰到一些问题——另外，最近接触了JFinal，其思想和Hibernate类似，但要更简洁，和MyBatis的设计思想不同，但有一点相同：都是想通过简洁的设计最大限度地简化开发和提升性能——说到性能，前段时间碰到两个问题： </p><ol><li>在一个上层方法（DAO方法的上层）内删除一条记录，然后再插入一条相同<strong>主键</strong>的记录时，会报主键冲突的错误。     </li><li>某些项目中的DAO方法平均执行时间会是其他一些项目中的 <strong>2倍</strong> 。     </li></ol><p>第一个问题是偶尔会出现，在实验环境无论如何也重现不了，经过分析MyBatis的逻辑，估计是两个DAO分别拿到了两个不同的Connection，第二个语句比第一个更早的被提交，导致了主键冲突，有待进一步的分析和验证。对于第二个问题，本文将尝试通过分析源代码和实验找到它的root cause，主要涉及到以下内容： </p><ol><li><p>问题描述与分析     </p></li><li><p>MyBatis在Spring环境下的载入过程     </p></li><li><p>MyBatis在Spring环境下事务的管理     </p></li><li><p>实验验证     </p></li></ol><a id="more"></a><h3 id="项目环境"><a href="#项目环境" class="headerlink" title="项目环境"></a>项目环境</h3><p>整个系统是微服务架构，这里讨论的「项目」是指一个单独的服务。单个项目的框架基本是Spring+MyBatis，具体版本如下： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Spring <span class="hljs-number">3.2</span><span class="hljs-number">.9</span>/<span class="hljs-number">4.3</span><span class="hljs-number">.5</span> + Mybatis <span class="hljs-number">3.2</span><span class="hljs-number">.6</span> + mybatis-spring <span class="hljs-number">1.2</span><span class="hljs-number">.2</span> + mysql connector <span class="hljs-number">5.1</span><span class="hljs-number">.20</span> + commons-dbcp <span class="hljs-number">1.4</span><br></code></pre></td></tr></table></figure><p>与MyBatis和事务相关的配置如下： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//代码1</span><br>&lt;!-- bean#1--&gt;<br> &lt;bean id=<span class="hljs-string">"dataSource"</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"org.apache.commons.dbcp.BasicDataSource"</span><br>        destroy-method=<span class="hljs-string">"close"</span>&gt;<br>        &lt;!-- 一些数据库信息配置--&gt;<br>        &lt;!-- 一些DBCP连接池配置 --&gt;<br>         <span class="hljs-comment">//在这里设置是否自动提交</span><br>        &lt;property name=<span class="hljs-string">"defaultAutoCommit"</span> value=<span class="hljs-string">"$&#123;dbcp.defaultAutoCommit&#125;"</span> /&gt;<br>  &lt;/bean&gt;<br>&lt;!-- bean#2--&gt;<br>  &lt;bean id=<span class="hljs-string">"sqlSessionFactory"</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;<br>        &lt;property name=<span class="hljs-string">"dataSource"</span> ref=<span class="hljs-string">"dataSource"</span> /&gt;<br>        &lt;property name=<span class="hljs-string">"mapperLocations"</span> value=<span class="hljs-string">"classpath*:path/to/mapper/**/*.xml"</span> /&gt;<br>  &lt;/bean&gt;<br>&lt;!-- bean#3 --&gt;<br>  &lt;bean id=<span class="hljs-string">"transactionManager"</span><br>        <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;<br>        &lt;property name=<span class="hljs-string">"dataSource"</span> ref=<span class="hljs-string">"dataSource"</span> /&gt;<br>  &lt;/bean&gt;<br>&lt;!-- bean#4--&gt;<br>  &lt;bean <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;<br>        &lt;property name=<span class="hljs-string">"basePackage"</span> value=<span class="hljs-string">".path.to.mapper"</span> /&gt;<br>        &lt;property name=<span class="hljs-string">"sqlSessionFactoryBeanName"</span> value=<span class="hljs-string">"sqlSessionFactory"</span>/&gt;<br>  &lt;/bean&gt;<br> &lt;!-- bean5 --&gt;<br>  &lt;tx:annotation-driven transaction-manager=<span class="hljs-string">"transactionManager"</span> /&gt;<br></code></pre></td></tr></table></figure><h3 id="问题描述与分析"><a href="#问题描述与分析" class="headerlink" title="问题描述与分析"></a>问题描述与分析</h3><p>一倍的时间差挺严重的，平均到每次调用，正常的大约在6到10几     <code>ms</code>，慢的要近20     <code>ms</code>，由于调用次数很多，导致整体性能会有很大的差别。经过仔细比对这几个项目，发现DAO执行慢的项目的数据源配置（bean#1）中<code>defaultAutoCommit</code>的配置都是<code>false</code>。而且将此配置改为 <code>true</code>之后就恢复了正常。 </p><p>由此推断是在MyBatis在执行「非自动提交」语句时，进行等待，或者多提交了一次，导致实际调用数据库API次数增多。但是这个推断也有个问题，由于整个项目是在Spring环境中运行的，而且也开启了Spring的事务管理，所以还是需要详细的看一下MyBatis到底是如何装配DAO方法与管理事务的，才能彻底解开谜团。 </p><h3 id="问题重现"><a href="#问题重现" class="headerlink" title="问题重现"></a>问题重现</h3><p>首先写一个Service，其中调用了同一个mapper类的两个方法分别2次，<code>insertModelList()</code>会在数据库中插入两条记录，<code>delModels()</code>方法会删除这两条记录，代码如下： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//代码2</span><br><span class="hljs-comment">//@Transactional</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testIS</span><span class="hljs-params">()</span></span>&#123;<br>    List&lt;Model&gt; models= <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    <span class="hljs-comment">//省略一些数据工作。。。</span><br>    modelMapper.insertModelList(<span class="hljs-number">50001l</span>, models);<br>    modelMapper.delModels(<span class="hljs-number">50001</span>);<br>    <span class="hljs-keyword">if</span> (CollectionUtils.isNotEmpty(models))<br>        modelMapper.insertModelList(<span class="hljs-number">50001</span>, models);<br>    modelMapper.delModels(<span class="hljs-number">50001</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testOther</span><span class="hljs-params">()</span></span>&#123;<br>    System.out.println(<span class="hljs-string">"加载类："</span>);<br>    System.out.println(modelMapper.getClass().getClassLoader());<br>    modelMapper.delModels(<span class="hljs-number">50001</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>实际项目中使用cat来进行执行时间的统计，这里也仿照cat，使用一个单独的AOP类实现时间的计算： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//代码3</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DaoTimeAdvice</span> </span>&#123;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> time = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> num = <span class="hljs-number">0</span>;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">calcTime</span><span class="hljs-params">(ProceedingJoinPoint joinPoint)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>    <span class="hljs-keyword">long</span> then = System.nanoTime();<br>    Object object = joinPoint.proceed();<br>    <span class="hljs-keyword">long</span> now = System.nanoTime();<br>    setTime(getTime() + (now-then));<br>    setNum(getNum() + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> object;<br>  &#125;<br>  <span class="hljs-comment">//省略getter &amp; setter。。。</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printInfo</span><span class="hljs-params">()</span> </span>&#123;<br>    System.out.println(<span class="hljs-string">"总共次数："</span> + num);<br>    System.out.println(<span class="hljs-string">"总共时间："</span> + time);<br>    System.out.println(<span class="hljs-string">"平均时间："</span> + time / num);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试代码： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//代码4</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>    System.out.println(<span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">"[yyyy-MM-dd HH:mm:ss]"</span>).format(<span class="hljs-keyword">new</span> Date())<br>            + <span class="hljs-string">" 开始测试!"</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; TEST_NUM; i++) &#123;<br>        ItemStrategyServiceTest ist = (ItemStrategyServiceTest) context.getBean(<span class="hljs-string">"isTS"</span>);<br>        ist.testIS();<br>        <span class="hljs-keyword">if</span> (i % <span class="hljs-number">1000</span> == <span class="hljs-number">0</span>) &#123;<br>            System.out.println(<span class="hljs-string">"1000次"</span>);<br>        &#125;<br>    &#125;<br>    DaoTimeAdvice ad = (DaoTimeAdvice) context.getBean(<span class="hljs-string">"daoTimeAdvice"</span>);<br>    ad.printInfo();<br>    ItemStrategyServiceTest ist = (ItemStrategyServiceTest) context.getBean(<span class="hljs-string">"isTS"</span>);<br>    ist.testOther();<br>    System.exit(<span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>测试结果： </p><table><thead><tr><th><code>defaultAutoCommit</code></th><th>循环次数</th><th>共消耗时间(ns)</th><th>平均时间(ns)</th></tr></thead><tbody><tr><td>true</td><td>40000</td><td>17831088316</td><td>445777</td></tr><tr><td>true</td><td>40000</td><td>17881589992</td><td>447039</td></tr><tr><td>false</td><td>40000</td><td>27280458229</td><td>682011</td></tr><tr><td>false</td><td>40000</td><td>27237413893</td><td>680935</td></tr></tbody></table><p>defaultAutoCommit为<code>false</code>时的执行时间是<code>true</code>的近1.5倍，并没有重现2倍的时间消耗，估计是在cat统计或者其他AOP方法的执行时还有其他消耗，从而扩大了<code>false</code>和<code>true</code>之间的区别。 </p><h3 id="MyBatis在Spring环境下的载入过程"><a href="#MyBatis在Spring环境下的载入过程" class="headerlink" title="MyBatis在Spring环境下的载入过程"></a>MyBatis在Spring环境下的载入过程</h3><p>按照第一节中的配置文件，整个MyBatis中DAO的bean的装配应该是这样的： </p><ol><li><p>先使用BasicDataSource装配一个数据源的bean（bean#1），名字叫做<code>dataSource</code>。         </p><p>这个bean很简单，就是实例化并注册到Spring的上下文中。         </p></li><li><p>使用<code>dataSource</code>来创建<code>sqlSessionFactory</code>（bean#2)，这个bean创建时会扫描MyBatis的语句映射文件并解析。         </p><p>在MyBatis中，真正的数据库读写操作是通过SqlSession的实例来实现的，而SqlSession要通过SQLSessionFactory来管理。这里的 <code>org.mybatis.spring.SqlSessionFactoryBean</code>实现了FactoryBean类（这个类比较特殊，与主题无关，这里不再赘述），Spring会从这个bean中会获取真正的SQLSessionFactory的实例，源代码中显示，实际返回的对象是DefaultSqlSessionFactory的实例。         </p></li><li><p>使用<code>sqlSessionFactory</code>这个工厂类来创建mapper扫描器（bean#4），并创建含有DAO方法的实例。         </p><p>为了让上层方法可以通过普通的方法调用来使用DAO方法，需要往Spring上下文里注册相应的bean，而在MyBatis的普通使用场景中是没有mapper的实现类的（具体的SQL语句映射通过注解或者XML文件来实现），只有接口，在MyBatis中这些接口是通过动态代理实现的。这里使用的类是 <code>org.mybatis.spring.mapper.MapperScannerConfigurer</code>，它实现了<code>org.springframework.beans.factory.support.BeanDefinitionRegistryPostProcessor</code>接口，所以会在Spring中「所有的bean定义全部注册完成，但还没有实例化」之前，调用方法向Spring上下文注册mapper实现类（动态代理的对象）。具体代码如下：         </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-comment">//代码5</span><br> <span class="hljs-meta">@Override</span><br> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">postProcessBeanDefinitionRegistry</span><span class="hljs-params">(BeanDefinitionRegistry registry)</span> </span>&#123;<br>   <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.processPropertyPlaceHolders) &#123;<br>     processPropertyPlaceHolders();<br>   &#125;<br><br>   ClassPathMapperScanner scanner = <span class="hljs-keyword">new</span> ClassPathMapperScanner(registry);<br>   <span class="hljs-comment">//设置一些属性</span><br><br>   scanner.scan(StringUtils.tokenizeToStringArray(<span class="hljs-keyword">this</span>.basePackage, ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS));<br> &#125;<br><br> <span class="hljs-comment">/**</span><br><span class="hljs-comment">* Perform a scan within the specified base packages.</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> basePackages the packages to check for annotated classes</span><br><span class="hljs-comment">* <span class="hljs-doctag">@return</span> number of beans registered</span><br><span class="hljs-comment">*/</span><br> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">scan</span><span class="hljs-params">(String... basePackages)</span> </span>&#123;<br>   <span class="hljs-keyword">int</span> beanCountAtScanStart = <span class="hljs-keyword">this</span>.registry.getBeanDefinitionCount();<br><br>   doScan(basePackages);<br><br>   <span class="hljs-comment">// Register annotation config processors, if necessary.</span><br>   <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.includeAnnotationConfig) &#123;<br>     AnnotationConfigUtils.registerAnnotationConfigProcessors(<span class="hljs-keyword">this</span>.registry);<br>   &#125;<br><br>   <span class="hljs-keyword">return</span> (<span class="hljs-keyword">this</span>.registry.getBeanDefinitionCount() - beanCountAtScanStart);<br> &#125;<br></code></pre></td></tr></table></figure><p>在源代码里可以看到，真正的mapper实现类是<code>org.mybatis.spring.mapper.MapperFactoryBean&lt;Object&gt;</code>，具体的逻辑在方法<code>org.mybatis.spring.mapper.ClassPathMapperScanner.processBeanDefinitions(Set&lt;BeanDefinitionHolder&gt;)</code>里。最后，每一个方法的执行，最终落入了             <code>org.mybatis.spring.SqlSessionTemplate</code>的某个方法中，并被如下这个拦截器拦截：         </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//代码6</span><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Proxy needed to route MyBatis method calls to the proper SqlSession got</span><br><span class="hljs-comment">   * from Spring's Transaction Manager</span><br><span class="hljs-comment">   * It also unwraps exceptions thrown by &#123;<span class="hljs-doctag">@code</span> Method#invoke(Object, Object...)&#125; to</span><br><span class="hljs-comment">   * pass a &#123;<span class="hljs-doctag">@code</span> PersistenceException&#125; to the &#123;<span class="hljs-doctag">@code</span> PersistenceExceptionTranslator&#125;.</span><br><span class="hljs-comment">   */</span><br><span class="hljs-keyword">private</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SqlSessionInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">InvocationHandler</span> </span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>  SqlSession sqlSession = getSqlSession(<br>      SqlSessionTemplate.<span class="hljs-keyword">this</span>.sqlSessionFactory,<br>      SqlSessionTemplate.<span class="hljs-keyword">this</span>.executorType,<br>      SqlSessionTemplate.<span class="hljs-keyword">this</span>.exceptionTranslator);<br>  <span class="hljs-keyword">try</span> &#123;<br>    Object result = method.invoke(sqlSession, args);<br>    <span class="hljs-keyword">if</span> (!isSqlSessionTransactional(sqlSession, SqlSessionTemplate.<span class="hljs-keyword">this</span>.sqlSessionFactory)) &#123;<br>      <span class="hljs-comment">// force commit even on non-dirty sessions because some databases require</span><br>      <span class="hljs-comment">// a commit/rollback before calling close()</span><br>      sqlSession.commit(<span class="hljs-keyword">true</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>  &#125; <span class="hljs-keyword">catch</span> (Throwable t) &#123;<br>    <span class="hljs-comment">//省略一些错误处理</span><br>    <span class="hljs-keyword">throw</span> unwrapped;<br>  &#125; <span class="hljs-keyword">finally</span> &#123;<br>    <span class="hljs-keyword">if</span> (sqlSession != <span class="hljs-keyword">null</span>) &#123;<br>      closeSqlSession(sqlSession, SqlSessionTemplate.<span class="hljs-keyword">this</span>.sqlSessionFactory);<br>    &#125;<br>  &#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>MyBatis在Spring环境下事务的管理         </p><p>从源代码中知道真正的SqlSessionFactory使用的是<code>org.apache.ibatis.session.defaults.DefaultSqlSessionFactory</code>的实例，同时，事务管理使用     <code>org.mybatis.spring.transaction.SpringManagedTransactionFactory</code>。但是在代码1的配置中，还添加了Spring事务管理的配置，就是在某个Service方法（或某个其他可被扫描到的方法）上加上<code>@Transactional</code>注解，那么Spring的事务管理会自动创建事务，那么它和MyBatis的事务之间是怎么协作的呢？         </p><p>可以看到在代码6中的方法<code>isSqlSessionTransactional()</code>，它会返回上层代码中是否有Spring的事务，如果有，将不会执行下边的<code>commit()</code>。在我的项目中的实际情况是没有Spring事务，所以肯定是走到了下面的<code>commit()</code>，这个方法最终落到了<code>SpringManagedTransactionFactory</code>中的<code>commit()</code>，看代码：         </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//代码7</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">openConnection</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br>  <span class="hljs-keyword">this</span>.connection = DataSourceUtils.getConnection(<span class="hljs-keyword">this</span>.dataSource);<br>  <span class="hljs-keyword">this</span>.autoCommit = <span class="hljs-keyword">this</span>.connection.getAutoCommit();<br>  <span class="hljs-keyword">this</span>.isConnectionTransactional = DataSourceUtils.isConnectionTransactional(<span class="hljs-keyword">this</span>.connection, <span class="hljs-keyword">this</span>.dataSource);<br>   <br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">commit</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.connection != <span class="hljs-keyword">null</span> &amp;&amp; !<span class="hljs-keyword">this</span>.isConnectionTransactional &amp;&amp; !<span class="hljs-keyword">this</span>.autoCommit) &#123;<br>    <span class="hljs-keyword">if</span> (LOGGER.isDebugEnabled()) &#123;<br>      LOGGER.debug(<span class="hljs-string">"Committing JDBC Connection ["</span> + <span class="hljs-keyword">this</span>.connection + <span class="hljs-string">"]"</span>);<br>    &#125;<br>    <span class="hljs-keyword">this</span>.connection.commit();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到，此处是否要执行<code>commit()</code>操作是由3个变量决定的，如果DataSource的 <code>autoCommit</code>是 <code>false</code>，则其结果一定为 <code>true</code>，控制台也会看到一行日志：<code>Committing JDBC Connection [xxxxxx]</code>，刚好与项目中遇到的情况相同。这个提交动作是需要和数据库交互的，比较耗时。         </p></li></ol><h3 id="实验验证"><a href="#实验验证" class="headerlink" title="实验验证"></a>实验验证</h3><p>由上一节分析得出，造成DAO方法执行时间变长的原因是会多执行一次提交，那么如果上层方法被Spring事务管理器托管（或者数据源的     <code>defaultAutoCommit</code>为     <code>true</code>，这个条件已经在刚开始的问题重现被验证），则不会执行MyBatis的提交动作，DAO方法应该相应的执行时间会变短。于是将Service方法加上     <code>@transactional</code>注解，分别测试     <code>true</code>和     <code>false</code>的情况。结果： </p><table><thead><tr><th align="left">defaultCommit</th><th align="left">循环次数</th><th align="left">共消耗时间</th><th align="left">平均时间</th></tr></thead><tbody><tr><td align="left">true</td><td align="left">40000</td><td align="left">7017113852</td><td align="left">175427</td></tr><tr><td align="left">false</td><td align="left">40000</td><td align="left">7283591630</td><td align="left">182089</td></tr></tbody></table><p>可以看到执行的时间已经基本接近，由此基本可以确定是这个原因造成的。这里仍然有几个疑点，尤其是问题重现时没有出现2倍的时间消耗，如果你有别的想法，也欢迎提出来讨论。 </p><p><strong>欢迎关注微信公众号​：</strong></p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006y8mN6gy1g7d3llw1nkj30b40b4wee.jpg" srcset="/img/loading.gif" alt="欢迎关注公众号" style="width: 100px" />]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>MyBatis</tag>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CAS4.0分布式部署以及使用Redis缓存共享ticket</title>
    <link href="/2019/06/12/CAS4-0%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8Redis%E7%BC%93%E5%AD%98%E5%85%B1%E4%BA%ABticket/"/>
    <url>/2019/06/12/CAS4-0%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8Redis%E7%BC%93%E5%AD%98%E5%85%B1%E4%BA%ABticket/</url>
    
    <content type="html"><![CDATA[<p>CAS4.0分布式部署以及使用Redis缓存共享ticket </p><p>当业务不断拓展，系统用户在不断增加时，我们的平台统一登录认证服务无法承受当前压力。此时，我们需要分布式部署我们的统一登录认证服务。 </p><p>CAS的分布式部署，除了注意session共享，通过nginx或者apache反向代理外，还需要注意票据ticket的存储共享。 在ticketRegistry.xml文件中，配置ticket相关的信息。</p><a id="more"></a><p>主要配置：1.注册ticket存储，2.定时清除过期ticket。 </p><p>由于我们使用的Redis缓存Key设置了过期时间，因此可以注释掉清除过期ticket的定时器及相关类。</p><p>编写新的ticket存储类需要继承类AbstractDistributedTicketRegistry。代码如下： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cas.ticket;  <br>  <br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;  <br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;  <br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;  <br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;  <br><span class="hljs-keyword">import</span> java.util.Collection;  <br>  <br><span class="hljs-keyword">import</span> org.jasig.cas.ticket.Ticket;  <br><span class="hljs-keyword">import</span> org.jasig.cas.ticket.TicketGrantingTicket;  <br><span class="hljs-keyword">import</span> org.jasig.cas.ticket.registry.AbstractDistributedTicketRegistry;  <br>  <br><span class="hljs-keyword">import</span> cn.net.xinyi.util.SysPropertiesUtil;  <br><span class="hljs-keyword">import</span> redis.clients.jedis.Jedis;  <br><span class="hljs-keyword">import</span> redis.clients.jedis.JedisPool;  <br><span class="hljs-keyword">import</span> redis.clients.jedis.JedisPoolConfig;  <br>  <br><span class="hljs-comment">/** </span><br><span class="hljs-comment"> * 使用Redis存储Ticket </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> XIVA </span><br><span class="hljs-comment"> */</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RedisTicketRegistry</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractDistributedTicketRegistry</span>  </span><br><span class="hljs-class"></span>&#123;  <br>  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> redisDatabaseNum;  <br>  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String hosts;  <br>      <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> port;  <br>      <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> connTimeout;  <br>      <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String redisPassword;  <br>  <br>    <span class="hljs-comment">/** </span><br><span class="hljs-comment">     * ST最大空闲时间 </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> st_time;  <br>  <br>    <span class="hljs-comment">/** </span><br><span class="hljs-comment">     * TGT最大空闲时间 </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> tgt_time;  <br>  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> JedisPool cachePool;  <br>  <br>    <span class="hljs-keyword">static</span>  <br>    &#123;  <br>        redisDatabaseNum = SysPropertiesUtil.getPropertyInt(<span class="hljs-string">"redis_database_num"</span>);  <br>  <br>        hosts = SysPropertiesUtil.getProperty(<span class="hljs-string">"redis_hosts"</span>);  <br>          <br>        port = SysPropertiesUtil.getPropertyInt(<span class="hljs-string">"redis_port"</span>);  <br>  <br>        connTimeout = SysPropertiesUtil.getPropertyInt(<span class="hljs-string">"redis_conn_timeout"</span>);  <br>          <br>        redisPassword = SysPropertiesUtil.getProperty(<span class="hljs-string">"redis_password"</span>);  <br>  <br>        st_time = SysPropertiesUtil.getPropertyInt(<span class="hljs-string">"st_time"</span>);  <br>  <br>        tgt_time = SysPropertiesUtil.getPropertyInt(<span class="hljs-string">"tgt_time"</span>);  <br>  <br>        cachePool = <span class="hljs-keyword">new</span> JedisPool(<span class="hljs-keyword">new</span> JedisPoolConfig(), hosts, port, connTimeout, redisPassword);  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addTicket</span><span class="hljs-params">(Ticket ticket)</span>  </span><br><span class="hljs-function">    </span>&#123;  <br>        Jedis jedis = cachePool.getResource();  <br>  <br>        jedis.select(redisDatabaseNum);  <br>  <br>        <span class="hljs-keyword">int</span> seconds = <span class="hljs-number">0</span>;  <br>  <br>        String key = ticket.getId();  <br>  <br>        <span class="hljs-keyword">if</span> (ticket <span class="hljs-keyword">instanceof</span> TicketGrantingTicket)  <br>        &#123;  <br>            seconds = tgt_time / <span class="hljs-number">1000</span>;  <br>        &#125;  <br>        <span class="hljs-keyword">else</span>  <br>        &#123;  <br>            seconds = st_time / <span class="hljs-number">1000</span>;  <br>        &#125;  <br>  <br>        ByteArrayOutputStream bos = <span class="hljs-keyword">new</span> ByteArrayOutputStream();  <br>        ObjectOutputStream oos = <span class="hljs-keyword">null</span>;  <br>  <br>        <span class="hljs-keyword">try</span>  <br>        &#123;  <br>  <br>            oos = <span class="hljs-keyword">new</span> ObjectOutputStream(bos);  <br>  <br>            oos.writeObject(ticket);  <br>  <br>        &#125;  <br>        <span class="hljs-keyword">catch</span> (Exception e)  <br>        &#123;  <br>            logger.error(<span class="hljs-string">"adding ticket to redis error."</span>);  <br>        &#125;  <br>        <span class="hljs-keyword">finally</span>  <br>        &#123;  <br>            <span class="hljs-keyword">try</span>  <br>            &#123;  <br>                <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> != oos)  <br>                    oos.close();  <br>  <br>            &#125;  <br>            <span class="hljs-keyword">catch</span> (Exception e)  <br>            &#123;  <br>                logger.error(<span class="hljs-string">"oos closing error when adding ticket to redis."</span>);  <br>            &#125;  <br>        &#125;  <br>  <br>        jedis.set(key.getBytes(), bos.toByteArray());  <br>        jedis.expire(key.getBytes(), seconds);  <br>        jedis.close();  <br>  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">deleteTicket</span><span class="hljs-params">(String ticketId)</span>  </span><br><span class="hljs-function">    </span>&#123;  <br>        <span class="hljs-keyword">if</span> (ticketId == <span class="hljs-keyword">null</span>)  <br>        &#123;  <br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;  <br>        &#125;  <br>  <br>        Jedis jedis = cachePool.getResource();  <br>        jedis.select(redisDatabaseNum);  <br>          <br>        jedis.del(ticketId.getBytes());  <br>        jedis.close();  <br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Ticket <span class="hljs-title">getTicket</span><span class="hljs-params">(String ticketId)</span>  </span><br><span class="hljs-function">    </span>&#123;  <br>        <span class="hljs-keyword">return</span> getProxiedTicketInstance(getRawTicket(ticketId));  <br>    &#125;  <br>  <br>    <span class="hljs-function"><span class="hljs-keyword">private</span> Ticket <span class="hljs-title">getRawTicket</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String ticketId)</span>  </span><br><span class="hljs-function">    </span>&#123;  <br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == ticketId)  <br>        &#123;  <br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;  <br>        &#125;  <br>  <br>        Jedis jedis = cachePool.getResource();  <br>        jedis.select(redisDatabaseNum);  <br>        Ticket ticket = <span class="hljs-keyword">null</span>;  <br>        <span class="hljs-keyword">byte</span>[] bytes = jedis.get(ticketId.getBytes());  <br>        <span class="hljs-keyword">if</span> (bytes == <span class="hljs-keyword">null</span> || bytes.length &lt; <span class="hljs-number">1</span>)  <br>        &#123;  <br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;  <br>        &#125;  <br>        ByteArrayInputStream bais = <span class="hljs-keyword">new</span> ByteArrayInputStream(bytes);  <br>        ObjectInputStream ois = <span class="hljs-keyword">null</span>;  <br>  <br>        <span class="hljs-keyword">try</span>  <br>        &#123;  <br>            ois = <span class="hljs-keyword">new</span> ObjectInputStream(bais);  <br>            ticket = (Ticket) ois.readObject();  <br>        &#125;  <br>        <span class="hljs-keyword">catch</span> (Exception e)  <br>        &#123;  <br>            e.printStackTrace();  <br>            logger.error(<span class="hljs-string">"getting ticket to redis error."</span>);  <br>        &#125;  <br>        <span class="hljs-keyword">finally</span>  <br>        &#123;  <br>            <span class="hljs-keyword">try</span>  <br>            &#123;  <br>                <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> != ois)  <br>                &#123;  <br>                    ois.close();  <br>                &#125;  <br>            &#125;  <br>            <span class="hljs-keyword">catch</span> (Exception e)  <br>            &#123;  <br>                e.printStackTrace();  <br>                logger.error(<span class="hljs-string">"ois closing error when getting ticket to redis."</span>);  <br>            &#125;  <br>        &#125;  <br>  <br>        jedis.close();  <br>        <span class="hljs-keyword">return</span> ticket;  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Collection&lt;Ticket&gt; <span class="hljs-title">getTickets</span><span class="hljs-params">()</span>  </span><br><span class="hljs-function">    </span>&#123;  <br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> UnsupportedOperationException(<span class="hljs-string">"GetTickets not supported."</span>);    <br>    &#125;  <br>  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">needsCallback</span><span class="hljs-params">()</span>  </span><br><span class="hljs-function">    </span>&#123;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateTicket</span><span class="hljs-params">(Ticket ticket)</span>  </span><br><span class="hljs-function">    </span>&#123;  <br>        <span class="hljs-keyword">this</span>.addTicket(ticket);    <br>    &#125;  <br>  <br>&#125;<br></code></pre></td></tr></table></figure><p>变更后的ticketRegistry.xml代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>  <br><span class="hljs-comment">&lt;!--  </span><br><span class="hljs-comment">  </span><br><span class="hljs-comment">    Licensed to Jasig under one or more contributor license  </span><br><span class="hljs-comment">    agreements. See the NOTICE file distributed with this work  </span><br><span class="hljs-comment">    for additional information regarding copyright ownership.  </span><br><span class="hljs-comment">    Jasig licenses this file to you under the Apache License,  </span><br><span class="hljs-comment">    Version 2.0 (the "License"); you may not use this file  </span><br><span class="hljs-comment">    except in compliance with the License.  You may obtain a  </span><br><span class="hljs-comment">    copy of the License at the following location:  </span><br><span class="hljs-comment">  </span><br><span class="hljs-comment">      http://www.apache.org/licenses/LICENSE-2.0  </span><br><span class="hljs-comment">  </span><br><span class="hljs-comment">    Unless required by applicable law or agreed to in writing,  </span><br><span class="hljs-comment">    software distributed under the License is distributed on an  </span><br><span class="hljs-comment">    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  </span><br><span class="hljs-comment">    KIND, either express or implied.  See the License for the  </span><br><span class="hljs-comment">    specific language governing permissions and limitations  </span><br><span class="hljs-comment">    under the License.  </span><br><span class="hljs-comment">  </span><br><span class="hljs-comment">--&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span>  </span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span>  </span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:p</span>=<span class="hljs-string">"http://www.springframework.org/schema/p"</span>  </span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>  <br>        Configuration for the default TicketRegistry which stores the tickets in-memory and cleans them out as specified intervals.  <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span>  <br>         <br>  <span class="hljs-comment">&lt;!-- Ticket Registry   </span><br><span class="hljs-comment">  &lt;bean id="ticketRegistry" class="org.jasig.cas.ticket.registry.DefaultTicketRegistry" /&gt;  </span><br><span class="hljs-comment">  --&gt;</span>  <br>    <br>  <span class="hljs-comment">&lt;!-- ticket store on redis db  --&gt;</span>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"ticketRegistry"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"cas.ticket.RedisTicketRegistry"</span> /&gt;</span>  <br>    <br>    <span class="hljs-comment">&lt;!--Quartz --&gt;</span>  <br>    <span class="hljs-comment">&lt;!-- TICKET REGISTRY CLEANER   </span><br><span class="hljs-comment">    &lt;bean id="ticketRegistryCleaner" class="org.jasig.cas.ticket.registry.support.DefaultTicketRegistryCleaner"  </span><br><span class="hljs-comment">        p:ticketRegistry-ref="ticketRegistry"  </span><br><span class="hljs-comment">        p:logoutManager-ref="logoutManager" /&gt;  </span><br><span class="hljs-comment">      </span><br><span class="hljs-comment">    &lt;bean id="jobDetailTicketRegistryCleaner" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"  </span><br><span class="hljs-comment">        p:targetObject-ref="ticketRegistryCleaner"  </span><br><span class="hljs-comment">        p:targetMethod="clean" /&gt;  </span><br><span class="hljs-comment">      </span><br><span class="hljs-comment">    &lt;bean id="triggerJobDetailTicketRegistryCleaner" class="org.springframework.scheduling.quartz.SimpleTriggerBean"  </span><br><span class="hljs-comment">        p:jobDetail-ref="jobDetailTicketRegistryCleaner"  </span><br><span class="hljs-comment">        p:startDelay="20000"  </span><br><span class="hljs-comment">        p:repeatInterval="5000000" /&gt; --&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Cas</tag>
      
      <tag>Redis</tag>
      
      <tag>Ticket</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring极速集成注解Redis实践</title>
    <link href="/2019/06/12/Spring%E6%9E%81%E9%80%9F%E9%9B%86%E6%88%90%E6%B3%A8%E8%A7%A3Redis%E5%AE%9E%E8%B7%B5/"/>
    <url>/2019/06/12/Spring%E6%9E%81%E9%80%9F%E9%9B%86%E6%88%90%E6%B3%A8%E8%A7%A3Redis%E5%AE%9E%E8%B7%B5/</url>
    
    <content type="html"><![CDATA[<p>Redis 做为基于内存的 Key-Value 数据库，用来做缓存服务器性价比相当高。 </p><p>官方推出的面向 Java 的 Client Jedis，提供了很多接口和方法，可以让 Java 操作使用 Redis。 </p><p>Spring 团队对 Jedis 进行了封装，独立为 spring-data-redis 项目，配合 spring 特性并集成 Jedis 的一些命令和方法。 </p><p>本文重点描述集成过程，能让你迅速的通过 spring-data-redis 将 redis 集成到 spring 项目中,毕竟大家都忙的。 </p><a id="more"></a><h3 id="1-添加项目依赖"><a href="#1-添加项目依赖" class="headerlink" title="1. 添加项目依赖"></a>1. 添加项目依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--redis 缓存--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.data<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.8.4.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>redis.clients<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jedis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-添加-spring-redis-context-配置"><a href="#2-添加-spring-redis-context-配置" class="headerlink" title="2. 添加 spring-redis-context 配置"></a>2. 添加 spring-redis-context 配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">"http://www.springframework.org/schema/context"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans</span></span><br><span class="hljs-tag"><span class="hljs-string">                        http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</span></span><br><span class="hljs-tag"><span class="hljs-string">                        http://www.springframework.org/schema/context</span></span><br><span class="hljs-tag"><span class="hljs-string">                        http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>redis 相关类 Spring 托管<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--载入 redis 配置文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">"classpath:redis.properties"</span> <span class="hljs-attr">ignore-unresolvable</span>=<span class="hljs-string">"true"</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 配置 JedisPoolConfig 实例 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"poolConfig"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"redis.clients.jedis.JedisPoolConfig"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"maxIdle"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$&#123;redis.maxIdle&#125;"</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"maxTotal"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$&#123;redis.maxActive&#125;"</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"maxWaitMillis"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$&#123;redis.maxWait&#125;"</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"testOnBorrow"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$&#123;redis.testOnBorrow&#125;"</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 配置JedisConnectionFactory --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"jedisConnectionFactory"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.data.redis.connection.jedis.JedisConnectionFactory"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"hostName"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$&#123;redis.host&#125;"</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"port"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$&#123;redis.port&#125;"</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$&#123;redis.pass&#125;"</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"database"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$&#123;redis.dbIndex&#125;"</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"poolConfig"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"poolConfig"</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 配置RedisTemplate --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"redisTemplate"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.data.redis.core.RedisTemplate"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"connectionFactory"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"jedisConnectionFactory"</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 配置RedisCacheManager --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"redisCacheManager"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.data.redis.cache.RedisCacheManager"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"redisOperations"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"redisTemplate"</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"defaultExpiration"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$&#123;redis.expiration&#125;"</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 配置RedisCacheConfig --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"redisCacheConfig"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.rambo.sdh.common.util.RedisCacheConfig"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"jedisConnectionFactory"</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"redisTemplate"</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"redisCacheManager"</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>JedisConnectionFactory 为 Jedis 连接工厂，配置由单独抽象的 JedisPoolConfig 提供。 </p><p>如果你熟悉 Spring 的 JdbcTemplate 对象的话，这里大概能猜出来 RedisTemplate 的作用，RedisTemplate 对 RedisConnection 进行了封装。 </p><p>提供连接管理，序列化等功能，它对 Redis 的交互进行了更高层次的抽象，极大的方便和简化了 Redis 的操作。 </p><p>RedisCacheManager 做为 redis 统一的调度和管理者，有兴趣可以反编译源码看看。 </p><p>继承自 org.springframework.cache.transaction.AbstractTransactionSupportingCacheManager 并实现 org.springframework.cache.CacheManager。 </p><h3 id="3-添加-redis-properties"><a href="#3-添加-redis-properties" class="headerlink" title="3. 添加 redis.properties"></a>3. 添加 redis.properties</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#============================#</span><br><span class="hljs-comment">#==== Redis settings ====#</span><br><span class="hljs-comment">#============================#</span><br><span class="hljs-comment">#redis 服务器 IP</span><br><span class="hljs-meta">redis.host</span>=<span class="hljs-string">127.0.0.1</span><br><br><span class="hljs-comment">#redis 服务器端口</span><br><span class="hljs-meta">redis.port</span>=<span class="hljs-string">6379</span><br><br><span class="hljs-comment">#redis 密码</span><br><span class="hljs-meta">redis.pass</span>=<span class="hljs-string">redis#2017</span><br><br><span class="hljs-comment">#redis 支持16个数据库（相当于不同用户）可以使不同的应用程序数据彼此分开同时又存储在相同的实例上</span><br><span class="hljs-meta">redis.dbIndex</span>=<span class="hljs-string">0</span><br><br><span class="hljs-comment">#redis 缓存数据过期时间单位秒</span><br><span class="hljs-meta">redis.expiration</span>=<span class="hljs-string">3000</span><br><br><span class="hljs-comment">#控制一个 pool 最多有多少个状态为 idle 的jedis实例</span><br><span class="hljs-meta">redis.maxIdle</span>=<span class="hljs-string">300</span><br><br><span class="hljs-comment">#控制一个 pool 可分配多少个jedis实例</span><br><span class="hljs-meta">redis.maxActive</span>=<span class="hljs-string">600</span><br><br><span class="hljs-comment">#当borrow一个jedis实例时，最大的等待时间，如果超过等待时间，则直接抛出JedisConnectionException；</span><br><span class="hljs-meta">redis.maxWait</span>=<span class="hljs-string">1000</span><br><br><span class="hljs-comment">#在borrow一个jedis实例时，是否提前进行alidate操作；如果为true，则得到的jedis实例均是可用的；</span><br><span class="hljs-meta">redis.testOnBorrow</span>=<span class="hljs-string">true</span><br></code></pre></td></tr></table></figure><p>当然配置文件你也可以硬编码到程序中，只是在参数发生改变的时候比较痛苦一点而已。 </p><p>其中大部分配置项都是围绕着 jedisPool ，如果你对数据库连接池比较熟，你会发现它俩的配置项有点相似。 </p><p>当系统 redis 遇到问题出现故障时，理解这里的选项是个不错的选择。 </p><p>更多配置项详解: </p><blockquote><p><a href="https://link.zhihu.com/?target=http%3A//www.2cto.com/database/201311/254449.html">http://www.2cto.com/database/201311/254449.html</a> </p></blockquote><h3 id="4-编写自定义-redis-配置类"><a href="#4-编写自定义-redis-配置类" class="headerlink" title="4. 编写自定义 redis 配置类"></a>4. 编写自定义 redis 配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableCaching</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RedisCacheConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">CachingConfigurerSupport</span> </span>&#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> Logger log = LoggerFactory.getLogger(RedisCacheConfig<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> JedisConnectionFactory mJedisConnectionFactory;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> RedisTemplate&lt;String, String&gt; mRedisTemplate;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> RedisCacheManager mRedisCacheManager;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">RedisCacheConfig</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">RedisCacheConfig</span><span class="hljs-params">(JedisConnectionFactory mJedisConnectionFactory, RedisTemplate&lt;String, String&gt; mRedisTemplate, RedisCacheManager mRedisCacheManager)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>();<br>        <span class="hljs-keyword">this</span>.mJedisConnectionFactory = mJedisConnectionFactory;<br>        <span class="hljs-keyword">this</span>.mRedisTemplate = mRedisTemplate;<br>        <span class="hljs-keyword">this</span>.mRedisCacheManager = mRedisCacheManager;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> JedisConnectionFactory <span class="hljs-title">redisConnectionFactory</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> mJedisConnectionFactory;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> RedisTemplate&lt;String, String&gt; <span class="hljs-title">redisTemplate</span><span class="hljs-params">(RedisConnectionFactory cf)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> mRedisTemplate;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> CacheManager <span class="hljs-title">cacheManager</span><span class="hljs-params">(RedisTemplate&lt;?, ?&gt; redisTemplate)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> mRedisCacheManager;<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> KeyGenerator <span class="hljs-title">keyGenerator</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> KeyGenerator() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">generate</span><span class="hljs-params">(Object o, Method method, Object... objects)</span> </span>&#123;<br>                StringBuilder sb = <span class="hljs-keyword">new</span> StringBuilder();<br>                sb.append(o.getClass().getName());<br>                sb.append(method.getName());<br>                <span class="hljs-keyword">for</span> (Object obj : objects) &#123;<br>                    sb.append(obj.toString());<br>                &#125;<br>                <span class="hljs-keyword">return</span> sb.toString();<br>            &#125;<br>        &#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>该配置类继承自 org.springframework.cache.annotation.CachingConfigurerSupport 并实现 org.springframework.cache.annotation.CachingConfigurer 的方法。 </p><p>通俗一点，该类告诉 spring 当前使用的缓存服务为 redis 并自定义了缓存 key 生成的规则。 </p><h3 id="5-在你喜欢的地方进行注解缓存"><a href="#5-在你喜欢的地方进行注解缓存" class="headerlink" title="5. 在你喜欢的地方进行注解缓存"></a>5. 在你喜欢的地方进行注解缓存</h3><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ympcrzd7j30k00bvwfe.jpg" srcset="/img/loading.gif" alt="img"></p><p>spring缓存一般使用在服务层，在你想缓存的方法上面添加相应的注解即可，下面三个缓存的注解你得掌握。 </p><ul><li>@Cacheable spring 会在其被调用后将返回值缓存起来，以保证下次利用同样的参数来执行该方法时可以直接从缓存中获取结果，而不需要再次执行该方法。     </li><li>@CachePut 标注的方法在执行前不会去检查缓存中是否存在之前执行过的结果，而是每次都会执行该方法，并将执行结果以键值对的形式存入指定的缓存中。     </li><li>@CacheEvict 用来标注在需要清除缓存元素的方法或类上的。     </li></ul><p>当然这些注解里面还有很多其他的属性配置，配合 spring-el 表达式能做的事情还有很多，大概只有你想不到，没有做不到。 </p><p>在业务规则比较复杂的情况下，缓存 key 的设计相当重要，设计出色可以使你的应用飞起来。 </p><p>整个集成工作就结束了，是不是很简单，上述算是 redis 的冰山一角，还有很多像 redis 路由/分布式/集群….，有机会实践慢慢体会。 </p><p><strong>欢迎关注微信公众号​：</strong></p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006y8mN6gy1g7d3llw1nkj30b40b4wee.jpg" srcset="/img/loading.gif" alt="欢迎关注公众号" style="width: 100px" />]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
      <tag>Java</tag>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>运算符优先级</title>
    <link href="/2019/06/12/%E8%BF%90%E7%AE%97%E7%AC%A6%E4%BC%98%E5%85%88%E7%BA%A7/"/>
    <url>/2019/06/12/%E8%BF%90%E7%AE%97%E7%AC%A6%E4%BC%98%E5%85%88%E7%BA%A7/</url>
    
    <content type="html"><![CDATA[<p>Java 运算符优先级</p><table><thead><tr><th align="left">运算符</th><th align="left">优先级</th></tr></thead><tbody><tr><td align="left">postfix</td><td align="left"><em>expr</em>++ <em>expr</em>–</td></tr><tr><td align="left">unary</td><td align="left">++<em>expr</em> –<em>expr</em> +<em>expr</em> -<em>expr</em> ~ !</td></tr><tr><td align="left">multiplicative</td><td align="left">* / %</td></tr><tr><td align="left">additive</td><td align="left">+ -</td></tr><tr><td align="left">shift</td><td align="left">&lt;&lt; &gt;&gt; &gt;&gt;&gt;</td></tr><tr><td align="left">relational</td><td align="left">&lt; &gt; &lt;= &gt;= instanceof</td></tr><tr><td align="left">equality</td><td align="left">== !=</td></tr><tr><td align="left">bitwise AND</td><td align="left">&amp;</td></tr><tr><td align="left">bitwise exclusive OR</td><td align="left">^</td></tr><tr><td align="left">bitwise inclusive OR</td><td align="left">&#124;</td></tr><tr><td align="left">logical AND</td><td align="left">&amp;&amp;</td></tr><tr><td align="left">logical OR</td><td align="left">&#124;&#124;</td></tr><tr><td align="left">ternary</td><td align="left">? :</td></tr><tr><td align="left">assignment</td><td align="left">= += -= *= /= %= &amp;= ^=</td></tr></tbody></table><p>C++运算符优先级</p><table><thead><tr><th align="left">Precedence</th><th align="left">Operator</th><th align="left">Description</th><th align="left">Associativity</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">::</td><td align="left">Scope resolution</td><td align="left">Left-to-right</td></tr><tr><td align="left">2</td><td align="left">++    –</td><td align="left">Suffix/postfix increment and decrement</td><td align="left"></td></tr><tr><td align="left"></td><td align="left">()</td><td align="left">Function call</td><td align="left"></td></tr><tr><td align="left"></td><td align="left">[]</td><td align="left">Array subscripting</td><td align="left"></td></tr><tr><td align="left"></td><td align="left">.</td><td align="left">Element selection by reference</td><td align="left"></td></tr><tr><td align="left"></td><td align="left">−&gt;</td><td align="left">Element selection through pointer</td><td align="left"></td></tr><tr><td align="left">3</td><td align="left">++    –</td><td align="left">Prefix increment and decrement</td><td align="left">Right-to-left</td></tr><tr><td align="left"></td><td align="left">+    −</td><td align="left">Unary plus and minus</td><td align="left"></td></tr><tr><td align="left"></td><td align="left">!    ~</td><td align="left">Logical NOT and bitwise NOT</td><td align="left"></td></tr><tr><td align="left"></td><td align="left">(<em>type</em>)</td><td align="left">Type cast</td><td align="left"></td></tr><tr><td align="left"></td><td align="left">*</td><td align="left">Indirection (dereference)</td><td align="left"></td></tr><tr><td align="left"></td><td align="left">&amp;</td><td align="left">Address-of</td><td align="left"></td></tr><tr><td align="left"></td><td align="left">sizeof</td><td align="left">Size-of</td><td align="left"></td></tr><tr><td align="left"></td><td align="left">new,  new[]</td><td align="left">Dynamic memory allocation</td><td align="left"></td></tr><tr><td align="left"></td><td align="left">delete,  delete[]</td><td align="left">Dynamic memory deallocation</td><td align="left"></td></tr><tr><td align="left">4</td><td align="left">.*    -&gt;*</td><td align="left">Pointer to member</td><td align="left">Left-to-right</td></tr><tr><td align="left">5</td><td align="left">*    /    %</td><td align="left">Multiplication, division, and remainder</td><td align="left"></td></tr><tr><td align="left">6</td><td align="left">+    −</td><td align="left">Addition and subtraction</td><td align="left"></td></tr><tr><td align="left">7</td><td align="left">&lt;&lt;    &gt;&gt;</td><td align="left">Bitwise left shift and right shift</td><td align="left"></td></tr><tr><td align="left">8</td><td align="left">&lt;    &lt;=</td><td align="left">For relational operators &lt; and ≤ respectively</td><td align="left"></td></tr><tr><td align="left"></td><td align="left">&gt;    &gt;=</td><td align="left">For relational operators &gt; and ≥ respectively</td><td align="left"></td></tr><tr><td align="left">9</td><td align="left">==    !=</td><td align="left">For relational = and ≠ respectively</td><td align="left"></td></tr><tr><td align="left">10</td><td align="left">&amp;</td><td align="left">Bitwise AND</td><td align="left"></td></tr><tr><td align="left">11</td><td align="left">^</td><td align="left">Bitwise XOR (exclusive or)</td><td align="left"></td></tr><tr><td align="left">12</td><td align="left">&#124;</td><td align="left">Bitwise OR (inclusive or)</td><td align="left"></td></tr><tr><td align="left">13</td><td align="left">&amp;&amp;</td><td align="left">Logical AND</td><td align="left"></td></tr><tr><td align="left">14</td><td align="left">&#124;&#124;</td><td align="left">Logical OR</td><td align="left"></td></tr><tr><td align="left">15</td><td align="left">?:</td><td align="left">Ternary conditional</td><td align="left">Right-to-Left</td></tr><tr><td align="left">16</td><td align="left">=</td><td align="left">Direct assignment (provided by default for C++ classes)</td><td align="left"></td></tr><tr><td align="left"></td><td align="left">+=    −=</td><td align="left">Assignment by sum and difference</td><td align="left"></td></tr><tr><td align="left"></td><td align="left">*=    /=    %=</td><td align="left">Assignment by product, quotient, and remainder</td><td align="left"></td></tr><tr><td align="left"></td><td align="left">&lt;&lt;=    &gt;&gt;=</td><td align="left">Assignment by bitwise left shift and right shift</td><td align="left"></td></tr><tr><td align="left"></td><td align="left">&amp;=    ^=    &#124;=</td><td align="left">Assignment by bitwise AND, XOR, and OR</td><td align="left"></td></tr><tr><td align="left">17</td><td align="left">throw</td><td align="left">Throw operator (for exceptions)</td><td align="left"></td></tr><tr><td align="left">18</td><td align="left">,</td><td align="left">Comma</td><td align="left">Left-to-right</td></tr></tbody></table><p>C语言运算符优先级</p><table><thead><tr><th align="left">Precedence</th><th align="left">Operator</th><th align="left">Description</th><th align="left">Associativity</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">++  –</td><td align="left">Suffix/postfix increment and decrement</td><td align="left">Left-to-right</td></tr><tr><td align="left"></td><td align="left">()</td><td align="left">Function call</td><td align="left"></td></tr><tr><td align="left"></td><td align="left">[]</td><td align="left">Array subscripting</td><td align="left"></td></tr><tr><td align="left"></td><td align="left">.</td><td align="left">Structure and union member access</td><td align="left"></td></tr><tr><td align="left"></td><td align="left">−&gt;</td><td align="left">Structure and union member access through pointer</td><td align="left"></td></tr><tr><td align="left"></td><td align="left">(<em>type</em>){<em>list</em>}</td><td align="left">Compound literal(C99)</td><td align="left"></td></tr><tr><td align="left">2</td><td align="left">++  –</td><td align="left">Prefix increment and decrement</td><td align="left">Right-to-left</td></tr><tr><td align="left"></td><td align="left">+  −</td><td align="left">Unary plus and minus</td><td align="left"></td></tr><tr><td align="left"></td><td align="left">!  ~</td><td align="left">Logical NOT and bitwise NOT</td><td align="left"></td></tr><tr><td align="left"></td><td align="left">(<em>type</em>)</td><td align="left">Type cast</td><td align="left"></td></tr><tr><td align="left"></td><td align="left">*</td><td align="left">Indirection (dereference)</td><td align="left"></td></tr><tr><td align="left"></td><td align="left">&amp;</td><td align="left">Address-of</td><td align="left"></td></tr><tr><td align="left"></td><td align="left">sizeof</td><td align="left">Size-of</td><td align="left"></td></tr><tr><td align="left"></td><td align="left">_Alignof</td><td align="left">Alignment requirement(C11)</td><td align="left"></td></tr><tr><td align="left">3</td><td align="left">*  /  %</td><td align="left">Multiplication, division, and remainder</td><td align="left">Left-to-right</td></tr><tr><td align="left">4</td><td align="left">+  −</td><td align="left">Addition and subtraction</td><td align="left"></td></tr><tr><td align="left">5</td><td align="left">&lt;&lt;  &gt;&gt;</td><td align="left">Bitwise left shift and right shift</td><td align="left"></td></tr><tr><td align="left">6</td><td align="left">&lt;  &lt;=</td><td align="left">For relational operators &lt; and ≤ respectively</td><td align="left"></td></tr><tr><td align="left"></td><td align="left">&gt;  &gt;=</td><td align="left">For relational operators &gt; and ≥ respectively</td><td align="left"></td></tr><tr><td align="left">7</td><td align="left">==  !=</td><td align="left">For relational = and ≠ respectively</td><td align="left"></td></tr><tr><td align="left">8</td><td align="left">&amp;</td><td align="left">Bitwise AND</td><td align="left"></td></tr><tr><td align="left">9</td><td align="left">^</td><td align="left">Bitwise XOR (exclusive or)</td><td align="left"></td></tr><tr><td align="left">10</td><td align="left">&#124;</td><td align="left">Bitwise OR (inclusive or)</td><td align="left"></td></tr><tr><td align="left">11</td><td align="left">&amp;&amp;</td><td align="left">Logical AND</td><td align="left"></td></tr><tr><td align="left">12</td><td align="left">&#124;&#124;</td><td align="left">Logical OR</td><td align="left"></td></tr><tr><td align="left">13</td><td align="left">?:</td><td align="left">Ternary conditional</td><td align="left">Right-to-Left</td></tr><tr><td align="left">14</td><td align="left">=</td><td align="left">Simple assignment</td><td align="left"></td></tr><tr><td align="left"></td><td align="left">+=  −=</td><td align="left">Assignment by sum and difference</td><td align="left"></td></tr><tr><td align="left"></td><td align="left">*=  /=  %=</td><td align="left">Assignment by product, quotient, and remainder</td><td align="left"></td></tr><tr><td align="left"></td><td align="left">&lt;&lt;=  &gt;&gt;=</td><td align="left">Assignment by bitwise left shift and right shift</td><td align="left"></td></tr><tr><td align="left"></td><td align="left">&amp;=  ^=</td><td align="left">=</td><td align="left">Assignment by bitwise AND, XOR, and OR</td></tr><tr><td align="left">15</td><td align="left">,</td><td align="left">Comma</td><td align="left">Left-to-right</td></tr></tbody></table><p>PHP运算符优先级</p><table><thead><tr><th align="left">结合方向</th><th align="left">运算符</th><th align="left">附加信息</th></tr></thead><tbody><tr><td align="left">非结合</td><td align="left">clone new</td><td align="left">clone 和 new</td></tr><tr><td align="left">左</td><td align="left">[</td><td align="left">array()</td></tr><tr><td align="left">非结合</td><td align="left">++ –</td><td align="left">递增／递减运算符</td></tr><tr><td align="left">非结合</td><td align="left">~ - (int) (float) (string) (array) (object) (bool) @</td><td align="left">类型</td></tr><tr><td align="left">非结合</td><td align="left">instanceof</td><td align="left">类型</td></tr><tr><td align="left">右结合</td><td align="left">!</td><td align="left">逻辑操作符</td></tr><tr><td align="left">左</td><td align="left">* / %</td><td align="left">算术运算符</td></tr><tr><td align="left">左</td><td align="left">+ - .</td><td align="left">算术运算符 和 字符串运算符</td></tr><tr><td align="left">左</td><td align="left">&lt;&lt; &gt;&gt;</td><td align="left">位运算符</td></tr><tr><td align="left">非结合</td><td align="left">&lt; &lt;= &gt; &gt;= &lt;&gt;</td><td align="left">比较运算符</td></tr><tr><td align="left">非结合</td><td align="left">== != === !==</td><td align="left">比较运算符</td></tr><tr><td align="left">左</td><td align="left">&amp;</td><td align="left">位运算符 和 引用</td></tr><tr><td align="left">左</td><td align="left">^</td><td align="left">位运算符</td></tr><tr><td align="left">左</td><td align="left">&#124;</td><td align="left">位运算符</td></tr><tr><td align="left">左</td><td align="left">&amp;&amp;</td><td align="left">逻辑运算符</td></tr><tr><td align="left">左</td><td align="left">&#124;&#124;</td><td align="left">逻辑运算符</td></tr><tr><td align="left">左</td><td align="left">? :</td><td align="left">三元运算符</td></tr><tr><td align="left">右</td><td align="left">= += -= *= /= .= %= &amp;= &#124;= ^= &lt;&lt;= &gt;&gt;=</td><td align="left">赋值运算符</td></tr><tr><td align="left">左</td><td align="left">and</td><td align="left">逻辑运算符</td></tr><tr><td align="left">左</td><td align="left">xor</td><td align="left">逻辑运算符</td></tr><tr><td align="left">左</td><td align="left">or</td><td align="left">逻辑运算符</td></tr><tr><td align="left">左</td><td align="left">,</td><td align="left">多处用到</td></tr></tbody></table><p>Python 运算符优先级<br>| 运算符               | 描述             | 序号 |<br>| :——————- | :————— | —- |<br>| lambda               | Lambda表达式     | 1    |<br>| or                   | 布尔“或”         | 2    |<br>| and                  | 布尔“与”         | 3    |<br>| not x                | 布尔“非”         | 4    |<br>| in，not in           | 成员测试         | 5    |<br>| is，is not           | 同一性测试       | 6    |<br>| &lt;，&lt;=，&gt;，&gt;=，!=，== | 比较             | 7    |<br>| &#124;               | 按位或           | 8    |<br>| ^                    | 按位异或         | 9    |<br>| &amp;                    | 按位与           | 10   |<br>| &lt;&lt;，&gt;&gt;               | 移位             | 11   |<br>| +，-                 | 加法与减法       | 12   |<br>| <em>，/，%              | 乘法、除法与取余 | 13   |<br>| +x，-x               | 正负号           | 14   |<br>| ~x                   | 按位翻转         | 15   |<br>| *</em>                   | 指数             | 16   |<br>| x.attribute          | 属性参考         | 17   |<br>| x[index]             | 下标             | 18   |<br>| x[index:index]       | 寻址段           | 19   |<br>| f(arguments…)      | 函数调用         | 20   |<br>| (experession,…)    | 绑定或元组显示   | 21   |<br>| [expression,…]     | 列表显示         | 22   |<br>| {key:datum,…}      | 字典显示         | 23   |<br>| ‘expression,…’     | 字符串转换       | 24   |</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>EurekaClient注册到EurekaServer的秘密</title>
    <link href="/2019/06/12/EurekaClient%E6%B3%A8%E5%86%8C%E5%88%B0EurekaServer%E7%9A%84%E7%A7%98%E5%AF%86/"/>
    <url>/2019/06/12/EurekaClient%E6%B3%A8%E5%86%8C%E5%88%B0EurekaServer%E7%9A%84%E7%A7%98%E5%AF%86/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们知道Eureka分为两部分，Eureka Server和Eureka Client。Eureka Server充当注册中心的角色，Eureka Client相对于Eureka Server来说是客户端，需要将自身信息注册到注册中心。本文主要介绍的就是在Eureka Client注册到Eureka Server时     <code>RetryableClientQuarantineRefreshPercentage</code>参数的使用技巧。 </p><a id="more"></a><h2 id="Eureka-Client注册过程分析"><a href="#Eureka-Client注册过程分析" class="headerlink" title="Eureka Client注册过程分析"></a>Eureka Client注册过程分析</h2><p>Eureka Client注册到Eureka Server时，首先遇到第一个问题就是Eureka Client端要知道Server的地址，这个参数对应的是     <code>eureka.client.service-url.defaultZone</code>举个例子，在Eureka Client的properties文件中配置如下： </p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">eureka.client.service-url.defaultZone</span>=<span class="hljs-string"></span><br><span class="hljs-attr">http</span>:<span class="hljs-string">//localhost:8761/eureka,http://localhost:8762/eureka,http://localhost:8763/eureka,http://localhost:8764/eureka</span><br></code></pre></td></tr></table></figure><p>如上图所示，Eureka Client配置对应的Eureka Server地址分别是8761、8762、8763、8764。这里存在两个问题： </p><ul><li>Eureka Client会将自身信息分别注册到这四个地址吗？     </li><li>Eureka Clinent注册机制是怎样的？     </li></ul><p>源码面前一目了然，带着这两个问题我们通过源码来解答这两个问题。Eureka Client在启动的时候注册源码如下：<br><code>RetryableEurekaHttpClient</code>中的<code>execut</code>方法 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> &lt;R&gt; <span class="hljs-function">EurekaHttpResponse&lt;R&gt; <span class="hljs-title">execute</span><span class="hljs-params">(RequestExecutor&lt;R&gt; requestExecutor)</span> </span>&#123;<br>    List&lt;EurekaEndpoint&gt; candidateHosts = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">int</span> endpointIdx = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> retry = <span class="hljs-number">0</span>; retry &lt; numberOfRetries; retry++) &#123;<br>        EurekaHttpClient currentHttpClient = delegate.get();<br>        EurekaEndpoint currentEndpoint = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">if</span> (currentHttpClient == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (candidateHosts == <span class="hljs-keyword">null</span>) &#123;<br>                candidateHosts = getHostCandidates();<br>                <span class="hljs-keyword">if</span> (candidateHosts.isEmpty()) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> TransportException(<span class="hljs-string">"There is no known eureka server; cluster server list is empty"</span>);<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (endpointIdx &gt;= candidateHosts.size()) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> TransportException(<span class="hljs-string">"Cannot execute request on any known server"</span>);<br>            &#125;<br><br>            currentEndpoint = candidateHosts.get(endpointIdx++);<br>            currentHttpClient = clientFactory.newClient(currentEndpoint);<br>        &#125;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            EurekaHttpResponse&lt;R&gt; response = requestExecutor.execute(currentHttpClient);<br>            <span class="hljs-keyword">if</span> (serverStatusEvaluator.accept(response.getStatusCode(), requestExecutor.getRequestType())) &#123;<br>                delegate.set(currentHttpClient);<br>                <span class="hljs-keyword">if</span> (retry &gt; <span class="hljs-number">0</span>) &#123;<br>                    logger.info(<span class="hljs-string">"Request execution succeeded on retry #&#123;&#125;"</span>, retry);<br>                &#125;<br>                <span class="hljs-keyword">return</span> response;<br>            &#125;<br>            logger.warn(<span class="hljs-string">"Request execution failure with status code &#123;&#125;; retrying on another server if available"</span>, response.getStatusCode());<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            logger.warn(<span class="hljs-string">"Request execution failed with message: &#123;&#125;"</span>, e.getMessage());  <span class="hljs-comment">// just log message as the underlying client should log the stacktrace</span><br>        &#125;<br><br>        <span class="hljs-comment">// Connection error or 5xx from the server that must be retried on another server</span><br>        delegate.compareAndSet(currentHttpClient, <span class="hljs-keyword">null</span>);<br>        <span class="hljs-keyword">if</span> (currentEndpoint != <span class="hljs-keyword">null</span>) &#123;<br>            quarantineSet.add(currentEndpoint);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> TransportException(<span class="hljs-string">"Retry limit reached; giving up on completing the request"</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>按照我的理解，代码精简后内容如下： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> endpointIdx = <span class="hljs-number">0</span>;<br><span class="hljs-comment">//用来保存所有Eureka Server信息(8761、8762、8763、8764)</span><br>List&lt;EurekaEndpoint&gt; candidateHosts = <span class="hljs-keyword">null</span>;<br><span class="hljs-comment">//numberOfRetries的值代码写死默认为3次</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> retry = <span class="hljs-number">0</span>; retry &lt; numberOfRetries; retry++) &#123;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *首次进入循环时，获取全量的Eureka Server信息(8761、8762、8763、8764)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (candidateHosts == <span class="hljs-keyword">null</span>) &#123;<br>        candidateHosts = getHostCandidates();<br>    &#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *通过endpointIdx自增，依次获取Eureka Server信息，然后发送</span><br><span class="hljs-comment"> *注册的Post请求.</span><br><span class="hljs-comment"> */</span><br>    currentEndpoint = candidateHosts.get(endpointIdx++);<br>    currentHttpClient = clientFactory.newClient(currentEndpoint);<br>    <span class="hljs-keyword">try</span> &#123;<br>       <span class="hljs-comment">/**</span><br><span class="hljs-comment"> *发送注册的Post请求动作，注意如果成功，则跳出循环，如果失败则</span><br><span class="hljs-comment"> *根据endpointIdx依次获取下一个Eureka Server.</span><br><span class="hljs-comment"> */</span><br>        response = requestExecutor.execute(currentHttpClient);<br>        <span class="hljs-keyword">return</span> respones;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        <span class="hljs-comment">//向注册中心(Eureka Server)发起注册的post出现异常时，打印日志...</span><br>    &#125;<br>    <span class="hljs-comment">//如果此次注册动作失败，将当前的信息保存到quarantineSet中(一个Set集合)</span><br>    <span class="hljs-keyword">if</span> (currentEndpoint != <span class="hljs-keyword">null</span>) &#123;<br>        quarantineSet.add(currentEndpoint);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//如果都失败,则以异常形式抛出...</span><br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> TransportException(<span class="hljs-string">"Retry limit reached; giving up on completing the request"</span>);<br></code></pre></td></tr></table></figure><p>上面代码中还有一个方法很重要就是     <code>List&lt;EurekaEndpoint&gt; candidateHosts = getHostCandidates();</code>接下来看下     <code>getHostCandidates()</code>方法源码 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> List&lt;EurekaEndpoint&gt; <span class="hljs-title">getHostCandidates</span><span class="hljs-params">()</span> </span>&#123;<br>    List&lt;EurekaEndpoint&gt; candidateHosts = clusterResolver.getClusterEndpoints();<br>    quarantineSet.retainAll(candidateHosts);<br><br>    <span class="hljs-comment">// If enough hosts are bad, we have no choice but start over again</span><br>    <span class="hljs-keyword">int</span> threshold = (<span class="hljs-keyword">int</span>) (candidateHosts.size() * transportConfig.getRetryableClientQuarantineRefreshPercentage());<br>    <span class="hljs-keyword">if</span> (quarantineSet.isEmpty()) &#123;<br>        <span class="hljs-comment">// no-op</span><br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (quarantineSet.size() &gt;= threshold) &#123;<br>        logger.debug(<span class="hljs-string">"Clearing quarantined list of size &#123;&#125;"</span>, quarantineSet.size());<br>        quarantineSet.clear();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        List&lt;EurekaEndpoint&gt; remainingHosts = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;(candidateHosts.size());<br>        <span class="hljs-keyword">for</span> (EurekaEndpoint endpoint : candidateHosts) &#123;<br>            <span class="hljs-keyword">if</span> (!quarantineSet.contains(endpoint)) &#123;<br>                remainingHosts.add(endpoint);<br>            &#125;<br>        &#125;<br>        candidateHosts = remainingHosts;<br>    &#125;<br>    <span class="hljs-keyword">return</span> candidateHosts;<br>&#125;<br></code></pre></td></tr></table></figure><p>按照我的理解，将代码精简下，只包括关键逻辑，内容如下： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> List&lt;EurekaEndpoint&gt; <span class="hljs-title">getHostCandidates</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取所有defaultZone配置的注册中心信息(Eureka Server)，</span><br><span class="hljs-comment">     * 在本文例子中代表4个(8761、8762、8763、8764)Eureka Server</span><br><span class="hljs-comment">     */</span><br>    List candidateHosts = clusterResolver.getClusterEndpoints();<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * quarantineSet这个Set集合中保存的是不可用的Eureka Server</span><br><span class="hljs-comment">     * 此处是拿不可用的Eureka Server与全量的Eureka Server取交集</span><br><span class="hljs-comment">     */</span><br>    quarantineSet.retainAll(candidateHosts);<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据RetryableClientQuarantineRefreshPercentage参数计算阈值</span><br><span class="hljs-comment">     * 该阈值后续会和quarantineSet中保存的不可用的Eureka Server个数</span><br><span class="hljs-comment">     * 作比较，从而判断是否返回全量的Eureka Server还是过滤掉不可用的</span><br><span class="hljs-comment">     * Eureka Server。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">int</span> threshold = <br>       (<span class="hljs-keyword">int</span>) (<br>        candidateHosts.size()<br>              *<br>        transportConfig.getRetryableClientQuarantineRefreshPercentage()<br>        );<br>    <span class="hljs-keyword">if</span> (quarantineSet.isEmpty()) &#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 首次进入的时候，此时quarantineSet为空，直接返回全量的</span><br><span class="hljs-comment">         * Eureka Server列表</span><br><span class="hljs-comment">         */</span><br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (quarantineSet.size() &gt;= threshold) &#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 将不可用的Eureka Server与threshold值相比较，如果不可</span><br><span class="hljs-comment">         * 用的Eureka Server个数大于阈值，则将之间保存的Eureka</span><br><span class="hljs-comment">         * Server内容直接清空，并返回全量的Eureka Server列表。</span><br><span class="hljs-comment">         */</span><br>        quarantineSet.clear();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 通过quarantineSet集合保存不可用的Eureka Server来过滤</span><br><span class="hljs-comment">         * 全量的EurekaServer，从而获取此次Eureka Client要注册要</span><br><span class="hljs-comment">         * 注册的Eureka Server实例地址。</span><br><span class="hljs-comment">         */</span><br>        List&lt;EurekaEndpoint&gt; remainingHosts = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;(candidateHosts.size());<br>        <span class="hljs-keyword">for</span> (EurekaEndpoint endpoint : candidateHosts) &#123;<br>            <span class="hljs-keyword">if</span> (!quarantineSet.contains(endpoint)) &#123;<br>                remainingHosts.add(endpoint);<br>            &#125;<br>        &#125;<br>        candidateHosts = remainingHosts;<br>    &#125;<br>    <span class="hljs-keyword">return</span> candidateHosts;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过源码分析，我们现在初步知道，当Eureka Client向Eureka Server发起注册请求的时候(根据defaultZone寻找Eureka Server列表)，如果有一次请求注册成功，那么后续就不会在向其他Eureka Server发起注册请求。以本文为例，注册中心有四个(8761、8762、8763、8764)。如果8761对应的Eureka Server服务的状态是UP，那么Eureka Client向该注册中心注册成功后，不会再向(8762、8763、8764)对应的Eureka Server发起注册请求(对应程序是在for循环中直接return respones)。 </p><p>说到这里又引出来另外一个问题，如果8761这个Eureka Server是down掉的呢？ </p><p>根据源码我们可知Eureka Client首次会向8761这个Server发起注册请求，如果该Server的状态是down，那么它会将该Server保存到quarantineSet这个Set集合中，然后再次访问8762这个Eureka Server，如果8762这个Server的状态依旧是down，它也会把这个Server保存到quarantineSet这个Set集合中，然后继续访问8763这个Server，如果8763这个Server的状态依旧是down，此时除了会将其保存到quarantineSet这个Set集合中之外，还会跳出本次循环。从而结束此次注册过程。 </p><p>说道这里有人要问接下来会不会向8764这个Server发起注册，答案是否定的，因为循环的次数默认是3次。所以即使8764这个Server的状态是UP，它也不会接收到来自Eureka Client发起的注册信息。 </p><p>Eureka Client向Eureka Server发起注册信息的过程除了在Eureka Client启动的时候触发，还有另外一种方式，就是后台定时任务。<br>假设我们上面描述的场景是在Eureka Client启动的时候，因为在启动的时候注册这个过程全部失败了，当后台定时任务执行时，还会进入该注册流程。注意此时quarantineSet的值为3(8761、8762、8763之前注册失败的Eureka Server)。<br>所以当程序再次进入     <code>getHostCandidates()</code>方法时，     <code>if (quarantineSet.isEmpty())</code>这个方法是不满足的，接下来会走     <code>else if (quarantineSet.size() &gt;= threshold)</code>这个判断，如果这个判断成立，那么会将quarantineSet集合清空，同时返回全量的Eureka Server列表，如果这个判断不成立，会拿quarantineSet集合中保存的内容去过滤Eureka Server的全量列表。以本文为例： </p><ul><li><code>quarantineSet</code>中保存的是(8761、8762、8763)三个Eureka Server     </li><li>Eureka Server全量列表的内容是(8761、8762、8763、8764)四个Eureka Server，过滤后返回的结果为8764这个Eureka Server。     </li></ul><p>在本文的例子中8761、8762、8763这三个Eureka Server的状态是down而8764这个Eureka Server的状态是UP，我们其实是想走到最后的else分支，从而完成过滤操作，并最终得到8764这个Server，遗憾的是它并不会走到这个分支，而是被上面的     <code>else if (quarantineSet.size() &gt;= threshold)</code>这个分支所拦截，返回的依旧是全量的Eureka Server列表。这样造成的后果就是Eureka Client依旧会依次向(8761、8762、8763)这三个down的Eureka Server发起注册请求。<br>那么问题的关键在哪里呢？问题的关键就是threshold这个值的由来，因为此时quarantineSet.size()的值为3，而3这个值大于threshold，从而导致，会将quarantineSet集合清空，返回全量的Server列表。<br>我们知道threshold这个值是根据全量的Eureka Server列表乘以一个可配置的参数计算出来的，在本文的例子当中，我的properties文件中除了defaultZone之外并没有配置这个参数，那么也就是说这个参数是有默认值的，通过源码我们了解到，这个默认值是0.66。具体源码如下： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PropertyBasedTransportConfigConstants</span> </span>&#123;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *省略部分源码</span><br><span class="hljs-comment"> */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Values</span> </span>&#123;<br>        <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> SESSION_RECONNECT_INTERVAL = <span class="hljs-number">20</span>*<span class="hljs-number">60</span>;<br>        <span class="hljs-comment">//默认值为0.66</span><br>        <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">double</span> QUARANTINE_REFRESH_PERCENTAGE = <span class="hljs-number">0.66</span>;<br>        <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> DATA_STALENESS_TRHESHOLD = <span class="hljs-number">5</span>*<span class="hljs-number">60</span>;<br>        <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> ASYNC_RESOLVER_REFRESH_INTERVAL = <span class="hljs-number">5</span>*<span class="hljs-number">60</span>*<span class="hljs-number">1000</span>;<br>        <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> ASYNC_RESOLVER_WARMUP_TIMEOUT = <span class="hljs-number">5000</span>;<br>        <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> ASYNC_EXECUTOR_THREADPOOL_SIZE = <span class="hljs-number">5</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *<span class="hljs-doctag">@return</span> the percentage of the full endpoints set above which the   </span><br><span class="hljs-comment"> *quarantine set is cleared in the range [0, 1.0]</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">getRetryableClientQuarantineRefreshPercentage</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure><p>看到这里就不难理解了，因为这个值是0.66而此时全量的Eureka Server值为4。计算之后的值为2，而由于注册的for循环为3次，所以当第二次发起注册流程的时候quarantineSet的值始终大于threshold。这样就会导致一个问题，就是如果8761、8762、8763一直是down即使8764一直是好的，那么Eureka Client也不会注册成功。而且这个参数值的区间为0到1. </p><p>既然通过源码分析我们找到了问题根源，其实对应的我们也找到了解决这个问题的办法，就是对应把这个参数值调大些。<br>这个值在properties中对应的写法如下： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">eureka.client.transport.retryableClientQuarantineRefreshPercentage = xxx<br></code></pre></td></tr></table></figure><p>接下来我们修改下properties文件，修改后的内容如下： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">eureka.client.service-url.defaultZone=<br>http:<span class="hljs-comment">//localhost:8761/eureka,http://localhost:8762/eureka,http://localhost:8763/eureka,http://localhost:8764/eureka</span><br>eureka.client.transport.retryableClientQuarantineRefreshPercentage=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>接下来按照这个配置再次回顾下上面的流程： </p><ul><li>Eureka Client启动时进行注册(8761、8762、8763的状态是down)，所以此时quarantineSet的值为3.     </li><li>接下来在定时任务中又触发注册事件，此时因为参数的值从0.66调整为1。所以计算出的threshold的值为4。而此时quarantineSet的值为3。所以不会进入到         <code>else if (quarantineSet.size() &gt;= threshold)</code>分支，而是会进入最后的esle分支。     </li><li>在else分支中会完成过滤功能，最终返回的list中的结果只有一个就是8764这个Eureka Server。     </li><li>Eureka Client向8764这个Eureka Server发起注册请求，得到成功相应，并返回。     </li></ul><h2 id="遗留问题"><a href="#遗留问题" class="headerlink" title="遗留问题"></a>遗留问题</h2><p>说道这里我们感觉好像是解决了这个问题，那么问一个问题，这个参数值可以设置的无限大吗？ </p><p>比如我将这个参数值设置为10，虽然javaDoc中说明这个参数值的范围在0-1之间，但是并没有说明如果将这个参数调整大于1会出现什么情况。接下来按照上面的流程我们分析下：<br>之前我们分析的流程中的前提是8761、8762、8763这三台Server的状态是down而8764这个server的状态是up，现在我们修改下这个前提。<br>假设一开始8761、8762、8763、8764这四台Eureka Server的状态都是down。 </p><ul><li>Eureka Client启动时进行注册(8761、8762、8763的状态是down)，所以此时quarantineSet的值为3.     </li><li>接下来在定时任务中又触发注册事件，此时因为参数的值从0.66调整为10。所以计算出的threshold的值为40。而此时quarantineSet的值为3。所以不会进入到         <code>else if (quarantineSet.size() &gt;= threshold)</code>分支，而是会进入最后的esle分支。     </li><li>在else分支中会完成过滤功能，最终返回的list中的结果只有一个就是8764这个Eureka Server。     </li><li>Eureka Client向8764这个Eureka Server发起注册请求，因为此时8764的状态也是down导致注册失败，此时quarantineSet中的内容是(8761、8762、8763、8764)     </li><li>当定时任务再次触发时         <code>if (quarantineSet.isEmpty())</code>这个分支不会进入，因为此时quarantineSet的值为4     </li><li><code>else if (quarantineSet.size() &gt;= threshold)</code>这分支也不会进入因为threshold的值为40     </li><li>最终会进入else分支，这个分支原本的含义是想通过quarantineSet来充当过滤器，从全量的Eureka Server中过滤掉之前状态为down的Eureka Server，但是由于quarantineSet的值现在已经是全量，导致过滤后的结果返回的是一个空的list。即使此时Eureka Server列表(8761、8762、8763、8764)任何一个Server的状态变为UP，该Eureka Client也不可能完成注册事件。     </li></ul><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>上面出现的那个问题，根本原因个人认为是由于     <code>eureka.client.transport.retryableClientQuarantineRefreshPercentage</code>参数过大而源码中没有校验，从而导致没有进入     <code>else if (quarantineSet.size() &gt;= threshold)</code>的逻辑分支，因为此时如果quarantineSet中的值已经达到了所有Eureka Server列表，那么此时我们希望的是将这个Set集合清空，从而再次返回全量的Eureka Server列表，也就是说再重新来一次注册流程。<br>所以基于上面的分析，个人认为在源码的     <code>getHostCandidates</code>增加下校验，具体代码如下： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> List&lt;EurekaEndpoint&gt; <span class="hljs-title">getHostCandidates</span><span class="hljs-params">()</span> </span>&#123;<br>    List&lt;EurekaEndpoint&gt; candidateHosts = clusterResolver.getClusterEndpoints();<br>    quarantineSet.retainAll(candidateHosts);<br><br>    <span class="hljs-comment">// If enough hosts are bad, we have no choice but start over again</span><br>    <span class="hljs-keyword">int</span> threshold = (<span class="hljs-keyword">int</span>) (candidateHosts.size() * transportConfig.getRetryableClientQuarantineRefreshPercentage());<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 增加判断如果threshold的值过大，即超过Eureka Server</span><br><span class="hljs-comment">     * 列表的数量，那么将其再次赋值，赋值的内容为Eureka Server</span><br><span class="hljs-comment">     * 列表的数量。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">if</span> (threshold &gt; candidateHosts.size()) &#123;<br>      threshold = candidateHosts.size();<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (quarantineSet.isEmpty()) &#123;<br>        <span class="hljs-comment">// no-op</span><br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (quarantineSet.size() &gt;= threshold) &#123;<br>        logger.debug(<span class="hljs-string">"Clearing quarantined list of size &#123;&#125;"</span>, quarantineSet.size());<br>        quarantineSet.clear();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        List&lt;EurekaEndpoint&gt; remainingHosts = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;(candidateHosts.size());<br>        <span class="hljs-keyword">for</span> (EurekaEndpoint endpoint : candidateHosts) &#123;<br>            <span class="hljs-keyword">if</span> (!quarantineSet.contains(endpoint)) &#123;<br>                remainingHosts.add(endpoint);<br>            &#125;<br>        &#125;<br>        candidateHosts = remainingHosts;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> candidateHosts;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上内容就是个人对     <code>eureka.client.transport.retryableClientQuarantineRefreshPercentage</code>的理解，由于本人知识水平有限，对此问题也可能理解不正确，还请大家多多留言讨论。</p><p>最后感谢<a href="http://spring4all.com/" target="_blank" rel="noopener">spring4all社区</a>提供这个平台，能让大家交流学习Spring相关知识。 </p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>SpringCloud</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Eureka</tag>
      
      <tag>SpringCloud</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用hexo搭建个人博客</title>
    <link href="/2019/06/12/%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2019/06/12/%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<p>最近开始研究blog，找到了很多开源的系统，java、asp、nodejs、php，下面介绍一种基于nodejs的开源blog，网上有很多关于hexo的文档但是个人感觉还是欠缺不能一次达到目的，因为本人现在手上只有<strong>mint发行版的linux，所以直接用mint直接搭建</strong>，因为hexo是基于nodejs的应用，所以要先安装nodejs </p><hr><h4 id="1-Nodejs安装"><a href="#1-Nodejs安装" class="headerlink" title="1.Nodejs安装"></a>1.Nodejs安装</h4><p>使用apt-get 安装的nodejs版本过老，会导致安装hexo的时候出问题。<br>官方推荐的安装方法： </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -<br>sudo apt-get install -y nodejs<br></code></pre></td></tr></table></figure><p>centos 上： </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://nodejs.org/dist/v7.7.4/node-v7.7.4-linux-x64.tar.gz<br>tar zxvf node-v7.7.4-linux-x64.tar.gz<br></code></pre></td></tr></table></figure><a id="more"></a><p>sudo vi /etc/profile </p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># node （注释作用）</span><br><span class="hljs-attr">export</span> <span class="hljs-string">NODE_HOME=/home/user/software/node-v7.7.4-linux-x64</span><br><span class="hljs-attr">export</span> <span class="hljs-string">PATH=$PATH:$NODE_HOME/bin  </span><br><span class="hljs-attr">export</span> <span class="hljs-string">NODE_PATH=$NODE_HOME/lib/node_modules</span><br></code></pre></td></tr></table></figure><p>:wq （保存并退出）<br>source /etc/profile （使配置文件生效） </p><h4 id="2-Hexo安装"><a href="#2-Hexo安装" class="headerlink" title="2.Hexo安装"></a>2.Hexo安装</h4><p><a href="https://github.com/hexojs/hexo/" target="_blank" rel="noopener">Hexo</a> 是一个功能强大的静态网站生成系统，快速、简洁、高效。Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。可以一键部署到github，还有丰富的插件和主题,还支持热部署哦。执行如下命令进行安装 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo npm install hexo-cli -g<br></code></pre></td></tr></table></figure><p>安装Hexo安成后，使用如下命令快速新建一个博客系统，然后运行它： </p><ol><li><code>hexo init blog</code>     </li><li><code>cd blog</code>     </li><li><code>npm install</code>     </li><li><code>hexo server</code>     </li></ol><p>如果npm安装失败，请使用sudo安装。运行成功后，访问 <a href="http://0.0.0.0:4000/" target="_blank" rel="noopener">http://127.0.0.1:4000/</a><a href="http://127.0.0.1:4000/" target="_blank" rel="noopener"> </a> </p><p>Hexo 生成博客的目录结构： </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">.<br>├── _config.yml<br>├── db.json<br>├── node_modules<br>├── package.json<br>├── public<br>├── scaffolds<br>├── <span class="hljs-built_in">source</span><br>└── themes<br></code></pre></td></tr></table></figure><p>其中_config.yml是配置站点的文件，public是hexo生成的静态站点文件夹，scaffolds是模板文件夹，source是存在用户资源的文件夹，themes是主题文件夹。</p><h4 id="3-站点配置"><a href="#3-站点配置" class="headerlink" title="3.站点配置"></a>3.站点配置</h4><p>找到title，subtitle，author参数配置，分别配置站点的标题、副标题和作者 </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">title:</span> <span class="hljs-string">Alter的博客</span><br><span class="hljs-attr">subtitle:</span> <span class="hljs-string">专注于Java</span><br><span class="hljs-attr">description:</span> <span class="hljs-string">我就是我不一样的水果</span><br><span class="hljs-attr">author:</span> <span class="hljs-string">Alter</span><br><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span><br></code></pre></td></tr></table></figure><p>然后配置站点的url和permalink，这两个分别是你的站点的url host地址以及文章的永久连接 </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">url:</span> <span class="hljs-string">http://www.alterempty.cn</span><br><span class="hljs-string">root:/</span><br><span class="hljs-string">permalink::year/:month/:day/:title.html</span><br><span class="hljs-attr">permalink_defaults:</span><br></code></pre></td></tr></table></figure><p>permalink 我配置的是年月日以及title，后缀是html，便于搜索收录。permalink详情参见： <a href="http://hexo.io/zh-cn/docs/permalinks.html" target="_blank" rel="noopener">http://hexo.io/zh-cn/docs/permalinks.html</a> </p><h4 id="4-新增一篇文章"><a href="#4-新增一篇文章" class="headerlink" title="4.新增一篇文章"></a>4.新增一篇文章</h4><p>使用如下命令即可新增一篇md格式的文章： </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo new'github-page-with-hexo'<br></code></pre></td></tr></table></figure><p>然后就会在sources/_posts生成一篇文件名为github-page-with-hexo.md的markdown文件。编辑该文件就可以写博客了 </p><p>Front-matter 是文件最上方以 —- 分隔的区域，用于指定个别文件的变量，举例来说： </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs markdown">title:"使用Hexo在Github上搭建自己的博客"<br>date:2017-03-22 00:00:04<br>tags:<br>-Hexo<br>-Github<br>categories:<br>-Hexo<br>---<br></code></pre></td></tr></table></figure><p>目前的categories只能有一个一级分类，如果填写多个，第二个会被解析为二级分类，以及类推。tags可以允许有多个。更多关于Front-matter请参考 <a href="http://hexo.io/zh-cn/docs/front-matter.html" target="_blank" rel="noopener">http://hexo.io/zh-cn/docs/front-matter.html</a> 。 </p><h4 id="5-安装git"><a href="#5-安装git" class="headerlink" title="5.安装git"></a>5.安装git</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt install git<br></code></pre></td></tr></table></figure><p>通过 git –version 查看是否安装成功 </p><h4 id="6-申请GitHub"><a href="#6-申请GitHub" class="headerlink" title="6.申请GitHub"></a>6.申请GitHub</h4><h4 id="7-发布博客"><a href="#7-发布博客" class="headerlink" title="7.发布博客"></a>7.发布博客</h4><p> 发布更新博客 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> hexo d -g</span><br></code></pre></td></tr></table></figure><p>然后等个几分钟，访问你的域名就可以看到你的网站了 </p><p>注：从github上获取数据的办法有很多，就不一一阐述 </p>]]></content>
    
    
    <categories>
      
      <category>Blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Js生成一个不重复的ID的函数的进化之路</title>
    <link href="/2019/06/12/Js%E7%94%9F%E6%88%90%E4%B8%80%E4%B8%AA%E4%B8%8D%E9%87%8D%E5%A4%8D%E7%9A%84ID%E7%9A%84%E5%87%BD%E6%95%B0%E7%9A%84%E8%BF%9B%E5%8C%96%E4%B9%8B%E8%B7%AF/"/>
    <url>/2019/06/12/Js%E7%94%9F%E6%88%90%E4%B8%80%E4%B8%AA%E4%B8%8D%E9%87%8D%E5%A4%8D%E7%9A%84ID%E7%9A%84%E5%87%BD%E6%95%B0%E7%9A%84%E8%BF%9B%E5%8C%96%E4%B9%8B%E8%B7%AF/</url>
    
    <content type="html"><![CDATA[<p>在MongoDB中的ObjectID，可以理解为是一个不会重复的ID，这里有个链接<a href="http://blog.csdn.net/xiamizy/article/details/41521025" target="_blank" rel="noopener">http://blog.csdn.net/xiamizy/article/details/41521025</a> 感兴趣可以去研究一下。 </p><h2 id="我今天要做的就是做一个不重复ID的生成器"><a href="#我今天要做的就是做一个不重复ID的生成器" class="headerlink" title="我今天要做的就是做一个不重复ID的生成器"></a>我今天要做的就是做一个不重复ID的生成器</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 生成一个用不重复的ID</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">GenNonDuplicateID</span>(<span class="hljs-params"></span>):<span class="hljs-title">String</span></span>&#123;<br>  <br>&#125;<br></code></pre></td></tr></table></figure><a id="more"></a><h2 id="先看看下面的几个方法"><a href="#先看看下面的几个方法" class="headerlink" title="先看看下面的几个方法"></a>先看看下面的几个方法</h2><h3 id="1-生成-0-1-的随机数的Math-random-例如"><a href="#1-生成-0-1-的随机数的Math-random-例如" class="headerlink" title="1.生成[0,1)的随机数的Math.random,例如"></a>1.生成[0,1)的随机数的Math.random,例如</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//我这次运行生成的是：0.5834165740043102</span><br><span class="hljs-built_in">Math</span>.random()<br></code></pre></td></tr></table></figure><h3 id="2-获取当前时间戳Date-now"><a href="#2-获取当前时间戳Date-now" class="headerlink" title="2.获取当前时间戳Date.now"></a>2.获取当前时间戳Date.now</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//现在时间戳是1482645606622</span><br><span class="hljs-built_in">Date</span>.now() = <span class="hljs-number">1521009303858</span><br></code></pre></td></tr></table></figure><h3 id="3-将10进制转换为其他进制的字符串-Number-toString"><a href="#3-将10进制转换为其他进制的字符串-Number-toString" class="headerlink" title="3.将10进制转换为其他进制的字符串 Number.toString"></a>3.将10进制转换为其他进制的字符串 Number.toString</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//将1482645606622转换成二进制：10101100100110100100100001001000011011110</span><br>(<span class="hljs-number">1482645606622</span>).toString(<span class="hljs-number">2</span>)<br><span class="hljs-comment">//转换成16进制：159349090de MongDB中的ObjectID就是24位16进制数</span><br>(<span class="hljs-number">1482645606622</span>).toString(<span class="hljs-number">16</span>)；<br><span class="hljs-comment">//最大进制支持转为36进制，使用字符是0-9a-z ：ix48wvry</span><br>(<span class="hljs-number">1482645606622</span>).toString(<span class="hljs-number">36</span>)<br></code></pre></td></tr></table></figure><h2 id="GenNonDuplicateID的自我进化"><a href="#GenNonDuplicateID的自我进化" class="headerlink" title="GenNonDuplicateID的自我进化"></a>GenNonDuplicateID的自我进化</h2><h3 id="1-随机数版本-v0-0-1"><a href="#1-随机数版本-v0-0-1" class="headerlink" title="1.随机数版本 v0.0.1"></a>1.随机数版本 v0.0.1</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 生成一个用不重复的ID</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">GenNonDuplicateID</span>(<span class="hljs-params"></span>)</span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.random().toString()<br>&#125;<br><br><span class="hljs-comment">//生成一个类似 0.1283460319177394的ID</span><br>GenNonDuplicateID()<br></code></pre></td></tr></table></figure><h3 id="2-随机数版本16进制版本-v0-0-2"><a href="#2-随机数版本16进制版本-v0-0-2" class="headerlink" title="2.随机数版本16进制版本 v0.0.2"></a>2.随机数版本16进制版本 v0.0.2</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 生成一个用不重复的ID</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">GenNonDuplicateID</span>(<span class="hljs-params"></span>)</span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.random().toString(<span class="hljs-number">16</span>)<br>&#125;<br><br><span class="hljs-comment">//函数将生成类似 0.c1615913fa915 的ID</span><br>GenNonDuplicateID()<br></code></pre></td></tr></table></figure><h3 id="3-随机数版本36进制版本-v0-0-3"><a href="#3-随机数版本36进制版本-v0-0-3" class="headerlink" title="3.随机数版本36进制版本 v0.0.3"></a>3.随机数版本36进制版本 v0.0.3</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 生成一个用不重复的ID</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">GenNonDuplicateID</span>(<span class="hljs-params"></span>)</span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.random().toString(<span class="hljs-number">36</span>)<br>&#125;<br><br><span class="hljs-comment">//函数将生成类似 0.hefy7uw6ddzwidkwcmxkzkt9 的ID</span><br>GenNonDuplicateID()<br></code></pre></td></tr></table></figure><h3 id="4-随机数版本36进制版本-去掉”0-”-v0-0-4"><a href="#4-随机数版本36进制版本-去掉”0-”-v0-0-4" class="headerlink" title="4.随机数版本36进制版本 去掉”0.” v0.0.4"></a>4.随机数版本36进制版本 去掉”0.” v0.0.4</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 生成一个用不重复的ID</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">GenNonDuplicateID</span>(<span class="hljs-params"></span>)</span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.random().toString(<span class="hljs-number">36</span>).substr(<span class="hljs-number">3</span>)<br>&#125;<br><br><span class="hljs-comment">//函数将生成类似 8dlv9vabygks2cbg1spds4i 的ID</span><br>GenNonDuplicateID()<br></code></pre></td></tr></table></figure><p><strong>然而用一个随机数作为ID，随着使用次数的累积，必然会出现相同的两个ID</strong> </p><h3 id="5-引入时间戳-的36微进制版本-v0-1-1"><a href="#5-引入时间戳-的36微进制版本-v0-1-1" class="headerlink" title="5.引入时间戳 的36微进制版本 v0.1.1"></a>5.引入时间戳 的36微进制版本 v0.1.1</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 生成一个用不重复的ID</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">GenNonDuplicateID</span>(<span class="hljs-params"></span>)</span>&#123;<br>  <span class="hljs-keyword">let</span> idStr = <span class="hljs-built_in">Date</span>.now().toString(<span class="hljs-number">36</span>)<br>  idStr += <span class="hljs-built_in">Math</span>.random().toString(<span class="hljs-number">36</span>).substr(<span class="hljs-number">3</span>)<br>  <span class="hljs-keyword">return</span> idStr<br>&#125;<br><br><span class="hljs-comment">//函数将生成类似 ix49sfsnt7514k5wpflyb5l2vtok9y66r 的ID</span><br>GenNonDuplicateID()<br></code></pre></td></tr></table></figure><h3 id="6-引入时间戳-的36微进制版本-加入随机数长度控制-v0-1-2"><a href="#6-引入时间戳-的36微进制版本-加入随机数长度控制-v0-1-2" class="headerlink" title="6.引入时间戳 的36微进制版本 加入随机数长度控制 v0.1.2"></a>6.引入时间戳 的36微进制版本 加入随机数长度控制 v0.1.2</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 生成一个用不重复的ID</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">GenNonDuplicateID</span>(<span class="hljs-params">randomLength</span>)</span>&#123;<br>  <span class="hljs-keyword">let</span> idStr = <span class="hljs-built_in">Date</span>.now().toString(<span class="hljs-number">36</span>)<br>  idStr += <span class="hljs-built_in">Math</span>.random().toString(<span class="hljs-number">36</span>).substr(<span class="hljs-number">3</span>,randomLength)<br>  <span class="hljs-keyword">return</span> idStr<br>&#125;<br><br><span class="hljs-comment">// GenNonDuplicateID(3) 将生成类似 ix49wl2978w 的ID</span><br>GenNonDuplicateID(<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><p>这样生成的ID前面几位总是相同，看着不爽，于是再改改 </p><h3 id="7-引入时间戳-随机数前置-36进制-加入随机数长度控制-v0-1-3"><a href="#7-引入时间戳-随机数前置-36进制-加入随机数长度控制-v0-1-3" class="headerlink" title="7. 引入时间戳 随机数前置 36进制 加入随机数长度控制 v0.1.3"></a>7. 引入时间戳 随机数前置 36进制 加入随机数长度控制 v0.1.3</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 生成一个用不重复的ID</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">GenNonDuplicateID</span>(<span class="hljs-params">randomLength</span>)</span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Number</span>(<span class="hljs-built_in">Math</span>.random().toString().substr(<span class="hljs-number">3</span>,randomLength) + <span class="hljs-built_in">Date</span>.now()).toString(<span class="hljs-number">36</span>)<br>&#125;<br><span class="hljs-comment">//GenNonDuplicateID()将生成 rfmipbs8ag0kgkcogc 类似的ID</span><br>GenNonDuplicateID()<br></code></pre></td></tr></table></figure><p><strong>欢迎关注微信公众号​：</strong></p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006y8mN6gy1g7d3llw1nkj30b40b4wee.jpg" srcset="/img/loading.gif" alt="欢迎关注公众号" style="width: 100px" />]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ID生成器-Twitter的雪花算法</title>
    <link href="/2019/06/12/ID%E7%94%9F%E6%88%90%E5%99%A8-Twitter%E7%9A%84%E9%9B%AA%E8%8A%B1%E7%AE%97%E6%B3%95/"/>
    <url>/2019/06/12/ID%E7%94%9F%E6%88%90%E5%99%A8-Twitter%E7%9A%84%E9%9B%AA%E8%8A%B1%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>上代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Twitter_Snowflake&lt;br&gt;</span><br><span class="hljs-comment"> * SnowFlake的结构如下(每部分用-分开):&lt;br&gt;</span><br><span class="hljs-comment"> * 0 - 0000000000 0000000000 0000000000 0000000000 0 - 00000 - 00000 - 000000000000 &lt;br&gt;</span><br><span class="hljs-comment"> * 1位标识，由于long基本类型在Java中是带符号的，最高位是符号位，正数是0，负数是1，所以id一般是正数，最高位是0&lt;br&gt;</span><br><span class="hljs-comment"> * 41位时间截(毫秒级)，注意，41位时间截不是存储当前时间的时间截，而是存储时间截的差值（当前时间截 - 开始时间截)</span><br><span class="hljs-comment"> * 得到的值），这里的的开始时间截，一般是我们的id生成器开始使用的时间，由我们程序来指定的（如下下面程序IdWorker类的startTime属性）。41位的时间截，可以使用69年，年T = (1L &lt;&lt; 41) / (1000L * 60 * 60 * 24 * 365) = 69&lt;br&gt;</span><br><span class="hljs-comment"> * 10位的数据机器位，可以部署在1024个节点，包括5位datacenterId和5位workerId&lt;br&gt;</span><br><span class="hljs-comment"> * 12位序列，毫秒内的计数，12位的计数顺序号支持每个节点每毫秒(同一机器，同一时间截)产生4096个ID序号&lt;br&gt;</span><br><span class="hljs-comment"> * 加起来刚好64位，为一个Long型。&lt;br&gt;</span><br><span class="hljs-comment"> * SnowFlake的优点是，整体上按照时间自增排序，并且整个分布式系统内不会产生ID碰撞(由数据中心ID和机器ID作区分)，并且效率较高，经测试，SnowFlake每秒能够产生26万ID左右。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SnowflakeIdWorker</span> </span>&#123;<br><br>    <span class="hljs-comment">// ==============================Fields===========================================</span><br>    <span class="hljs-comment">/** 开始时间截 (2015-01-01) */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> twepoch = <span class="hljs-number">1489111610226L</span>;<br><br>    <span class="hljs-comment">/** 机器id所占的位数 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> workerIdBits = <span class="hljs-number">5L</span>;<br><br>    <span class="hljs-comment">/** 数据标识id所占的位数 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> dataCenterIdBits = <span class="hljs-number">5L</span>;<br><br>    <span class="hljs-comment">/** 支持的最大机器id，结果是31 (这个移位算法可以很快的计算出几位二进制数所能表示的最大十进制数) */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> maxWorkerId = -<span class="hljs-number">1L</span> ^ (-<span class="hljs-number">1L</span> &lt;&lt; workerIdBits);<br><br>    <span class="hljs-comment">/** 支持的最大数据标识id，结果是31 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> maxDataCenterId = -<span class="hljs-number">1L</span> ^ (-<span class="hljs-number">1L</span> &lt;&lt; dataCenterIdBits);<br><br>    <span class="hljs-comment">/** 序列在id中占的位数 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> sequenceBits = <span class="hljs-number">12L</span>;<br><br>    <span class="hljs-comment">/** 机器ID向左移12位 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> workerIdShift = sequenceBits;<br><br>    <span class="hljs-comment">/** 数据标识id向左移17位(12+5) */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> dataCenterIdShift = sequenceBits + workerIdBits;<br><br>    <span class="hljs-comment">/** 时间截向左移22位(5+5+12) */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> timestampLeftShift = sequenceBits + workerIdBits + dataCenterIdBits;<br><br>    <span class="hljs-comment">/** 生成序列的掩码，这里为4095 (0b111111111111=0xfff=4095) */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> sequenceMask = -<span class="hljs-number">1L</span> ^ (-<span class="hljs-number">1L</span> &lt;&lt; sequenceBits);<br><br>    <span class="hljs-comment">/** 工作机器ID(0~31) */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> workerId;<br><br>    <span class="hljs-comment">/** 数据中心ID(0~31) */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> dataCenterId;<br><br>    <span class="hljs-comment">/** 毫秒内序列(0~4095) */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> sequence = <span class="hljs-number">0L</span>;<br><br>    <span class="hljs-comment">/** 上次生成ID的时间截 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> lastTimestamp = -<span class="hljs-number">1L</span>;<br><br>    <span class="hljs-comment">//==============================Constructors=====================================</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 构造函数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> workerId 工作ID (0~31)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dataCenterId 数据中心ID (0~31)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">SnowflakeIdWorker</span><span class="hljs-params">(<span class="hljs-keyword">long</span> workerId, <span class="hljs-keyword">long</span> dataCenterId)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (workerId &gt; maxWorkerId || workerId &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(String.format(<span class="hljs-string">"workerId can't be greater than %d or less than 0"</span>, maxWorkerId));<br>        &#125;<br>        <span class="hljs-keyword">if</span> (dataCenterId &gt; maxDataCenterId || dataCenterId &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(String.format(<span class="hljs-string">"dataCenterId can't be greater than %d or less than 0"</span>, maxDataCenterId));<br>        &#125;<br>        <span class="hljs-keyword">this</span>.workerId = workerId;<br>        <span class="hljs-keyword">this</span>.dataCenterId = dataCenterId;<br>    &#125;<br><br>    <span class="hljs-comment">// ==============================Methods==========================================</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获得下一个ID (该方法是线程安全的)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> SnowflakeId</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">long</span> <span class="hljs-title">nextId</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">long</span> timestamp = timeGen();<br><br>        <span class="hljs-comment">//如果当前时间小于上一次ID生成的时间戳，说明系统时钟回退过这个时候应当抛出异常</span><br>        <span class="hljs-keyword">if</span> (timestamp &lt; lastTimestamp) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<br>                    String.format(<span class="hljs-string">"Clock moved backwards.  Refusing to generate id for %d milliseconds"</span>, lastTimestamp - timestamp));<br>        &#125;<br><br>        <span class="hljs-comment">//如果是同一时间生成的，则进行毫秒内序列</span><br>        <span class="hljs-keyword">if</span> (lastTimestamp == timestamp) &#123;<br>            sequence = (sequence + <span class="hljs-number">1</span>) &amp; sequenceMask;<br>            <span class="hljs-comment">//毫秒内序列溢出</span><br>            <span class="hljs-keyword">if</span> (sequence == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">//阻塞到下一个毫秒,获得新的时间戳</span><br>                timestamp = tilNextMillis(lastTimestamp);<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//时间戳改变，毫秒内序列重置</span><br>        <span class="hljs-keyword">else</span> &#123;<br>            sequence = <span class="hljs-number">0L</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//上次生成ID的时间截</span><br>        lastTimestamp = timestamp;<br><br>        <span class="hljs-comment">//移位并通过或运算拼到一起组成64位的ID</span><br>        <span class="hljs-keyword">return</span> ((timestamp - twepoch) &lt;&lt; timestampLeftShift) <span class="hljs-comment">//</span><br>                | (dataCenterId &lt;&lt; dataCenterIdShift) <span class="hljs-comment">//</span><br>                | (workerId &lt;&lt; workerIdShift) <span class="hljs-comment">//</span><br>                | sequence;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 阻塞到下一个毫秒，直到获得新的时间戳</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> lastTimestamp 上次生成ID的时间截</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 当前时间戳</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">long</span> <span class="hljs-title">tilNextMillis</span><span class="hljs-params">(<span class="hljs-keyword">long</span> lastTimestamp)</span> </span>&#123;<br>        <span class="hljs-keyword">long</span> timestamp = timeGen();<br>        <span class="hljs-keyword">while</span> (timestamp &lt;= lastTimestamp) &#123;<br>            timestamp = timeGen();<br>        &#125;<br>        <span class="hljs-keyword">return</span> timestamp;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回以毫秒为单位的当前时间</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 当前时间(毫秒)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">long</span> <span class="hljs-title">timeGen</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> System.currentTimeMillis();<br>    &#125;<br><br>    <span class="hljs-comment">//==============================Test=============================================</span><br>    <span class="hljs-comment">/** 测试 */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        System.out.println(System.currentTimeMillis());<br>        SnowflakeIdWorker idWorker = <span class="hljs-keyword">new</span> SnowflakeIdWorker(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">long</span> startTime = System.nanoTime();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">50000</span>; i++) &#123;<br>            <span class="hljs-keyword">long</span> id = idWorker.nextId();<br>            System.out.println(id);<br>        &#125;<br>        System.out.println((System.nanoTime()-startTime)/<span class="hljs-number">1000000</span>+<span class="hljs-string">"ms"</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>欢迎关注微信公众号​：</strong></p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006y8mN6gy1g7d3llw1nkj30b40b4wee.jpg" srcset="/img/loading.gif" alt="欢迎关注公众号" style="width: 100px" />]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Id</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java高效读取大文件</title>
    <link href="/2019/06/12/Java%E9%AB%98%E6%95%88%E8%AF%BB%E5%8F%96%E5%A4%A7%E6%96%87%E4%BB%B6/"/>
    <url>/2019/06/12/Java%E9%AB%98%E6%95%88%E8%AF%BB%E5%8F%96%E5%A4%A7%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a><strong>1、概述</strong></h2><p>本教程将演示如何用Java高效地读取大文件。 </p><h2 id="2、在内存中读取"><a href="#2、在内存中读取" class="headerlink" title="2、在内存中读取"></a><strong>2、在内存中读取</strong></h2><p>读取文件行的标准方式是在内存中读取，Guava 和Apache Commons IO都提供了如下所示快速读取文件行的方法： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Files.readLines(<span class="hljs-keyword">new</span> File(path), Charsets.UTF_8);<br> <br>FileUtils.readLines(<span class="hljs-keyword">new</span> File(path));<br></code></pre></td></tr></table></figure><p>这种方法带来的问题是文件的所有行都被存放在内存中，当文件足够大时很快就会导致程序抛出<em>OutOfMemoryError</em> 异常。 </p><a id="more"></a><p>例如：<strong>读取一个大约1G的文件：</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">givenUsingGuava_whenIteratingAFile_thenWorks</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>    String path = ...<br>    Files.readLines(<span class="hljs-keyword">new</span> File(path), Charsets.UTF_8);<br>&#125;<br></code></pre></td></tr></table></figure><p>这种方式开始时只占用很少的内存：<em>（大约消耗了0Mb内存）</em> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">[main] INFO  org.baeldung.java.CoreJavaIoUnitTest - Total Memory: <span class="hljs-number">128</span> Mb<br>[main] INFO  org.baeldung.java.CoreJavaIoUnitTest - Free Memory: <span class="hljs-number">116</span> Mb<br></code></pre></td></tr></table></figure><p>然而，<strong>当文件全部读到内存中后</strong>，我们最后可以看到<em>（大约消耗了2GB内存）</em>： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">[main] INFO  org.baeldung.java.CoreJavaIoUnitTest - Total Memory: <span class="hljs-number">2666</span> Mb<br>[main] INFO  org.baeldung.java.CoreJavaIoUnitTest - Free Memory: <span class="hljs-number">490</span> Mb<br></code></pre></td></tr></table></figure><p>这意味这一过程大约耗费了2.1GB的内存——原因很简单：现在文件的所有行都被存储在内存中。 </p><p><strong>把文件所有的内容都放在内存中很快会耗尽可用内存</strong>——不论实际可用内存有多大，这点是显而易见的。 </p><p>此外，<strong>我们通常不需要把文件的所有行一次性地放入内存中</strong>——相反，我们只需要遍历文件的每一行，然后做相应的处理，处理完之后把它扔掉。所以，这正是我们将要做的——通过行迭代，而不是把所有行都放在内存中。 </p><h2 id="3、文件流"><a href="#3、文件流" class="headerlink" title="3、文件流"></a><strong>3、文件流</strong></h2><p>现在让我们看下这种解决方案——我们将使用java.util.Scanner类扫描文件的内容，一行一行连续地读取： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java">FileInputStream inputStream = <span class="hljs-keyword">null</span>;<br>Scanner sc = <span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br>    inputStream = <span class="hljs-keyword">new</span> FileInputStream(path);<br>    sc = <span class="hljs-keyword">new</span> Scanner(inputStream, <span class="hljs-string">"UTF-8"</span>);<br>    <span class="hljs-keyword">while</span> (sc.hasNextLine()) &#123;<br>        String line = sc.nextLine();<br>        <span class="hljs-comment">// System.out.println(line);</span><br>    &#125;<br>    <span class="hljs-comment">// note that Scanner suppresses exceptions</span><br>    <span class="hljs-keyword">if</span> (sc.ioException() != <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">throw</span> sc.ioException();<br>    &#125;<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>    <span class="hljs-keyword">if</span> (inputStream != <span class="hljs-keyword">null</span>) &#123;<br>        inputStream.close();<br>    &#125;<br>    <span class="hljs-keyword">if</span> (sc != <span class="hljs-keyword">null</span>) &#123;<br>        sc.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这种方案将会遍历文件中的所有行——允许对每一行进行处理，而不保持对它的引用。总之<strong>没有把它们存放在内存中</strong>：<em>（大约消耗了150MB内存）</em> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">[main] INFO  org.baeldung.java.CoreJavaIoUnitTest - Total Memory: <span class="hljs-number">763</span> Mb<br>[main] INFO  org.baeldung.java.CoreJavaIoUnitTest - Free Memory: <span class="hljs-number">605</span> Mb<br></code></pre></td></tr></table></figure><h2 id="4、Apache-Commons-IO流"><a href="#4、Apache-Commons-IO流" class="headerlink" title="4、Apache Commons IO流"></a><strong>4、Apache Commons IO流</strong></h2><p>同样也可以使用Commons IO库实现，利用该库提供的自定义LineIterator: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">LineIterator it = FileUtils.lineIterator(theFile, <span class="hljs-string">"UTF-8"</span>);<br><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">while</span> (it.hasNext()) &#123;<br>        String line = it.nextLine();<br>        <span class="hljs-comment">// do something with line</span><br>    &#125;<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>    LineIterator.closeQuietly(it);<br>&#125;<br></code></pre></td></tr></table></figure><p>由于整个文件不是全部存放在内存中，这也就导致相当保守的内存消耗：<em>（大约消耗了150MB内存）</em> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">[main] INFO  o.b.java.CoreJavaIoIntegrationTest - Total Memory: <span class="hljs-number">752</span> Mb<br>[main] INFO  o.b.java.CoreJavaIoIntegrationTest - Free Memory: <span class="hljs-number">564</span> Mb<br></code></pre></td></tr></table></figure><h2 id="5、结论"><a href="#5、结论" class="headerlink" title="5、结论"></a><strong>5、结论</strong></h2><p>这篇短文介绍了如何<strong>在不重复读取与不耗尽内存的情况下处理大文件</strong>——这为大文件的处理提供了一个有用的解决办法。 </p><p>所有这些例子的实现和代码片段都可以在我的<a href="http://link.zhihu.com/?target=https%3A//github.com/euigenp/tutorials/tree/master/core-java%23readme">github项目</a>上获取到——这是一个基于Eclipse的项目，所以它应该很容易被导入和运行。 </p><p><strong>欢迎关注微信公众号​：</strong></p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006y8mN6gy1g7d3llw1nkj30b40b4wee.jpg" srcset="/img/loading.gif" alt="欢迎关注公众号" style="width: 100px" />]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>restful接口设计规范总结</title>
    <link href="/2019/06/12/Restful%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83%E6%80%BB%E7%BB%93/"/>
    <url>/2019/06/12/Restful%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p><strong>这篇 文章主要是借鉴他人，但是自己很想总结出一套规范，以供向我这样的新手使用，用来规范代码，如果有什么好的提议，请不吝赐教，本篇文章长期更新！</strong> </p><h3 id="一、重要概念："><a href="#一、重要概念：" class="headerlink" title="一、重要概念："></a>一、重要概念：</h3><blockquote><p>REST,即Representational State Transfer的缩写。我对这个词组的翻译是”表现层状态转化”。     </p><p><strong>Resource</strong>（资源） ：对象的单个实例。 例如，一只动物。它可以是一段文本、一张图片、一首歌曲、一种服务，总之就是一个具体的实在。你可以用一个URI（统一资源定位符）指向它，每种资源对应一个特定的URI。要获取这个资源，访问它的URI就可以，因此URI就成了每一个资源的地址或独一无二的识别符。     </p><p><strong>集合</strong>：对象的集合。 例如，动物。     </p><p><strong>第三方</strong>：使用我们接口的开发者     </p><p><strong>表现层（Representation）</strong>     </p><p>“资源”是一种信息实体，它可以有多种外在表现形式。我们把”资源”具体呈现出来的形式，叫做它的”表现层”（Representation）。     </p><p><strong>状态转化（State Transfer）</strong>     </p><p>访问一个网站，就代表了客户端和服务器的一个互动过程。在这个过程中，势必涉及到数据和状态的变化。互联网通信协议HTTP协议，是一个无状态协议。这意味着，所有的状态都保存在服务器端。因此，如果客户端想要操作服务器，必须通过某种手段，让服务器端发生”状态转化”（State Transfer）。而这种转化是建立在表现层之上的，所以就是”表现层状态转化”。     </p><p>客户端用到的手段，只能是HTTP协议。具体来说，就是HTTP协议里面，四个表示操作方式的动词：GET、POST、PUT、DELETE。它们分别对应四种基本操作：GET用来获取资源，POST用来新建资源（也可以用于更新资源），PUT用来更新资源，DELETE用来删除资源。     </p><p>比如，文本可以用txt格式表现，也可以用HTML格式、XML格式、JSON格式表现，甚至可以采用二进制格式；图片可以用JPG格式表现，也可以用PNG格式表现。     </p><p>URI只代表资源的实体，不代表它的形式。严格地说，有些网址最后的”.html”后缀名是不必要的，因为这个后缀名表示格式，属于”表现层”范畴，而URI应该只代表”资源”的位置。它的具体表现形式，应该在HTTP请求的头信息中用Accept和Content-Type字段指定，这两个字段才是对”表现层”的描述。     </p></blockquote><p>综合上面的解释，我们总结一下什么是RESTful架构： </p><p>　（1）每一个URI代表一种资源； </p><p>　（2）客户端和服务器之间，传递这种资源的某种表现层； </p><p>　（3）客户端通过四个HTTP动词，对服务器端资源进行操作，实现”表现层状态转化”。 </p><a id="more"></a><h3 id="二、REST接口规范"><a href="#二、REST接口规范" class="headerlink" title="二、REST接口规范"></a>二、REST接口规范</h3><h4 id="1、动作"><a href="#1、动作" class="headerlink" title="1、动作"></a>1、动作</h4><p>GET （SELECT）：从服务器检索特定资源，或资源列表。<br>POST （CREATE）：在服务器上创建一个新的资源。<br>PUT （UPDATE）：更新服务器上的资源，提供整个资源。<br>PATCH （UPDATE）：更新服务器上的资源，仅提供更改的属性。<br>DELETE （DELETE）：从服务器删除资源。 </p><p>首先是四个半种动作：<br>post、delete、put/patch、get<br>因为put/patch只能算作一类，所以将patch归为半个。 </p><p>另外还有有两个较少知名的HTTP动词：<br>HEAD - 检索有关资源的元数据，例如数据的哈希或上次更新时间。<br>OPTIONS - 检索关于客户端被允许对资源做什么的信息。 </p><h4 id="2、路径（接口命名）"><a href="#2、路径（接口命名）" class="headerlink" title="2、路径（接口命名）"></a>2、路径（接口命名）</h4><p>路径又称”终点”（endpoint），表示API的具体网址。 </p><p>在RESTful架构中，每个网址代表一种资源（resource），所以网址中不能有动词，只能有名词，而且所用的名词往往与数据库的表格名对应。一般来说，数据库中的表都是同种记录的”集合”（collection），所以API中的名词也应该使用复数。 </p><p>举例来说，有一个API提供动物园（zoo）的信息，还包括各种动物和雇员的信息，则它的路径应该设计成下面这样。 </p><p>接口尽量使用名词，禁止使用动词，下面是一些例子。 </p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">GET</span>         <span class="hljs-string">/zoos：列出所有动物园</span><br><span class="hljs-attr">POST</span>        <span class="hljs-string">/zoos：新建一个动物园</span><br><span class="hljs-attr">GET</span>         <span class="hljs-string">/zoos/ID：获取某个指定动物园的信息</span><br><span class="hljs-attr">PUT</span>         <span class="hljs-string">/zoos/ID：更新某个指定动物园的信息（提供该动物园的全部信息）</span><br><span class="hljs-attr">PATCH</span>       <span class="hljs-string">/zoos/ID：更新某个指定动物园的信息（提供该动物园的部分信息）</span><br><span class="hljs-attr">DELETE</span>      <span class="hljs-string">/zoos/ID：删除某个动物园</span><br><span class="hljs-attr">GET</span>         <span class="hljs-string">/zoos/ID/animals：列出某个指定动物园的所有动物</span><br><span class="hljs-attr">DELETE</span>      <span class="hljs-string">/zoos/ID/animals/ID：删除某个指定动物园的指定动物</span><br></code></pre></td></tr></table></figure><p>反例： </p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">/getAllCars</span><br><span class="hljs-attr">/createNewCar</span><br><span class="hljs-attr">/deleteAllRedCars</span><br></code></pre></td></tr></table></figure><p>再比如，某个URI是/posts/show/1，其中show是动词，这个URI就设计错了，正确的写法应该是/posts/1，然后用GET方法表示show。 </p><p>如果某些动作是HTTP动词表示不了的，你就应该把动作做成一种资源。比如网上汇款，从账户1向账户2汇款500元，错误的URI是： </p><blockquote><p>　　POST /accounts/1/transfer/500/to/2     </p></blockquote><p>正确的写法是把动词transfer改成名词transaction，资源不能是动词，但是可以是一种服务： </p><blockquote><p>　　POST /transaction HTTP/1.1<br>　　Host: 127.0.0.1<br>　　from=1&amp;to=2&amp;amount=500.00     </p></blockquote><p>理清资源的层次结构，比如业务针对的范围是学校，那么学校会是一级资源(/school)，老师(/school/teachers)，学生(/school/students)就是二级资源。 </p><h4 id="3、版本（Versioning）"><a href="#3、版本（Versioning）" class="headerlink" title="3、版本（Versioning）"></a>3、版本（Versioning）</h4><p>应该将API的版本号放入URL。如： </p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">https</span>:<span class="hljs-string">//api.example.com/v1/</span><br></code></pre></td></tr></table></figure><p>另一种做法是，将版本号放在HTTP头信息中，但不如放入URL方便和直观。Github采用这种做法。 </p><h4 id="4、过滤信息（Filtering）"><a href="#4、过滤信息（Filtering）" class="headerlink" title="4、过滤信息（Filtering）"></a>4、过滤信息（Filtering）</h4><p>如果记录数量很多，服务器不可能都将它们返回给用户。API应该提供参数，过滤返回结果。<br>下面是一些常见的参数。 </p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">?limit</span>=<span class="hljs-string">10：指定返回记录的数量</span><br><span class="hljs-meta">?offset</span>=<span class="hljs-string">10：指定返回记录的开始位置。</span><br><span class="hljs-meta">?page_number</span>=<span class="hljs-string">2&amp;page_size=100：指定第几页，以及每页的记录数。</span><br><span class="hljs-meta">?sortby</span>=<span class="hljs-string">name&amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序。</span><br><span class="hljs-meta">?animal_type_id</span>=<span class="hljs-string">1：指定筛选条件</span><br><span class="hljs-attr">参数的设计允许存在冗余，即允许API路径和URL参数偶尔有重复。比如，</span><br><span class="hljs-attr">GET</span> <span class="hljs-string">/zoo/ID/animals 与 GET /animals?zoo_id=ID 的含义是相同的。</span><br></code></pre></td></tr></table></figure><h4 id="5、状态码（Status-Codes）"><a href="#5、状态码（Status-Codes）" class="headerlink" title="5、状态码（Status Codes）"></a>5、状态码（Status Codes）</h4><p>状态码范围 </p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">1xx</span> <span class="hljs-string">信息，请求收到，继续处理。范围保留用于底层HTTP的东西，你很可能永远也用不到。</span><br><span class="hljs-attr">2xx</span> <span class="hljs-string">成功，行为被成功地接受、理解和采纳</span><br><span class="hljs-attr">3xx</span> <span class="hljs-string">重定向，为了完成请求，必须进一步执行的动作</span><br><span class="hljs-attr">4xx</span> <span class="hljs-string">客户端错误，请求包含语法错误或者请求无法实现。范围保留用于响应客户端做出的错误，例如。他们提供不良数据或要求不存在的东西。这些请求应该是幂等的，而不是更改服务器的状态。</span><br><span class="hljs-attr">5xx</span> <span class="hljs-string">范围的状态码是保留给服务器端错误用的。这些错误常常是从底层的函数抛出来的，甚至</span><br><span class="hljs-attr">开发人员也通常没法处理，发送这类状态码的目的以确保客户端获得某种响应。</span><br><span class="hljs-attr">当收到5xx响应时，客户端不可能知道服务器的状态，所以这类状态码是要尽可能的避免。</span><br></code></pre></td></tr></table></figure><p>服务器向用户返回的状态码和提示信息，常见的有以下一些（方括号中是该状态码对应的HTTP动词）。 </p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">200</span> <span class="hljs-string">OK - [GET]：服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）。</span><br><span class="hljs-attr">201</span> <span class="hljs-string">CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功。</span><br><span class="hljs-attr">202</span> <span class="hljs-string">Accepted - [*]：表示一个请求已经进入后台排队（异步任务）</span><br><span class="hljs-attr">204</span> <span class="hljs-string">NO CONTENT - [DELETE]：用户删除数据成功。</span><br><span class="hljs-attr">400</span> <span class="hljs-string">INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。</span><br><span class="hljs-attr">401</span> <span class="hljs-string">Unauthorized - [*]：表示用户没有权限（令牌、用户名、密码错误）。</span><br><span class="hljs-attr">403</span> <span class="hljs-string">Forbidden - [*] 表示用户得到授权（与401错误相对），但是访问是被禁止的。</span><br><span class="hljs-attr">404</span> <span class="hljs-string">NOT FOUND - [*]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。</span><br><span class="hljs-attr">406</span> <span class="hljs-string">Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。</span><br><span class="hljs-attr">410</span> <span class="hljs-string">Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。</span><br><span class="hljs-attr">422</span> <span class="hljs-string">Unprocesable entity - [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误。</span><br><span class="hljs-attr">500</span> <span class="hljs-string">INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功。</span><br><span class="hljs-attr">502</span> <span class="hljs-string">网关错误</span><br><span class="hljs-attr">503</span> <span class="hljs-string">Service Unavailable</span><br><span class="hljs-attr">504</span> <span class="hljs-string">网关超时</span><br></code></pre></td></tr></table></figure><p>参考资料： </p><p>RESTful API 设计指南–阮一峰：<a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2014/05/restful_api.html</a> </p><p><strong>欢迎关注微信公众号​：</strong></p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006y8mN6gy1g7d3llw1nkj30b40b4wee.jpg" srcset="/img/loading.gif" alt="欢迎关注公众号" style="width: 100px" />]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>API</tag>
      
      <tag>Restful</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>String拼接操作”+”的优化</title>
    <link href="/2019/06/12/String%E6%8B%BC%E6%8E%A5%E6%93%8D%E4%BD%9C%E2%80%9D-%E2%80%9D%E7%9A%84%E4%BC%98%E5%8C%96/"/>
    <url>/2019/06/12/String%E6%8B%BC%E6%8E%A5%E6%93%8D%E4%BD%9C%E2%80%9D-%E2%80%9D%E7%9A%84%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<p>很多讲Java优化的文章都会强调对String拼接的优化。倒不用特意记，本质上在于对不可变类优势和劣势的理解上。 </p><p>需要关注的是编译器对String拼接做出的优化，在简单场景下的性能能够与StringBuilder相当，复杂场景下仍然有较大的性能问题。网上关于这一问题讲的非常乱；如果我讲的有什么纰漏，也欢迎指正。 </p><blockquote><p>本文用到了反编译工具jad。在查阅网上关于String拼接操作的优化时发现了这个工具，能同时反编译出来源码和字节码，亲测好用，<a href="https://link.juejin.im/?target=https%3A%2F%2Fvaraneckas.com%2Fjad%2F">点我下载</a>。     </p></blockquote><a id="more"></a><h1 id="String拼接的性能问题"><a href="#String拼接的性能问题" class="headerlink" title="String拼接的性能问题"></a>String拼接的性能问题</h1><p>优化之前，每次用”+”拼接，都会生成一个新的String。特别在循环拼接字符串的场景下，性能损失是极其严重的： </p><ol><li>空间浪费：每次拼接的结果都需要创建新的不可变类     </li><li>时间浪费：创建的新不可变类需要初始化；产生大量“短命”垃圾，影响 young gc甚至full gc     </li></ol><h1 id="所谓简单场景"><a href="#所谓简单场景" class="headerlink" title="所谓简单场景"></a>所谓简单场景</h1><blockquote><p>简单场景和复杂场景是我乱起的名字，帮助理解编译器的优化方案。     </p></blockquote><p>简单场景可理解为在一句中完成拼接： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>String sentence = “Hello” + “world” + String.valueOf(i) + “\n”;<br>System.out.println(sentence);<br></code></pre></td></tr></table></figure><p>利用jad可看到优化结果： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>String sentence = (<span class="hljs-keyword">new</span> StringBuilder()).append(“Hello”).append(“world”).append(String.valueOf(i)).append(“\n”).toString();<br>System.out.println(sentence);<br></code></pre></td></tr></table></figure><p>是不是很神奇，竟然把String的拼接操作优化成了StringBuilder#append()！ </p><p>此时，可以认为已经将简单场景的空间性能、时间性能优化到最优（仅针对String拼接操作而言），看起来编译器已经完成了必要的优化。你可以测试一下，简单场景下的性能能够与StringBuilder相当。但是——“但是”以前的都是废话——编译器的优化对于复杂场景的帮助却很有限了。 </p><h1 id="所谓复杂场景"><a href="#所谓复杂场景" class="headerlink" title="所谓复杂场景"></a>所谓复杂场景</h1><p>所谓复杂场景，可理解为“编译器不确定（或很难确定，于是不做分析）要进行多少次字符串拼接后才需要转换回String”。可能表述不准确，理解个大概就好。 </p><p>我们分析一个最简单的复杂场景： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">String sentence = “”;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000000</span>; i++) &#123;<br>  sentence += “Hello” + “world” + String.valueOf(i) + “\n”;<br>&#125;<br>System.out.println(sentence);<br></code></pre></td></tr></table></figure><h2 id="理想的优化方案"><a href="#理想的优化方案" class="headerlink" title="理想的优化方案"></a>理想的优化方案</h2><p>当然，无论什么场景，程序猿都可以手动优化： </p><ul><li>在性能敏感的场景使用StringBuilder完成拼接。     </li><li>在性能不敏感的场景使用更方便的String。     </li></ul><blockquote><p>PS：别吐槽，这样的API设计是合理的，<strong>在合适的地方做合适的事</strong>。     </p></blockquote><p>理想目标是把这件事交给javac和JIT： </p><ul><li>设定一个拼接次数的阈值，超过阈值就启动优化（对于javac有一个编译期的阈值，JIT有一个运行期的阈值，以分阶段优化）。     </li><li>优化时，在拼接前生成StringBuilder对象，将拼接操作换成StringBuilder#append()，继续使用该对象，直至“需要”String对象时，使用StringBuilder#toString()“懒加载”新的String对象。     </li></ul><p>该优化方案的难度在于代码分析：机器很难知道到底何时“需要”String对象，所以也很难在合适的位置注入代码完成“懒加载”。 </p><p>虽然很难实现，但还是给出理想的优化结果，以供实际方案对比： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">String sentence = “”;<br>StringBuilder sentenceSB = <span class="hljs-keyword">new</span> StringBuilder(sentence);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000000</span>; i++) &#123;<br>  sentenceSB.append(“Hello”).append(“world”).append(String.valueOf(i)).append(“\n”);<br>&#125;<br>sentence = sentenceSB.toString();<br>System.out.println(sentence);<br></code></pre></td></tr></table></figure><h2 id="实际的优化方案"><a href="#实际的优化方案" class="headerlink" title="实际的优化方案"></a>实际的优化方案</h2><p>利用jad查看实际的优化结果： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">String sentence = “”;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000000</span>; i++) &#123;<br>  sentence = (<span class="hljs-keyword">new</span> StringBuilder()).append(sentence).append(“Hello”).append(“world”).append(String.valueOf(i)).append(“\n”).toString();<br>&#125;<br>System.out.println(sentence);<br></code></pre></td></tr></table></figure><p>可以看到，实际上编译器的优化只能达到简单场景的最优：仅优化字符串拼接的一句。这种优化程度，对于上述复杂场景的性能提升很有限，循环时还是会生成大量短命垃圾，特别是字符串拼接到很大的时候，空间和时间上都是致命的。 </p><p>通过对理想方案的分析，我们也能理解编译器优化的无奈之处：编译器无法（或很难）通过代码分析判断何时是最晚进行懒加载的时机。为什么呢？我们将代码换个形式可能更容易理解： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">String sentence = “”;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000000</span>; i++) &#123;<br>  sentence = sentence + “Hello” + “world” + String.valueOf(i) + “\n”;<br>&#125;<br>System.out.println(sentence);<br></code></pre></td></tr></table></figure><p>观察第3行的代码，等式右侧引用了sentence。我肉眼知道这句话只完成了字符串拼接，机器呢？最起码，现在的机器还很难通过代码判断。 </p><blockquote><p>待以后将人工智能与编译优化结合起来，就算只能以90%的概率完成优化，也是非常cool的。     </p></blockquote><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这个问题我没有做性能测试。其实也没必要过于深究，与其让编译器以隐晦的方式完成优化，不如用代码进行主动、清晰的优化，让代码能够“自解释”。 </p><p>那么，如果需要优化，使用StringBuilder吧。 </p><p><strong>欢迎关注微信公众号​：</strong></p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006y8mN6gy1g7d3llw1nkj30b40b4wee.jpg" srcset="/img/loading.gif" alt="欢迎关注公众号" style="width: 100px" />]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>String</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用BigDecimal进行精确运算</title>
    <link href="/2019/06/12/%E4%BD%BF%E7%94%A8BigDecimal%E8%BF%9B%E8%A1%8C%E7%B2%BE%E7%A1%AE%E8%BF%90%E7%AE%97/"/>
    <url>/2019/06/12/%E4%BD%BF%E7%94%A8BigDecimal%E8%BF%9B%E8%A1%8C%E7%B2%BE%E7%A1%AE%E8%BF%90%E7%AE%97/</url>
    
    <content type="html"><![CDATA[<p>首先我们先来看如下代码示例： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test_1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        System.out.println(<span class="hljs-number">0.06</span>+<span class="hljs-number">0.01</span>);<br>        System.out.println(<span class="hljs-number">1.0</span>-<span class="hljs-number">0.42</span>);<br>        System.out.println(<span class="hljs-number">4.015</span>*<span class="hljs-number">100</span>);<br>        System.out.println(<span class="hljs-number">303.1</span>/<span class="hljs-number">1000</span>);<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果如下。         </p><p>​         0.06999999999999999         </p><p>​         0.5800000000000001         </p><p>​         401.49999999999994         </p><p>​         0.30310000000000004         </p><p>​         你认为你看错了，但结果却是是这样的。问题在哪里呢？原因在于我们的计算机是二进制的。浮点数没有办法是用二进制进行精确表示。我们的CPU表示浮点数由两个部分组成：指数和尾数，这样的表示方法一般都会失去一定的精确度，有些浮点数运算也会产生一定的误差。如：2.4的二进制表示并非就是精确的2.4。反而最为接近的二进制表示是 2.3999999999999999。浮点数的值实际上是由一个特定的数学公式计算得到的。         </p><a id="more"></a><p>​          其实java的float只能用来进行科学计算或工程计算，在大多数的商业计算中，一般采用java.math.BigDecimal类来进行精确计算。         </p><p>​          在使用BigDecimal类来进行计算的时候，主要分为以下步骤：         </p><p>​             1、用float或者double变量构建BigDecimal对象。         </p><p>​             2、通过调用BigDecimal的加，减，乘，除等相应的方法进行算术运算。         </p><p>​             3、把BigDecimal对象转换成float，double，int等类型。         </p><p>​          一般来说，可以使用BigDecimal的构造方法或者静态方法的valueOf()方法把基本类型的变量构建成BigDecimal对象。         </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">BigDecimal b1 = <span class="hljs-keyword">new</span> BigDecimal(Double.toString(<span class="hljs-number">0.48</span>));<br>BigDecimal b2 = BigDecimal.valueOf(<span class="hljs-number">0.48</span>);<br></code></pre></td></tr></table></figure><p>   对于常用的加，减，乘，除，BigDecimal类提供了相应的成员方法。         </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> BigDecimal <span class="hljs-title">add</span><span class="hljs-params">(BigDecimal value)</span></span>;                        <span class="hljs-comment">//加法</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> BigDecimal <span class="hljs-title">subtract</span><span class="hljs-params">(BigDecimal value)</span></span>;                   <span class="hljs-comment">//减法 </span><br><span class="hljs-function"><span class="hljs-keyword">public</span> BigDecimal <span class="hljs-title">multiply</span><span class="hljs-params">(BigDecimal value)</span></span>;                   <span class="hljs-comment">//乘法</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> BigDecimal <span class="hljs-title">divide</span><span class="hljs-params">(BigDecimal value)</span></span>;                     <span class="hljs-comment">//除法</span><br></code></pre></td></tr></table></figure><p> 进行相应的计算后，我们可能需要将BigDecimal对象转换成相应的基本数据类型的变量，可以使用floatValue()，doubleValue()等方法。                 </p><p>​          下面是一个工具类，该工具类提供加，减，乘，除运算。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Arith</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 提供精确加法计算的add方法</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value1 被加数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value2 加数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 两个参数的和</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">double</span> value1,<span class="hljs-keyword">double</span> value2)</span></span>&#123;<br>        BigDecimal b1 = <span class="hljs-keyword">new</span> BigDecimal(Double.valueOf(value1));<br>        BigDecimal b2 = <span class="hljs-keyword">new</span> BigDecimal(Double.valueOf(value2));<br>        <span class="hljs-keyword">return</span> b1.add(b2).doubleValue();<br>    &#125;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 提供精确减法运算的sub方法</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value1 被减数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value2 减数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 两个参数的差</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span> <span class="hljs-title">sub</span><span class="hljs-params">(<span class="hljs-keyword">double</span> value1,<span class="hljs-keyword">double</span> value2)</span></span>&#123;<br>        BigDecimal b1 = <span class="hljs-keyword">new</span> BigDecimal(Double.valueOf(value1));<br>        BigDecimal b2 = <span class="hljs-keyword">new</span> BigDecimal(Double.valueOf(value2));<br>        <span class="hljs-keyword">return</span> b1.subtract(b2).doubleValue();<br>    &#125;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 提供精确乘法运算的mul方法</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value1 被乘数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value2 乘数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 两个参数的积</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span> <span class="hljs-title">mul</span><span class="hljs-params">(<span class="hljs-keyword">double</span> value1,<span class="hljs-keyword">double</span> value2)</span></span>&#123;<br>        BigDecimal b1 = <span class="hljs-keyword">new</span> BigDecimal(Double.valueOf(value1));<br>        BigDecimal b2 = <span class="hljs-keyword">new</span> BigDecimal(Double.valueOf(value2));<br>        <span class="hljs-keyword">return</span> b1.multiply(b2).doubleValue();<br>    &#125;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 提供精确的除法运算方法div</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value1 被除数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value2 除数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> scale 精确范围</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 两个参数的商</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IllegalAccessException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span> <span class="hljs-title">div</span><span class="hljs-params">(<span class="hljs-keyword">double</span> value1,<span class="hljs-keyword">double</span> value2,<span class="hljs-keyword">int</span> scale)</span> <span class="hljs-keyword">throws</span> IllegalAccessException</span>&#123;<br>        <span class="hljs-comment">//如果精确范围小于0，抛出异常信息</span><br>        <span class="hljs-keyword">if</span>(scale&lt;<span class="hljs-number">0</span>)&#123;         <br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalAccessException(<span class="hljs-string">"精确度不能小于0"</span>);<br>        &#125;<br>        BigDecimal b1 = <span class="hljs-keyword">new</span> BigDecimal(Double.valueOf(value1));<br>        BigDecimal b2 = <span class="hljs-keyword">new</span> BigDecimal(Double.valueOf(value2));<br>        <span class="hljs-keyword">return</span> b1.divide(b2, scale).doubleValue();    <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java开发人员最常犯的10个错误</title>
    <link href="/2019/06/12/Java%E5%BC%80%E5%8F%91%E4%BA%BA%E5%91%98%E6%9C%80%E5%B8%B8%E7%8A%AF%E7%9A%8410%E4%B8%AA%E9%94%99%E8%AF%AF/"/>
    <url>/2019/06/12/Java%E5%BC%80%E5%8F%91%E4%BA%BA%E5%91%98%E6%9C%80%E5%B8%B8%E7%8A%AF%E7%9A%8410%E4%B8%AA%E9%94%99%E8%AF%AF/</url>
    
    <content type="html"><![CDATA[<h2 id="一、把数组转成-ArrayList"><a href="#一、把数组转成-ArrayList" class="headerlink" title="一、把数组转成     ArrayList"></a>一、把数组转成     <code>ArrayList</code></h2><p>为了将数组转换为ArrayList，开发者经常会这样做： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; list = Arrays.asList(arr);<br></code></pre></td></tr></table></figure><p>使用     <code>Arrays.asList()</code>方法可以得到一个ArrayList，但是得到这个     <code>ArrayList</code>其实是定义在Arrays类中的一个私有的静态内部类。这个类虽然和     <code>java.util.ArrayList</code>同名，但是并不是同一个类。     <code>java.util.Arrays.ArrayList</code>类中实现了     <code>set()</code>,      <code>get()</code>,      <code>contains()</code>等方法，但是并没有定义向其中增加元素的方法。也就是说通过     <code>Arrays.asList()</code>得到的ArrayList的大小是固定的。 </p><p>如果在开发过程中，想得到一个真正的ArrayList对象（     <code>java.util.ArrayList</code>的实例），可以通过以下方式： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;String&gt; arrayList = <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;(Arrays.asList(arr));<br></code></pre></td></tr></table></figure><pre><code>`  java.util.ArrayList`中包含一个可以接受集合类型参数的构造函数。因为     `  java.util.Arrays.ArrayList`这个内部类继承了AbstractList类，所以，该类也是Collection的子类。 </code></pre><a id="more"></a><h2 id="二、判断一个数组是否包含某个值"><a href="#二、判断一个数组是否包含某个值" class="headerlink" title="二、判断一个数组是否包含某个值"></a>二、判断一个数组是否包含某个值</h2><p>在判断一个数组中是否包含某个值的时候，开发者经常这样做： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Set&lt;String&gt; set = <span class="hljs-keyword">new</span> HashSet&lt;String&gt;(Arrays.asList(arr));<br><span class="hljs-keyword">return</span> set.contains(targetValue);<br></code></pre></td></tr></table></figure><p>在<a href="http://www.hollischuang.com/archives/1269" target="_blank" rel="noopener">在Java中如何高效的判断数组中是否包含某个元素</a>一文中，深入分析过，以上方式虽然可以实现功能，但是效率却比较低。因为将数组压入Collection类型中，首先要将数组元素遍历一遍，然后再使用集合类做其他操作。 </p><p>在判断一个数组是否包含某个值的时候，推荐使用for循环遍历的形式或者使用Apache Commons类库中提供的     <code>ArrayUtils</code>类的     <code>contains</code>方法。 </p><h2 id="三、在循环中删除列表中的元素"><a href="#三、在循环中删除列表中的元素" class="headerlink" title="三、在循环中删除列表中的元素"></a>三、在循环中删除列表中的元素</h2><p>在讨论这个问题之前，先考虑以下代码的输出结果： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;(Arrays.asList(<span class="hljs-string">"a"</span>,<span class="hljs-string">"b"</span>,<span class="hljs-string">"c"</span>,<span class="hljs-string">"d"</span>));<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;list.size();i++)&#123;<br>    list.remove(i);<br>&#125;<br>System.out.println(list);<br></code></pre></td></tr></table></figure><p>输出结果： </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[b,d]<br></code></pre></td></tr></table></figure><p>以上代码的目的是想遍历删除list中所有元素，但是结果却没有成功。原因是忽略了一个关键的问题：当一个元素被删除时，列表的大小缩小并且下标也会随之变化，所以当你想要在一个循环中用下标删除多个元素的时候，它并不会正常的生效。 </p><p>也有些人知道以上代码的问题就由于数组下标变换引起的。所以，他们想到使用增强for循环的形式： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;(Arrays.asList(<span class="hljs-string">"a"</span>,<span class="hljs-string">"b"</span>,<span class="hljs-string">"c"</span>,<span class="hljs-string">"d"</span>));<br><span class="hljs-keyword">for</span>(String s:list)&#123;<br>    <span class="hljs-keyword">if</span>(s.equals(<span class="hljs-string">"a"</span>))&#123;<br>        list.remove(s);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>但是，很不幸的是，以上代码会抛出     <code>ConcurrentModificationException</code>，有趣的是，如果在remove操作后增加一个break，代码就不会报错： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;(Arrays.asList(<span class="hljs-string">"a"</span>,<span class="hljs-string">"b"</span>,<span class="hljs-string">"c"</span>,<span class="hljs-string">"d"</span>));<br><span class="hljs-keyword">for</span>(String s:list)&#123;<br>    <span class="hljs-keyword">if</span>(s.equals(<span class="hljs-string">"a"</span>))&#123;<br>        list.remove(s);<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在<a href="http://www.hollischuang.com/archives/33" target="_blank" rel="noopener">Java中的fail-fast机制</a>一文中，深入分析了几种在遍历数组的同时删除其中元素的方法以及各种方法存在的问题。其中就介绍了上面的代码出错的原因。 </p><blockquote><p>迭代器（Iterator）是工作在一个独立的线程中，并且拥有一个 mutex 锁。 迭代器被创建之后会建立一个指向原来对象的单链索引表，当原来的对象数量发生变化时，这个索引表的内容不会同步改变，所以当索引指针往后移动的时候就找不到要迭代的对象，所以按照 fail-fast 原则 迭代器会马上抛出         <code>java.util.ConcurrentModificationException</code> 异常。     </p></blockquote><p>所以，正确的在遍历过程中删除元素的方法应该是使用Iterator： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;(Arrays.asList(<span class="hljs-string">"a"</span>, <span class="hljs-string">"b"</span>, <span class="hljs-string">"c"</span>, <span class="hljs-string">"d"</span>));<br>Iterator&lt;String&gt; iter = list.iterator();<br><span class="hljs-keyword">while</span> (iter.hasNext()) &#123;<br>    String s = iter.next();<br><br>    <span class="hljs-keyword">if</span> (s.equals(<span class="hljs-string">"a"</span>)) &#123;<br>        iter.remove();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><pre><code>`  next()`方法必须在调用     `  remove()`方法之前调用。如果在循环过程中先调用     `  remove()`，再调用     `  next()`，就会导致异常     `  ConcurrentModificationException`。原因如上。 </code></pre><h2 id="四、HashTable-和-HashMap-的选择"><a href="#四、HashTable-和-HashMap-的选择" class="headerlink" title="四、HashTable 和 HashMap 的选择"></a>四、HashTable 和 HashMap 的选择</h2><p>了解算法的人可能对HashTable比较熟悉，因为他是一个数据结构的名字。但在Java里边，用HashMap来表示这样的数据结构。Hashtable和 HashMap的一个关键性的不同是，HashTable是同步的，而HashMap不是。所以通常不需要HashTable，HashMap用的更多。 </p><p><a href="http://www.hollischuang.com/archives/82" target="_blank" rel="noopener">HashMap完全解读</a>、<a href="http://www.hollischuang.com/archives/442" target="_blank" rel="noopener">Java中常见亲属比较</a>等文章中介绍了他们的区别和如何选择。 </p><h2 id="五、使用原始集合类型"><a href="#五、使用原始集合类型" class="headerlink" title="五、使用原始集合类型"></a>五、使用原始集合类型</h2><p>在Java里边，原始类型和无界通配符类型很容易混合在一起。以Set为例，Set是一个原始类型，而Set&lt; ? &gt;是一个无界通配符类型。 （可以把原始类型理解为没有使用泛型约束的类型） </p><p>考虑下面使用原始类型List作为参数的代码： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(List list, Object o)</span></span>&#123;<br>    list.add(o);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>    List&lt;String&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;();<br>    add(list, <span class="hljs-number">10</span>);<br>    String s = list.get(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的代码将会抛出异常： </p><pre><code>`  java.lang.ClassCastException: java.lang.Integer cannot be cast to java.lang.String` </code></pre><p>使用原始集合类型是很危险的，因为原始集合类型跳过了泛型类型检查，是不安全的。Set、Set&lt; ? &gt;和Set&lt; Object &gt;之间有很大差别。关于泛型，可以参考下列文章：<a href="http://www.hollischuang.com/archives/1182" target="_blank" rel="noopener">《成神之路-基础篇》Java基础知识——泛型</a> </p><h2 id="六、访问级别"><a href="#六、访问级别" class="headerlink" title="六、访问级别"></a>六、访问级别</h2><p>程序员们经常使用     <code>public</code>作为类中的字段的修饰符，因为这样可以很简单的通过引用得到值，但这并不是好的设计，按照经验，分配给成员变量的访问级别应该尽可能的低。参考<a href="http://www.hollischuang.com/archives/1334" target="_blank" rel="noopener">Java中的四种访问级别</a> </p><h2 id="七、-ArrayList与-LinkedList的选择"><a href="#七、-ArrayList与-LinkedList的选择" class="headerlink" title="七、     ArrayList与     LinkedList的选择"></a>七、     <code>ArrayList</code>与     <code>LinkedList</code>的选择</h2><p>当程序员们不知道     <code>ArrayList</code>与     <code>LinkedList</code>的区别时，他们经常使用ArrayList，因为它看起来比较熟悉。然而，它们之前有巨大的性能差别。在<a href="http://www.hollischuang.com/archives/1349" target="_blank" rel="noopener">ArrayList vs LinkedList vs Vector 区别</a>、<a href="http://www.hollischuang.com/archives/442" target="_blank" rel="noopener">Java中常见亲属比较</a>等文章中介绍过，简而言之，如果有大量的增加删除操作并且没有很多的随机访问元素的操作，应该首先     <code>LinkedList</code>。（     <code>LinkedList</code>更适合从中间插入或者删除（链表的特性）） </p><h2 id="八、可变与不可变"><a href="#八、可变与不可变" class="headerlink" title="八、可变与不可变"></a>八、可变与不可变</h2><p>在<a href="http://www.hollischuang.com/archives/1246" target="_blank" rel="noopener">为什么Java要把字符串设计成不可变的</a>一文中介绍过，不可变对象有许多的优点，比如简单，安全等等。同时，也有人提出疑问：既然不可变有这么多好处，为什么不把所有类都搞成不可变的呢？ </p><p>通常情况下，可变对象可以用来避免产生过多的中间对象。一个经典的实例就是连接大量的字符串，如果使用不可变的字符串，将会产生大量的需要进行垃圾回收的对象。这会浪费CPU大量的时间，使用可变对象才是正确的方案(比如     <code>StringBuilder</code>)。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">String result=<span class="hljs-string">""</span>;<br><span class="hljs-keyword">for</span>(String s: arr)&#123;<br>    result = result + s;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="http://stackoverflow.com/questions/23616211/why-we-need-mutable-classes" target="_blank" rel="noopener">StackOverflow</a>中也有关于这个的讨论。 </p><h2 id="九、父类和子类的构造函数"><a href="#九、父类和子类的构造函数" class="headerlink" title="九、父类和子类的构造函数"></a>九、父类和子类的构造函数</h2><p>上图的代码中有两处编译时错误，原因其实很简单，主要和构造函数有关。首先，我们都知道： </p><blockquote><p>如果一个类没有定义构造函数，编译器将会插入一个无参数的默认构造函数。     </p><p>如果一个类中定义了一个带参数的构造函数，那么编译器就不会再帮我们创建无参的构造函数。 </p></blockquote><p>上面的Super类中定义了一个带参数的构造函数。编译器将不会插入默认的无参数构造函数。 </p><p>我们还应该知道： </p><blockquote><p>子类的所有构造函数（无论是有参还是无参）在执行时，都会调用父类的无参构造函数。     </p></blockquote><p>所以，编译器试图调用Super类中的无参构造函数。但是父类默认的构造函数未定义，编译器就会报出这个错误信息。 </p><p>要解决这个问题，可以简单的通过 </p><ul><li><p>1)在父类中添加一个Super()构造方法，就像这样：         </p><p>public Super(){}         </p></li><li><p>2)移除自定义的父类构造函数         </p></li><li><p>3)在子类的构造函数中调用父类的super(value)。         </p></li></ul><h2 id="十、””还是构造函数"><a href="#十、””还是构造函数" class="headerlink" title="十、””还是构造函数"></a>十、””还是构造函数</h2><p>关于这个问题，也是程序员经常出现困惑的地方，在<a href="http://www.hollischuang.com/archives/1249" target="_blank" rel="noopener">该如何创建字符串，使用” “还是构造函数？</a>中也介绍过. </p><blockquote><p>如果你只需要创建一个字符串，你可以使用双引号的方式，如果你需要在堆中创建一个新的对象，你可以选择构造函数的方式。     </p></blockquote><p>在     <code>String d = new String(&quot;abcd&quot;)</code>时，因为字面值“abcd”已经是字符串类型，那么使用构造函数方式只会创建一个额外没有用处的对象。 </p><p><strong>欢迎关注微信公众号​：</strong></p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006y8mN6gy1g7d3llw1nkj30b40b4wee.jpg" srcset="/img/loading.gif" alt="欢迎关注公众号" style="width: 100px" />]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis分布式锁的正确实现方式</title>
    <link href="/2019/06/12/Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F/"/>
    <url>/2019/06/12/Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>分布式锁一般有三种实现方式：1. 数据库乐观锁；2. 基于Redis的分布式锁；3. 基于ZooKeeper的分布式锁。本篇博客将介绍第二种方式，基于Redis实现分布式锁。虽然网上已经有各种介绍Redis分布式锁实现的博客，然而他们的实现却有着各种各样的问题，为了避免误人子弟，本篇博客将详细介绍如何正确地实现Redis分布式锁。</p><hr><h2 id="可靠性"><a href="#可靠性" class="headerlink" title="可靠性"></a>可靠性</h2><a id="more"></a><p>首先，为了确保分布式锁可用，我们至少要确保锁的实现同时满足以下四个条件：</p><ul><li>互斥性。在任意时刻，只有一个客户端能持有锁。</li><li>不会发生死锁。即使有一个客户端在持有锁的期间崩溃而没有主动解锁，也能保证后续其他客户端能加锁。</li><li>具有容错性。只要大部分的Redis节点正常运行，客户端就可以加锁和解锁。</li><li>解铃还须系铃人。加锁和解锁必须是同一个客户端，客户端自己不能把别人加的锁给解了。</li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="组件依赖"><a href="#组件依赖" class="headerlink" title="组件依赖"></a>组件依赖</h3><p>首先我们要通过Maven引入Jedis开源组件，在pom.xml文件加入下面的代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>redis.clients<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jedis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="加锁代码"><a href="#加锁代码" class="headerlink" title="加锁代码"></a>加锁代码</h3><h4 id="正确姿势"><a href="#正确姿势" class="headerlink" title="正确姿势"></a>正确姿势</h4><p>Talk is cheap, show me the code。先展示代码，再带大家慢慢解释为什么这样实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RedisTool</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String LOCK_SUCCESS = <span class="hljs-string">"OK"</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String SET_IF_NOT_EXIST = <span class="hljs-string">"NX"</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String SET_WITH_EXPIRE_TIME = <span class="hljs-string">"PX"</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 尝试获取分布式锁</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> jedis Redis客户端</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> lockKey 锁</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> requestId 请求标识</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> expireTime 超期时间</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 是否获取成功</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">tryGetDistributedLock</span><span class="hljs-params">(Jedis jedis, String lockKey, String requestId, <span class="hljs-keyword">int</span> expireTime)</span> </span>&#123;<br><br>        String result = jedis.set(lockKey, requestId, SET_IF_NOT_EXIST, SET_WITH_EXPIRE_TIME, expireTime);<br><br>        <span class="hljs-keyword">if</span> (LOCK_SUCCESS.equals(result)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到，我们加锁就一行代码：jedis.set(String key, String value, String nxxx, String expx, int time)，这个set()方法一共有五个形参：</p><p><strong>第一个为key</strong>，我们使用key来当锁，因为key是唯一的。</p><p><strong>第二个为value</strong>，我们传的是requestId，很多童鞋可能不明白，有key作为锁不就够了吗，为什么还要用到value？原因就是我们在上面讲到可靠性时，分布式锁要满足第四个条件解铃还须系铃人，通过给value赋值为requestId，我们就知道这把锁是哪个请求加的了，在解锁的时候就可以有依据。requestId可以使用UUID.randomUUID().toString()方法生成。</p><p><strong>第三个为nxxx</strong>，这个参数我们填的是NX，意思是SET IF NOT EXIST，即当key不存在时，我们进行set操作；若key已经存在，则不做任何操作；</p><p><strong>第四个为expx</strong>，这个参数我们传的是PX，意思是我们要给这个key加一个过期的设置，具体时间由第五个参数决定。</p><p><strong>第五个为time</strong>，与第四个参数相呼应，代表key的过期时间。</p><p>总的来说，执行上面的set()方法就只会导致两种结果：</p><ol><li>当前没有锁（key不存在），那么就进行加锁操作，并对锁设置个有效期，同时value表示加锁的客户端。</li><li>已有锁存在，不做任何操作。</li></ol><p>心细的童鞋就会发现了，我们的加锁代码满足我们可靠性里描述的三个条件。首先，set()加入了NX参数，可以保证如果已有key存在，则函数不会调用成功，也就是只有一个客户端能持有锁，满足互斥性。其次，由于我们对锁设置了过期时间，即使锁的持有者后续发生崩溃而没有解锁，锁也会因为到了过期时间而自动解锁（即key被删除），不会发生死锁。</p><p>最后，因为我们将value赋值为requestId，代表加锁的客户端请求标识，那么在客户端在解锁的时候就可以进行校验是否是同一个客户端。由于我们只考虑Redis单机部署的场景，所以容错性我们暂不考虑。</p><h4 id="错误示例1"><a href="#错误示例1" class="headerlink" title="错误示例1"></a>错误示例1</h4><p>比较常见的错误示例就是使用jedis.setnx()和jedis.expire()组合实现加锁，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">wrongGetLock1</span><span class="hljs-params">(Jedis jedis, String lockKey, String requestId, <span class="hljs-keyword">int</span> expireTime)</span> </span>&#123;<br><br>    Long result = jedis.setnx(lockKey, requestId);<br>    <span class="hljs-keyword">if</span> (result == <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-comment">// 若在这里程序突然崩溃，则无法设置过期时间，将发生死锁</span><br>        jedis.expire(lockKey, expireTime);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>setnx()方法作用就是SET IF NOT EXIST，expire()方法就是给锁加一个过期时间。乍一看好像和前面的set()方法结果一样，然而由于这是两条Redis命令，不具有原子性，如果程序在执行完setnx()之后突然崩溃，导致锁没有设置过期时间。那么将会发生死锁。网上之所以有人这样实现，是因为低版本的jedis并不支持多参数的set()方法。</p><h4 id="错误示例2"><a href="#错误示例2" class="headerlink" title="错误示例2"></a>错误示例2</h4><p>这一种错误示例就比较难以发现问题，而且实现也比较复杂。实现思路：使用jedis.setnx()命令实现加锁，其中key是锁，value是锁的过期时间。</p><p>执行过程：</p><ol><li>通过setnx()方法尝试加锁，如果当前锁不存在，返回加锁成功。</li><li>如果锁已经存在则获取锁的过期时间，和当前时间比较，如果锁已经过期，则设置新的过期时间，返回加锁成功。</li></ol><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">wrongGetLock2</span><span class="hljs-params">(Jedis jedis, String lockKey, <span class="hljs-keyword">int</span> expireTime)</span> </span>&#123;<br><br>    <span class="hljs-keyword">long</span> expires = System.currentTimeMillis() + expireTime;<br>    String expiresStr = String.valueOf(expires);<br><br>    <span class="hljs-comment">// 如果当前锁不存在，返回加锁成功</span><br>    <span class="hljs-keyword">if</span> (jedis.setnx(lockKey, expiresStr) == <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 如果锁存在，获取锁的过期时间</span><br>    String currentValueStr = jedis.get(lockKey);<br>    <span class="hljs-keyword">if</span> (currentValueStr != <span class="hljs-keyword">null</span> &amp;&amp; Long.parseLong(currentValueStr) &lt; System.currentTimeMillis()) &#123;<br>        <span class="hljs-comment">// 锁已过期，获取上一个锁的过期时间，并设置现在锁的过期时间</span><br>        String oldValueStr = jedis.getSet(lockKey, expiresStr);<br>        <span class="hljs-keyword">if</span> (oldValueStr != <span class="hljs-keyword">null</span> &amp;&amp; oldValueStr.equals(currentValueStr)) &#123;<br>            <span class="hljs-comment">// 考虑多线程并发的情况，只有一个线程的设置值和当前值相同，它才有权利加锁</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 其他情况，一律返回加锁失败</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>那么这段代码问题在哪里？1. 由于是客户端自己生成过期时间，所以需要强制要求分布式下每个客户端的时间必须同步。 2. 当锁过期的时候，如果多个客户端同时执行jedis.getSet()方法，那么虽然最终只有一个客户端可以加锁，但是这个客户端的锁的过期时间可能被其他客户端覆盖。3. 锁不具备拥有者标识，即任何客户端都可以解锁。</p><h3 id="解锁代码"><a href="#解锁代码" class="headerlink" title="解锁代码"></a>解锁代码</h3><h4 id="正确姿势-1"><a href="#正确姿势-1" class="headerlink" title="正确姿势"></a>正确姿势</h4><p>还是先展示代码，再带大家慢慢解释为什么这样实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RedisTool</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Long RELEASE_SUCCESS = <span class="hljs-number">1L</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 释放分布式锁</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> jedis Redis客户端</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> lockKey 锁</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> requestId 请求标识</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 是否释放成功</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">releaseDistributedLock</span><span class="hljs-params">(Jedis jedis, String lockKey, String requestId)</span> </span>&#123;<br><br>        String script = <span class="hljs-string">"if redis.call('get', KEYS[1]) == ARGV[1] then return redis.call('del', KEYS[1]) else return 0 end"</span>;<br>        Object result = jedis.eval(script, Collections.singletonList(lockKey), Collections.singletonList(requestId));<br><br>        <span class="hljs-keyword">if</span> (RELEASE_SUCCESS.equals(result)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到，我们解锁只需要两行代码就搞定了！第一行代码，我们写了一个简单的Lua脚本代码，上一次见到这个编程语言还是在《黑客与画家》里，没想到这次居然用上了。第二行代码，我们将Lua代码传到jedis.eval()方法里，并使参数KEYS[1]赋值为lockKey，ARGV[1]赋值为requestId。eval()方法是将Lua代码交给Redis服务端执行。</p><p>那么这段Lua代码的功能是什么呢？其实很简单，首先获取锁对应的value值，检查是否与requestId相等，如果相等则删除锁（解锁）。那么为什么要使用Lua语言来实现呢？因为要确保上述操作是原子性的。关于非原子性会带来什么问题，可以阅读【解锁代码-错误示例2】 。那么为什么执行eval()方法可以确保原子性，源于Redis的特性，下面是官网对eval命令的部分解释：</p><p>简单来说，就是在eval命令执行Lua代码的时候，Lua代码将被当成一个命令去执行，并且直到eval命令执行完成，Redis才会执行其他命令。</p><h4 id="错误示例1-1"><a href="#错误示例1-1" class="headerlink" title="错误示例1"></a>错误示例1</h4><p>最常见的解锁代码就是直接使用jedis.del()方法删除锁，这种不先判断锁的拥有者而直接解锁的方式，会导致任何客户端都可以随时进行解锁，即使这把锁不是它的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">wrongReleaseLock1</span><span class="hljs-params">(Jedis jedis, String lockKey)</span> </span>&#123;<br>    jedis.del(lockKey);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="错误示例2-1"><a href="#错误示例2-1" class="headerlink" title="错误示例2"></a>错误示例2</h4><p>这种解锁代码乍一看也是没问题，甚至我之前也差点这样实现，与正确姿势差不多，唯一区别的是分成两条命令去执行，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">wrongReleaseLock2</span><span class="hljs-params">(Jedis jedis, String lockKey, String requestId)</span> </span>&#123;<br><br>    <span class="hljs-comment">// 判断加锁与解锁是不是同一个客户端</span><br>    <span class="hljs-keyword">if</span> (requestId.equals(jedis.get(lockKey))) &#123;<br>        <span class="hljs-comment">// 若在此时，这把锁突然不是这个客户端的，则会误解锁</span><br>        jedis.del(lockKey);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>如代码注释，问题在于如果调用jedis.del()方法的时候，这把锁已经不属于当前客户端的时候会解除他人加的锁。那么是否真的有这种场景？答案是肯定的，比如客户端A加锁，一段时间之后客户端A解锁，在执行jedis.del()之前，锁突然过期了，此时客户端B尝试加锁成功，然后客户端A再执行del()方法，则将客户端B的锁给解除了。</p><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文主要介绍了如何使用Java代码正确实现Redis分布式锁，对于加锁和解锁也分别给出了两个比较经典的错误示例。其实想要通过Redis实现分布式锁并不难，只要保证能满足可靠性里的四个条件。互联网虽然给我们带来了方便，只要有问题就可以google，然而网上的答案一定是对的吗？其实不然，所以我们更应该时刻保持着质疑精神，多想多验证。</p><p>如果你的项目中Redis是多机部署的，那么可以尝试使用Redisson实现分布式锁，这是Redis官方提供的Java组件。</p><p><strong>欢迎关注微信公众号​：</strong></p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006y8mN6gy1g7d3llw1nkj30b40b4wee.jpg" srcset="/img/loading.gif" alt="欢迎关注公众号" style="width: 100px" />]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shadowsocks-Go一键安装脚本</title>
    <link href="/2019/06/11/Shadowsocks-Go%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC/"/>
    <url>/2019/06/11/Shadowsocks-Go%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<p>本脚本适用环境：<br>系统支持：CentOS，Debian，Ubuntu<br>内存要求：≥128M </p><p>关于本脚本：<br>一键安装 Go 版的 shadowsocks 最新版本 1.1.5。据说 go 版本有 buff 。与 <a href="http://lib.csdn.net/base/python" target="_blank" rel="noopener">Python</a> 版不同的是，其客户端程序能使用多个服务端配置，本脚本安装的是服务端程序。作者默认推荐 aes-128-cfb 加密，基于一致性，脚本使用了 aes-256-cfb 加密方式</p><a id="more"></a><p>默认配置：<br>服务器端口：自己设定（如不设定，默认为 8989）<br>客户端端口：1080<br>密码：自己设定（如不设定，默认为teddysun.com）<br>客户端下载：<br><a href="https://github.com/shadowsocks/shadowsocks-windows/releases" target="_blank" rel="noopener">https://github.com/shadowsocks/shadowsocks-windows/releases</a><br>使用方法：<br>使用root用户登录，运行以下命令：<br>wget –no-check-certificate <a href="https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-go.sh" target="_blank" rel="noopener">https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-go.sh</a><br>chmod +x shadowsocks-go.sh<br>./shadowsocks-go.sh 2&gt;&amp;1 | tee shadowsocks-go.log </p><p>安装完成后，脚本提示如下：<br>Congratulations, shadowsocks-go install completed!<br>Your Server IP:your_server_ip<br>Your Server Port:your_server_port<br>Your Password:your_password<br>Your Local Port:1080<br>Your Encryption Method:aes-256-cfb </p><p>Welcome to visit:<a href="https://teddysun.com/392.html" target="_blank" rel="noopener">https://teddysun.com/392.html</a><br>Enjoy it! </p><p>卸载方法：<br>使用 root 用户登录，运行以下命令：<br>./shadowsocks-go.sh uninstall </p><p>其他事项：<br>客户端配置的参考链接：<a href="https://teddysun.com/339.html" target="_blank" rel="noopener">https://teddysun.com/339.html</a><br>安装完成后即已后台启动 shadowsocks-go ，运行：<br>/etc/init.d/shadowsocks status </p><p>可以查看 shadowsocks-go 进程是否已经启动。<br>本脚本安装完成后，已将 shadowsocks-go 加入开机自启动。<br>统一回复：<br>在 Bandwagonhost 的 VPS 上出现 Trace/breakpoint trap 现象的，初步认为是 Bandwagonhost 的系统问题。<br>经过<a href="http://lib.csdn.net/base/softwaretest" target="_blank" rel="noopener">测试</a>发现，和版本升级无关，唯独在 Bandwagonhost 才会出现这个现象。建议换成 libev 版，或者将系统换为 CentOS 7 可以解决该问题。<br>本人不是 Shadowsocks Go 作者，安装程序均来自于这里。<br>使用命令：<br>启动：/etc/init.d/shadowsocks start<br>停止：/etc/init.d/shadowsocks stop<br>重启：/etc/init.d/shadowsocks restart<br>状态：/etc/init.d/shadowsocks status<br>多用户多端口配置文件 sample（2015年01月08日）：<br>配置文件路径：/etc/shadowsocks/config.json<br>{<br>“port_password”:{<br>“8989”:”password0”,<br>“9001”:”password1”,<br>“9002”:”password2”,<br>“9003”:”password3”,<br>“9004”:”password4”<br>},<br>“method”:”aes-256-cfb”,<br>“timeout”:600<br>} </p><p>官方版本的 sample ，详见这里。<br>更多版本 Shadowsocks 服务端一键安装脚本：<br>ShadowsocksR 版一键安装脚本（CentOS，Debian，Ubuntu）<br>Shadowsocks Python 版一键安装脚本（CentOS，Debian，Ubuntu）<br>CentOS 下 shadowsocks-libev 一键安装脚本<br>Debian 下 shadowsocks-libev 一键安装脚本 </p><p>附：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br></pre></td><td class="code"><pre><code class="hljs go">## <span class="hljs-keyword">go</span>一键安装脚本 #######################################################################<br><br>#!/usr/bin/env bash<br>PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin<br>export PATH<br>#=================================================================#<br>#  System Required:  CentOS, Debian, Ubuntu                      #<br>#  Description: One click Install Shadowsocks-<span class="hljs-keyword">go</span> server          #<br>#  Author: Teddysun &lt;i@teddysun.com&gt;                            #<br>#  Thanks: @cyfdecyf &lt;https:<span class="hljs-comment">//twitter.com/cyfdecyf&gt;              #</span><br>#  Intro:  https:<span class="hljs-comment">//teddysun.com/392.html                        #</span><br>#==================================================================<br><br>clear<br>echo<br>echo <span class="hljs-string">"#############################################################"</span><br>echo <span class="hljs-string">"# One click Install Shadowsocks-go server                  #"</span><br>echo <span class="hljs-string">"# Intro: https://teddysun.com/392.html                      #"</span><br>echo <span class="hljs-string">"# Author: Teddysun &lt;i@teddysun.com&gt;                        #"</span><br>echo <span class="hljs-string">"# Github: https://github.com/shadowsocks/shadowsocks-go    #"</span><br>echo <span class="hljs-string">"#############################################################"</span><br>echo<br><br>#Current folder<br>cur_dir=<span class="hljs-string">`pwd`</span><br><br># Make sure only root can run our script<br>rootness()&#123;<br>    <span class="hljs-keyword">if</span> [[ $EUID -ne <span class="hljs-number">0</span> ]]; then<br>      echo <span class="hljs-string">"Error:This script must be run as root!"</span> <span class="hljs-number">1</span>&gt;&amp;<span class="hljs-number">2</span><br>      exit <span class="hljs-number">1</span><br>    fi<br>&#125;<br><br>#Check system<br>check_sys()&#123;<br>    local checkType=$<span class="hljs-number">1</span><br>    local value=$<span class="hljs-number">2</span><br><br>    local release=<span class="hljs-string">''</span><br>    local systemPackage=<span class="hljs-string">''</span><br><br>    <span class="hljs-keyword">if</span> [[ -f /etc/redhat-release ]]; then<br>        release=<span class="hljs-string">"centos"</span><br>        systemPackage=<span class="hljs-string">"yum"</span><br>    elif cat /etc/issue | grep -q -E -i <span class="hljs-string">"debian"</span>; then<br>        release=<span class="hljs-string">"debian"</span><br>        systemPackage=<span class="hljs-string">"apt"</span><br>    elif cat /etc/issue | grep -q -E -i <span class="hljs-string">"ubuntu"</span>; then<br>        release=<span class="hljs-string">"ubuntu"</span><br>        systemPackage=<span class="hljs-string">"apt"</span><br>    elif cat /etc/issue | grep -q -E -i <span class="hljs-string">"centos|red hat|redhat"</span>; then<br>        release=<span class="hljs-string">"centos"</span><br>        systemPackage=<span class="hljs-string">"yum"</span><br>    elif cat /proc/version | grep -q -E -i <span class="hljs-string">"debian"</span>; then<br>        release=<span class="hljs-string">"debian"</span><br>        systemPackage=<span class="hljs-string">"apt"</span><br>    elif cat /proc/version | grep -q -E -i <span class="hljs-string">"ubuntu"</span>; then<br>        release=<span class="hljs-string">"ubuntu"</span><br>        systemPackage=<span class="hljs-string">"apt"</span><br>    elif cat /proc/version | grep -q -E -i <span class="hljs-string">"centos|red hat|redhat"</span>; then<br>        release=<span class="hljs-string">"centos"</span><br>        systemPackage=<span class="hljs-string">"yum"</span><br>    fi<br><br>    <span class="hljs-keyword">if</span> [[ $&#123;checkType&#125; == <span class="hljs-string">"sysRelease"</span> ]]; then<br>        <span class="hljs-keyword">if</span> [ <span class="hljs-string">"$value"</span> == <span class="hljs-string">"$release"</span> ]; then<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>        fi<br>    elif [[ $&#123;checkType&#125; == <span class="hljs-string">"packageManager"</span> ]]; then<br>        <span class="hljs-keyword">if</span> [ <span class="hljs-string">"$value"</span> == <span class="hljs-string">"$systemPackage"</span> ]; then<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>        fi<br>    fi<br>&#125;<br><br># Get version<br>getversion()&#123;<br>    <span class="hljs-keyword">if</span> [[ -s /etc/redhat-release ]]; then<br>        grep -oE  <span class="hljs-string">"[0-9.]+"</span> /etc/redhat-release<br>    <span class="hljs-keyword">else</span><br>        grep -oE  <span class="hljs-string">"[0-9.]+"</span> /etc/issue<br>    fi<br>&#125;<br><br># CentOS version<br>centosversion()&#123;<br>    <span class="hljs-keyword">if</span> check_sys sysRelease centos; then<br>        local code=$<span class="hljs-number">1</span><br>        local version=<span class="hljs-string">"$(getversion)"</span><br>        local main_ver=$&#123;version%%.*&#125;<br>        <span class="hljs-keyword">if</span> [ <span class="hljs-string">"$main_ver"</span> == <span class="hljs-string">"$code"</span> ]; then<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>        fi<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    fi<br>&#125;<br><br># is <span class="hljs-number">64</span>bit or not<br>is_64bit()&#123;<br>    <span class="hljs-keyword">if</span> [ <span class="hljs-string">`getconf WORD_BIT`</span> = <span class="hljs-string">'32'</span> ] &amp;&amp; [ <span class="hljs-string">`getconf LONG_BIT`</span> = <span class="hljs-string">'64'</span> ] ; then<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    fi<br>&#125;<br><br># Disable selinux<br>disable_selinux()&#123;<br>    <span class="hljs-keyword">if</span> [ -s /etc/selinux/config ] &amp;&amp; grep <span class="hljs-string">'SELINUX=enforcing'</span> /etc/selinux/config; then<br>        sed -i <span class="hljs-string">'s/SELINUX=enforcing/SELINUX=disabled/g'</span> /etc/selinux/config<br>        setenforce <span class="hljs-number">0</span><br>    fi<br>&#125;<br><br>get_ip()&#123;<br>    local IP=$( ip addr | egrep -o <span class="hljs-string">'[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;'</span> | egrep -v <span class="hljs-string">"^192\.168|^172\.1[6-9]\.|^172\.2[0-9]\.|^172\.3[0-2]\.|^10\.|^127\.|^255\.|^0\."</span> | head -n <span class="hljs-number">1</span> )<br>    [ -z $&#123;IP&#125; ] &amp;&amp; IP=$( wget -qO- -t1 -T2 ipv4.icanhazip.com )<br>    [ -z $&#123;IP&#125; ] &amp;&amp; IP=$( wget -qO- -t1 -T2 ipinfo.io/ip )<br>    [ ! -z $&#123;IP&#125; ] &amp;&amp; echo $&#123;IP&#125; || echo<br>&#125;<br><br># Pre-installation settings<br>pre_install()&#123;<br>    <span class="hljs-keyword">if</span> ! check_sys packageManager yum &amp;&amp; ! check_sys packageManager apt; then<br>        echo <span class="hljs-string">"Error: Your OS is not supported. please change OS to CentOS/Debian/Ubuntu and try again."</span><br>        exit <span class="hljs-number">1</span><br>    fi<br>    # Set shadowsocks-<span class="hljs-keyword">go</span> config password<br>    echo <span class="hljs-string">"Please input password for shadowsocks-go:"</span><br>    read -p <span class="hljs-string">"(Default password: teddysun.com):"</span> shadowsockspwd<br>    [ -z <span class="hljs-string">"$&#123;shadowsockspwd&#125;"</span> ] &amp;&amp; shadowsockspwd=<span class="hljs-string">"teddysun.com"</span><br>    echo<br>    echo <span class="hljs-string">"---------------------------"</span><br>    echo <span class="hljs-string">"password = $&#123;shadowsockspwd&#125;"</span><br>    echo <span class="hljs-string">"---------------------------"</span><br>    echo<br>    # Set shadowsocks-<span class="hljs-keyword">go</span> config port<br>    while <span class="hljs-literal">true</span><br>    do<br>    echo -e <span class="hljs-string">"Please input port for shadowsocks-go [1-65535]:"</span><br>    read -p <span class="hljs-string">"(Default port: 8989):"</span> shadowsocksport<br>    [ -z <span class="hljs-string">"$&#123;shadowsocksport&#125;"</span> ] &amp;&amp; shadowsocksport=<span class="hljs-string">"8989"</span><br>    expr $&#123;shadowsocksport&#125; + <span class="hljs-number">0</span> &amp;&gt;/dev/null<br>    <span class="hljs-keyword">if</span> [ $? -eq <span class="hljs-number">0</span> ]; then<br>        <span class="hljs-keyword">if</span> [ $&#123;shadowsocksport&#125; -ge <span class="hljs-number">1</span> ] &amp;&amp; [ $&#123;shadowsocksport&#125; -le <span class="hljs-number">65535</span> ]; then<br>            echo<br>            echo <span class="hljs-string">"---------------------------"</span><br>            echo <span class="hljs-string">"port = $&#123;shadowsocksport&#125;"</span><br>            echo <span class="hljs-string">"---------------------------"</span><br>            echo<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">else</span><br>            echo <span class="hljs-string">"Input error, please input correct number"</span><br>        fi<br>    <span class="hljs-keyword">else</span><br>        echo <span class="hljs-string">"Input error, please input correct number"</span><br>    fi<br>    done<br>    get_char()&#123;<br>        SAVEDSTTY=<span class="hljs-string">`stty -g`</span><br>        stty -echo<br>        stty cbreak<br>        dd <span class="hljs-keyword">if</span>=/dev/tty bs=<span class="hljs-number">1</span> count=<span class="hljs-number">1</span> <span class="hljs-number">2</span>&gt; /dev/null<br>        stty -raw<br>        stty echo<br>        stty $SAVEDSTTY<br>    &#125;<br>    echo<br>    echo <span class="hljs-string">"Press any key to start...or Press Ctrl+C to cancel"</span><br>    char=<span class="hljs-string">`get_char`</span><br>    #Install necessary dependencies<br>    <span class="hljs-keyword">if</span> check_sys packageManager yum; then<br>        yum install -y wget unzip gzip curl<br>    elif check_sys packageManager apt; then<br>        apt-get -y update<br>        apt-get install -y wget unzip gzip curl<br>    fi<br>    echo<br><br>&#125;<br><br># Download shadowsocks-<span class="hljs-keyword">go</span><br>download_files()&#123;<br>    cd $&#123;cur_dir&#125;<br>    <span class="hljs-keyword">if</span> is_64bit; then<br>        <span class="hljs-keyword">if</span> ! wget --no-check-certificate -c https:<span class="hljs-comment">//github.com/shadowsocks/shadowsocks-go/releases/download/1.1.5/shadowsocks-server-linux64-1.1.5.gz; then</span><br>            echo <span class="hljs-string">"Failed to download shadowsocks-server-linux64-1.1.5.gz"</span><br>            exit <span class="hljs-number">1</span><br>        fi<br>        gzip -d shadowsocks-server-linux64<span class="hljs-number">-1.1</span><span class="hljs-number">.5</span>.gz<br>        <span class="hljs-keyword">if</span> [ $? -eq <span class="hljs-number">0</span> ]; then<br>            echo <span class="hljs-string">"Decompress shadowsocks-server-linux64-1.1.5.gz success."</span><br>        <span class="hljs-keyword">else</span><br>            echo <span class="hljs-string">"Decompress shadowsocks-server-linux64-1.1.5.gz failed! Please check gzip command."</span><br>            exit <span class="hljs-number">1</span><br>        fi<br>        mv -f shadowsocks-server-linux64<span class="hljs-number">-1.1</span><span class="hljs-number">.5</span> /usr/bin/shadowsocks-server<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">if</span> ! wget --no-check-certificate -c https:<span class="hljs-comment">//github.com/shadowsocks/shadowsocks-go/releases/download/1.1.5/shadowsocks-server-linux32-1.1.5.gz; then</span><br>            echo <span class="hljs-string">"Failed to download shadowsocks-server-linux32-1.1.5.gz"</span><br>            exit <span class="hljs-number">1</span><br>        fi<br>        gzip -d shadowsocks-server-linux32<span class="hljs-number">-1.1</span><span class="hljs-number">.5</span>.gz<br>        <span class="hljs-keyword">if</span> [ $? -eq <span class="hljs-number">0</span> ]; then<br>            echo <span class="hljs-string">"Decompress shadowsocks-server-linux32-1.1.5.gz success."</span><br>        <span class="hljs-keyword">else</span><br>            echo <span class="hljs-string">"Decompress shadowsocks-server-linux32-1.1.5.gz failed! Please check gzip command."</span><br>            exit <span class="hljs-number">1</span><br>        fi<br>        mv -f shadowsocks-server-linux32<span class="hljs-number">-1.1</span><span class="hljs-number">.5</span> /usr/bin/shadowsocks-server<br>    fi<br><br>    # Download start script<br>    <span class="hljs-keyword">if</span> check_sys packageManager yum; then<br>        <span class="hljs-keyword">if</span> ! wget --no-check-certificate -O /etc/init.d/shadowsocks https:<span class="hljs-comment">//raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-go; then</span><br>            echo <span class="hljs-string">"Failed to download shadowsocks-go auto start script!"</span><br>            exit <span class="hljs-number">1</span><br>        fi<br>    elif check_sys packageManager apt; then<br>        <span class="hljs-keyword">if</span> ! wget --no-check-certificate -O /etc/init.d/shadowsocks https:<span class="hljs-comment">//raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-go-debian; then</span><br>            echo <span class="hljs-string">"Failed to download shadowsocks-go auto start script!"</span><br>            exit <span class="hljs-number">1</span><br>        fi<br>    fi<br>&#125;<br><br># Config shadowsocks<br>config_shadowsocks()&#123;<br>    <span class="hljs-keyword">if</span> [ ! -d /etc/shadowsocks ]; then<br>        mkdir -p /etc/shadowsocks<br>    fi<br>    cat &gt; /etc/shadowsocks/config.json&lt;&lt;-EOF<br>&#123;<br>    <span class="hljs-string">"server"</span>:<span class="hljs-string">"0.0.0.0"</span>,<br>    <span class="hljs-string">"server_port"</span>:$&#123;shadowsocksport&#125;,<br>    <span class="hljs-string">"local_port"</span>:<span class="hljs-number">1080</span>,<br>    <span class="hljs-string">"password"</span>:<span class="hljs-string">"$&#123;shadowsockspwd&#125;"</span>,<br>    <span class="hljs-string">"method"</span>:<span class="hljs-string">"aes-256-cfb"</span>,<br>    <span class="hljs-string">"timeout"</span>:<span class="hljs-number">600</span><br>&#125;<br>EOF<br>&#125;<br><br># Firewall set<br>firewall_set()&#123;<br>    echo <span class="hljs-string">"firewall set start..."</span><br>    <span class="hljs-keyword">if</span> centosversion <span class="hljs-number">6</span>; then<br>        /etc/init.d/iptables status &gt; /dev/null <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> [ $? -eq <span class="hljs-number">0</span> ]; then<br>            iptables -L -n | grep -i $&#123;shadowsocksport&#125; &gt; /dev/null <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> [ $? -ne <span class="hljs-number">0</span> ]; then<br>                iptables -I INPUT -m state --state NEW -m tcp -p tcp --dport $&#123;shadowsocksport&#125; -j ACCEPT<br>                iptables -I INPUT -m state --state NEW -m udp -p udp --dport $&#123;shadowsocksport&#125; -j ACCEPT<br>                /etc/init.d/iptables save<br>                /etc/init.d/iptables restart<br>            <span class="hljs-keyword">else</span><br>                echo <span class="hljs-string">"port $&#123;shadowsocksport&#125; has been set up."</span><br>            fi<br>        <span class="hljs-keyword">else</span><br>            echo <span class="hljs-string">"WARNING: iptables looks like shutdown or not installed, please manually set it if necessary."</span><br>        fi<br>    elif centosversion <span class="hljs-number">7</span>; then<br>        systemctl status firewalld &gt; /dev/null <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> [ $? -eq <span class="hljs-number">0</span> ]; then<br>            firewall-cmd --permanent --zone=public --add-port=$&#123;shadowsocksport&#125;/tcp<br>            firewall-cmd --permanent --zone=public --add-port=$&#123;shadowsocksport&#125;/udp<br>            firewall-cmd --reload<br>        <span class="hljs-keyword">else</span><br>            echo <span class="hljs-string">"Firewalld looks like not running, try to start..."</span><br>            systemctl start firewalld<br>            <span class="hljs-keyword">if</span> [ $? -eq <span class="hljs-number">0</span> ]; then<br>                firewall-cmd --permanent --zone=public --add-port=$&#123;shadowsocksport&#125;/tcp<br>                firewall-cmd --permanent --zone=public --add-port=$&#123;shadowsocksport&#125;/udp<br>                firewall-cmd --reload<br>            <span class="hljs-keyword">else</span><br>                echo <span class="hljs-string">"WARNING: Try to start firewalld failed. please enable port $&#123;shadowsocksport&#125; manually if necessary."</span><br>            fi<br>        fi<br>    fi<br>    echo <span class="hljs-string">"firewall set completed..."</span><br>&#125;<br><br># Install Shadowsocks-<span class="hljs-keyword">go</span><br>install()&#123;<br><br>    <span class="hljs-keyword">if</span> [ -s /usr/bin/shadowsocks-server ]; then<br>        echo <span class="hljs-string">"shadowsocks-go install success!"</span><br>        chmod +x /usr/bin/shadowsocks-server<br>        chmod +x /etc/init.d/shadowsocks<br><br>        <span class="hljs-keyword">if</span> check_sys packageManager yum; then<br>            chkconfig --add shadowsocks<br>            chkconfig shadowsocks on<br>        elif check_sys packageManager apt; then<br>            update-rc.d -f shadowsocks defaults<br>        fi<br><br>        /etc/init.d/shadowsocks start<br>        <span class="hljs-keyword">if</span> [ $? -eq <span class="hljs-number">0</span> ]; then<br>            echo <span class="hljs-string">"Shadowsocks-go start success!"</span><br>        <span class="hljs-keyword">else</span><br>            echo <span class="hljs-string">"Shadowsocks-go start failed!"</span><br>        fi<br>    <span class="hljs-keyword">else</span><br>        echo<br>        echo <span class="hljs-string">"Shadowsocks-go install failed!"</span><br>        exit <span class="hljs-number">1</span><br>    fi<br><br>    clear<br>    echo<br>    echo <span class="hljs-string">"Congratulations, Shadowsocks-go install completed!"</span><br>    echo -e <span class="hljs-string">"Your Server IP: \033[41;37m $(get_ip) \033[0m"</span><br>    echo -e <span class="hljs-string">"Your Server Port: \033[41;37m $&#123;shadowsocksport&#125; \033[0m"</span><br>    echo -e <span class="hljs-string">"Your Password: \033[41;37m $&#123;shadowsockspwd&#125; \033[0m"</span><br>    echo -e <span class="hljs-string">"Your Local Port: \033[41;37m 1080 \033[0m"</span><br>    echo -e <span class="hljs-string">"Your Encryption Method: \033[41;37m aes-256-cfb \033[0m"</span><br>    echo<br>    echo <span class="hljs-string">"Welcome to visit:https://teddysun.com/392.html"</span><br>    echo <span class="hljs-string">"Enjoy it!"</span><br>    echo<br>&#125;<br><br># Uninstall Shadowsocks-<span class="hljs-keyword">go</span><br>uninstall_shadowsocks_go()&#123;<br>    printf <span class="hljs-string">"Are you sure uninstall shadowsocks-go? (y/n) "</span><br>    printf <span class="hljs-string">"\n"</span><br>    read -p <span class="hljs-string">"(Default: n):"</span> answer<br>    [ -z $&#123;answer&#125; ] &amp;&amp; answer=<span class="hljs-string">"n"</span><br>    <span class="hljs-keyword">if</span> [ <span class="hljs-string">"$&#123;answer&#125;"</span> == <span class="hljs-string">"y"</span> ] || [ <span class="hljs-string">"$&#123;answer&#125;"</span> == <span class="hljs-string">"Y"</span> ]; then<br>        ps -ef | grep -v grep | grep -i <span class="hljs-string">"shadowsocks-server"</span> &gt; /dev/null <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> [ $? -eq <span class="hljs-number">0</span> ]; then<br>            /etc/init.d/shadowsocks stop<br>        fi<br>        <span class="hljs-keyword">if</span> check_sys packageManager yum; then<br>            chkconfig --del shadowsocks<br>        elif check_sys packageManager apt; then<br>            update-rc.d -f shadowsocks remove<br>        fi<br>        # <span class="hljs-built_in">delete</span> config file<br>        rm -rf /etc/shadowsocks<br>        # <span class="hljs-built_in">delete</span> shadowsocks<br>        rm -f /etc/init.d/shadowsocks<br>        rm -f /usr/bin/shadowsocks-server<br>        echo <span class="hljs-string">"Shadowsocks-go uninstall success!"</span><br>    <span class="hljs-keyword">else</span><br>        echo<br>        echo <span class="hljs-string">"Uninstall cancelled, nothing to do..."</span><br>        echo<br>    fi<br>&#125;<br><br># Install Shadowsocks-<span class="hljs-keyword">go</span><br>install_shadowsocks_go()&#123;<br>    rootness<br>    disable_selinux<br>    pre_install<br>    download_files<br>    config_shadowsocks<br>    <span class="hljs-keyword">if</span> check_sys packageManager yum; then<br>        firewall_set<br>    fi<br>    install<br>&#125;<br><br># Initialization step<br>action=$<span class="hljs-number">1</span><br>[ -z $<span class="hljs-number">1</span> ] &amp;&amp; action=install<br><span class="hljs-keyword">case</span> <span class="hljs-string">"$action"</span> in<br>    install|uninstall)<br>    $&#123;action&#125;_shadowsocks_go<br>    ;;<br>    *)<br>    echo <span class="hljs-string">"Arguments error! [$&#123;action&#125;]"</span><br>    echo <span class="hljs-string">"Usage: `basename $0` &#123;install|uninstall&#125;"</span><br>    ;;<br>esac<br></code></pre></td></tr></table></figure><p><strong>欢迎关注微信公众号​：</strong></p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006y8mN6gy1g7d3llw1nkj30b40b4wee.jpg" srcset="/img/loading.gif" alt="欢迎关注公众号" style="width: 100px" />]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Shadowsocks</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java根据URL将网页转存为PDF文件</title>
    <link href="/2019/06/10/Java%E6%A0%B9%E6%8D%AEURL%E5%B0%86%E7%BD%91%E9%A1%B5%E8%BD%AC%E5%AD%98%E4%B8%BAPDF%E6%96%87%E4%BB%B6/"/>
    <url>/2019/06/10/Java%E6%A0%B9%E6%8D%AEURL%E5%B0%86%E7%BD%91%E9%A1%B5%E8%BD%AC%E5%AD%98%E4%B8%BAPDF%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><p>添加以下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- url转pdf --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.xhtmlrenderer<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>flying-saucer-pdf-itext5<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>9.0.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><a id="more"></a><p>UrlToPdfUtil.java：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.OutputStream;<br> <br><span class="hljs-keyword">import</span> org.xhtmlrenderer.pdf.ITextFontResolver;<br><span class="hljs-keyword">import</span> org.xhtmlrenderer.pdf.ITextRenderer;<br> <br><span class="hljs-keyword">import</span> com.itextpdf.text.pdf.BaseFont;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UrlToPdfUtil</span> </span>&#123;<br> <br>    <span class="hljs-comment">//private static final String OUT_PUT_PDF_PATH = "/home/data/pdf/"; //pdf文件的存放路径（Linux）</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String OUT_PUT_PDF_PATH = <span class="hljs-string">"C:/Users/Administrator/Desktop/pdf/"</span>; <span class="hljs-comment">//pdf文件的存放路径（windows）</span><br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Title</span> 网页转存为PDF文件</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> url 链接地址</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> outputFileName 转存的PDF文件名</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">urlToPdf</span><span class="hljs-params">(String url, String outputFileName)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            String folder = outputFileName.substring(<span class="hljs-number">0</span>, <span class="hljs-number">6</span>);<br>            String outputFile = OUT_PUT_PDF_PATH + folder +<span class="hljs-string">"/"</span>+ outputFileName;<br>            java.io.File targetFile = <span class="hljs-keyword">new</span> java.io.File(outputFile);<br>            <span class="hljs-keyword">if</span> (!targetFile.getParentFile().exists()) &#123;<br>                targetFile.getParentFile().mkdirs(); <span class="hljs-comment">// 创建父级文件路径</span><br>            &#125;<br>            OutputStream os = <span class="hljs-keyword">new</span> FileOutputStream(outputFile);<br>            ITextRenderer renderer = <span class="hljs-keyword">new</span> ITextRenderer();<br>            renderer.setDocument(url);<br>            ITextFontResolver fontResolver = renderer.getFontResolver();<br>            <span class="hljs-comment">//fontResolver.addFont("/usr/share/fonts/chinese/simsun.ttc", BaseFont.IDENTITY_H, BaseFont.EMBEDDED); //Linux</span><br>            fontResolver.addFont(<span class="hljs-string">"c:/Windows/Fonts/simsun.ttc"</span>, BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED); <span class="hljs-comment">//windows</span><br>            renderer.layout();<br>            renderer.createPDF(os);<br>            os.close();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>     <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        urlToPdf(<span class="hljs-string">"http://www.lrfun.com/toPdf.html"</span>, <span class="hljs-string">"201905098888888.pdf"</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="注意点："><a href="#注意点：" class="headerlink" title="注意点："></a>注意点：</h4><p>1.字体限制，要使用simsun字体（<a href="http://www.lrfun.com/uploadfile/file/20190509/2019050915011034736.zip" target="_blank" rel="noopener">可点击下载</a>），下载自行安装吧；</p><p>2.需要转为PDF的网页，必须遵守W3C标准，也就是说每个标签都必须闭合（如：img等标签的结尾必须要添加“/”），否则就会报错，详细请参考文件：<a href="http://www.lrfun.com/toPdf.html" target="_blank" rel="noopener">http://www.lrfun.com/toPdf.html</a></p><p><strong>欢迎关注微信公众号​：</strong></p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006y8mN6gy1g7d3llw1nkj30b40b4wee.jpg" srcset="/img/loading.gif" alt="欢迎关注公众号" style="width: 100px" />]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTTP协议状态码详解</title>
    <link href="/2019/06/10/HTTP%E5%8D%8F%E8%AE%AE%E7%8A%B6%E6%80%81%E7%A0%81%E8%AF%A6%E8%A7%A3/"/>
    <url>/2019/06/10/HTTP%E5%8D%8F%E8%AE%AE%E7%8A%B6%E6%80%81%E7%A0%81%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p>常见 </p><p>200 – 服务器成功返回网页<br>404 – 请求的网页不存在<br>500 – 服务器内部错误 </p><p>0（特别说明） </p><p>0表示无法访问，或者说与服务器没有连接成功，但不一定是0就表示失败，有些时候访问本地资源成功了也会是0，比如Android的webviewajax访问本地资源时，responseCode就是0。 </p><a id="more"></a><p>1xx（临时响应） </p><p>表示临时响应并需要请求者继续执行操作的状态代码。 </p><p>代码 说明<br>100 （继续） 请求者应当继续提出请求。 服务器返回此代码表示已收到请求的第一部分，正在等待其余部分。<br>101 （切换协议） 请求者已要求服务器切换协议，服务器已确认并准备切换。 </p><p>2xx （成功） </p><p>表示成功处理了请求的状态代码。 </p><p>代码 说明<br>200 （成功） 服务器已成功处理了请求。 通常，这表示服务器提供了请求的网页。<br>201 （已创建） 请求成功并且服务器创建了新的资源。<br>202 （已接受） 服务器已接受请求，但尚未处理。<br>203 （非授权信息） 服务器已成功处理了请求，但返回的信息可能来自另一来源。<br>204 （无内容） 服务器成功处理了请求，但没有返回任何内容。<br>205 （重置内容） 服务器成功处理了请求，但没有返回任何内容。<br>206 （部分内容） 服务器成功处理了部分 GET 请求。 </p><p>3xx （重定向） </p><p>表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向。 </p><p>代码 说明<br>300 （多种选择） 针对请求，服务器可执行多种操作。 服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择。<br>301 （永久移动） 请求的网页已永久移动到新位置。 服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。<br>302 （临时移动） 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。<br>303 （查看其他位置） 请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。<br>304 （未修改） 自从上次请求后，请求的网页未修改过。 服务器返回此响应时，不会返回网页内容。<br>305 （使用代理） 请求者只能使用代理访问请求的网页。 如果服务器返回此响应，还表示请求者应使用代理。<br>307 （临时重定向） 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。 </p><p>4xx（请求错误） </p><p>这些状态代码表示请求可能出错，妨碍了服务器的处理。 </p><p>代码 说明<br>400 （错误请求） 服务器不理解请求的语法。<br>401 （未授权） 请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。<br>403 （禁止） 服务器拒绝请求。<br>404 （未找到） 服务器找不到请求的网页。<br>405 （方法禁用） 禁用请求中指定的方法。<br>406 （不接受） 无法使用请求的内容特性响应请求的网页。<br>407 （需要代理授权） 此状态代码与 401（未授权）类似，但指定请求者应当授权使用代理。<br>408 （请求超时） 服务器等候请求时发生超时。<br>409 （冲突） 服务器在完成请求时发生冲突。 服务器必须在响应中包含有关冲突的信息。<br>410 （已删除） 如果请求的资源已永久删除，服务器就会返回此响应。<br>411 （需要有效长度） 服务器不接受不含有效内容长度标头字段的请求。<br>412 （未满足前提条件） 服务器未满足请求者在请求中设置的其中一个前提条件。<br>413 （请求实体过大） 服务器无法处理请求，因为请求实体过大，超出服务器的处理能力。<br>414 （请求的 URI 过长） 请求的 URI（通常为网址）过长，服务器无法处理。<br>415 （不支持的媒体类型） 请求的格式不受请求页面的支持。<br>416 （请求范围不符合要求） 如果页面无法提供请求的范围，则服务器会返回此状态代码。<br>417 （未满足期望值） 服务器未满足”期望”请求标头字段的要求。 </p><p>5xx（服务器错误） </p><p>这些状态代码表示服务器在尝试处理请求时发生内部错误。 这些错误可能是服务器本身的错误，而不是请求出错。 </p><p>代码 说明<br>500 （服务器内部错误） 服务器遇到错误，无法完成请求。<br>501 （尚未实施） 服务器不具备完成请求的功能。 例如，服务器无法识别请求方法时可能会返回此代码。<br>502 （错误网关） 服务器作为网关或代理，从上游服务器收到无效响应。<br>503 （服务不可用） 服务器目前无法使用（由于超载或停机维护）。 通常，这只是暂时状态。<br>504 （网关超时） 服务器作为网关或代理，但是没有及时从上游服务器收到请求。<br>505 （HTTP 版本不受支持） 服务器不支持请求中所用的 HTTP 协议版本。 </p><p><strong>欢迎关注微信公众号​：</strong></p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006y8mN6gy1g7d3llw1nkj30b40b4wee.jpg" srcset="/img/loading.gif" alt="欢迎关注公众号" style="width: 100px" />]]></content>
    
    
    <categories>
      
      <category>Server</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Server</tag>
      
      <tag>Http</tag>
      
      <tag>Status</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MongoDB多数据源配置</title>
    <link href="/2019/06/10/MongoDB%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E9%85%8D%E7%BD%AE/"/>
    <url>/2019/06/10/MongoDB%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<p>SpringBoot对常用的数据库支持外，对NoSQL 数据库也进行了封装自动化。<br>这一篇主要讲springboot与mongo多数据源相关的配置</p><h3 id="1、mongo的介绍"><a href="#1、mongo的介绍" class="headerlink" title="1、mongo的介绍"></a>1、mongo的介绍</h3><p>MongoDB是一个高性能，开源，无模式的文档型数据库，是当前NoSql数据库中比较热门的一种。它在许多场景下可用于替代传统的关系型数据库或键/值存储方式,这里不再多做说明。详细介绍参考<br><a href="http://blog.csdn.net/liusong0605/article/details/10554395" target="_blank" rel="noopener">mongo入门</a></p><a id="more"></a><h3 id="2、项目构建"><a href="#2、项目构建" class="headerlink" title="2、项目构建"></a>2、项目构建</h3><p>添加pom文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-mongodb<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3、在application-properties中添加配置"><a href="#3、在application-properties中添加配置" class="headerlink" title="3、在application.properties中添加配置"></a>3、在application.properties中添加配置</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">##start mongodb for basic</span><br><span class="hljs-comment">#----------------------------------------------</span><br><span class="hljs-meta">basic.mongodb.host</span>= <span class="hljs-string">127.0.0.1</span><br><span class="hljs-meta">basic.mongodb.port</span>= <span class="hljs-string">27017</span><br><span class="hljs-meta">basic.mongodb.database</span>= <span class="hljs-string">basic</span><br><span class="hljs-comment">#----------------------------------------------</span><br><span class="hljs-comment">##end mongodb for spirit</span><br><br><span class="hljs-comment">##start mongodb for basic</span><br><span class="hljs-comment">#----------------------------------------------</span><br><span class="hljs-meta">order.mongodb.host</span>= <span class="hljs-string">127.0.0.2</span><br><span class="hljs-meta">order.mongodb.port</span>= <span class="hljs-string">27017</span><br><span class="hljs-meta">order.mongodb.database</span>= <span class="hljs-string">order</span><br><span class="hljs-comment">#----------------------------------------------</span><br><span class="hljs-comment">##end mongodb for spirit</span><br></code></pre></td></tr></table></figure><h3 id="4、配置相应的数据源"><a href="#4、配置相应的数据源" class="headerlink" title="4、配置相应的数据源"></a>4、配置相应的数据源</h3><p>这里我们采用mongoTemplate这种模式去做mongo的相关操作</p><p>先写一个基础的抽象类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AbstractMongoConfigure</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> String host, database;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> port;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">       * Method that creates MongoDbFactory</span><br><span class="hljs-comment">       * Common to both of the MongoDb connections</span><br><span class="hljs-comment">       */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> MongoDbFactory <span class="hljs-title">mongoDbFactory</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> SimpleMongoDbFactory(<span class="hljs-keyword">new</span> MongoClient(host, port), database);<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * Factory method to create the MongoTemplate</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">public</span> MongoTemplate <span class="hljs-title">getMongoTemplate</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getHost</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> host;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setHost</span><span class="hljs-params">(String host)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.host = host;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getDatabase</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> database;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setDatabase</span><span class="hljs-params">(String database)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.database = database;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getPort</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> port;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> port)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.port = port;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-1-接下来第一个库的封装"><a href="#3-1-接下来第一个库的封装" class="headerlink" title="3.1)接下来第一个库的封装"></a>3.1)接下来第一个库的封装</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableMongoRepositories</span>(basePackages = &#123;<span class="hljs-string">"com.sunliangliang.service.basic"</span>&#125;, mongoTemplateRef = <span class="hljs-string">"basicMongoTemplate"</span>)<br><span class="hljs-meta">@ConfigurationProperties</span>(prefix = <span class="hljs-string">"basic.mongodb"</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BasicMongoConfigure</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractMongoConfigure</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-meta">@Bean</span>(name = <span class="hljs-string">"basicMongoTemplate"</span>)<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> MongoTemplate <span class="hljs-title">getMongoTemplate</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> MongoTemplate(mongoDbFactory());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中 basePackages 的值是该库应用于相应的基础包，prefix即为相应的applications中的配置值</p><h4 id="3-2-接下来第两个库的封装"><a href="#3-2-接下来第两个库的封装" class="headerlink" title="3.2)接下来第两个库的封装"></a>3.2)接下来第两个库的封装</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableMongoRepositories</span>(basePackages = &#123;<span class="hljs-string">"com.sunliangliang.service.order"</span>&#125;, mongoTemplateRef = <span class="hljs-string">"orderMongoTemplate"</span>)<br><span class="hljs-meta">@ConfigurationProperties</span>(prefix = <span class="hljs-string">"order.mongodb"</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OrderMongoConfigure</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractMongoConfigure</span></span>&#123;<br>    <span class="hljs-meta">@Primary</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-meta">@Bean</span>(name = <span class="hljs-string">"orderMongoTemplate"</span>)<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> MongoTemplate <span class="hljs-title">getMongoTemplate</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> MongoTemplate(mongoDbFactory());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>封装完成后接下来进行相应实体的配置</p><h3 id="4、创建数据实体"><a href="#4、创建数据实体" class="headerlink" title="4、创建数据实体"></a>4、创建数据实体</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserInfo</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> id;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-keyword">private</span> String nickname;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">long</span> <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(<span class="hljs-keyword">long</span> id)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getUsername</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> username;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUsername</span><span class="hljs-params">(String username)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.username = username;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getPassword</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> password;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPassword</span><span class="hljs-params">(String password)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.password = password;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getNickname</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> nickname;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setNickname</span><span class="hljs-params">(String nickname)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.nickname = nickname;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4、添加对实体的操作"><a href="#4、添加对实体的操作" class="headerlink" title="4、添加对实体的操作"></a>4、添加对实体的操作</h3><p>在这里我写了一个公用的接口用于基础的增删改查</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">BaseService</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br>    <span class="hljs-function">Boolean <span class="hljs-title">save</span><span class="hljs-params">(T entity)</span></span>;<br><br>    <span class="hljs-function">Boolean <span class="hljs-title">update</span><span class="hljs-params">(T entity)</span></span>;<br><br>    <span class="hljs-function">Boolean <span class="hljs-title">delete</span><span class="hljs-params">(Long id)</span></span>;<br><br>    <span class="hljs-function">T <span class="hljs-title">getById</span><span class="hljs-params">(Long id)</span></span>;<br><br>    <span class="hljs-function">List&lt;T&gt; <span class="hljs-title">listAll</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-function">List&lt;T&gt; <span class="hljs-title">listAll</span><span class="hljs-params">(T entity)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来接口的实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserInfoService</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">BaseService</span>&lt;<span class="hljs-title">UserInfo</span>&gt;</span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-meta">@Qualifier</span>(<span class="hljs-string">"basicMongoTemplate"</span>)<br>    <span class="hljs-keyword">private</span> MongoTemplate mongoTemplate;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Boolean <span class="hljs-title">save</span><span class="hljs-params">(UserInfo entity)</span> </span>&#123;<br>        mongoTemplate.save(entity);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Boolean <span class="hljs-title">update</span><span class="hljs-params">(UserInfo entity)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Boolean <span class="hljs-title">delete</span><span class="hljs-params">(Long id)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> UserInfo <span class="hljs-title">getById</span><span class="hljs-params">(Long id)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;UserInfo&gt; <span class="hljs-title">listAll</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> mongoTemplate.findAll(UserInfo<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;UserInfo&gt; <span class="hljs-title">listAll</span><span class="hljs-params">(UserInfo entity)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意此处@Qualifier(“basicMongoTemplate”)中即为相应的具体实现类。</p><p>这里只写了添加和查询列表的实现，其他的查询相应的api即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span><br><span class="hljs-class">@<span class="hljs-title">SpringBootTest</span></span><br><span class="hljs-class"><span class="hljs-title">public</span> <span class="hljs-title">class</span> <span class="hljs-title">UserInfoServiceTest</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserInfoService userInfoService;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        UserInfo userInfo = <span class="hljs-keyword">new</span> UserInfo();<br>        userInfo.setAge(<span class="hljs-number">23</span>);<br>        userInfo.setId(<span class="hljs-number">1000l</span>);<br>        userInfo.setName(<span class="hljs-string">"管理员"</span>);<br>        userInfo.setNickname(<span class="hljs-string">"hehe"</span>);<br>        userInfo.setPassword(<span class="hljs-string">"123456"</span>);<br>        userInfo.setUsername(<span class="hljs-string">"admin"</span>);<br>        userInfoService.save(userInfo);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">listAll</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        userInfoService.listAll();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>若库不存在，会自动生成相应的库和文档</p><p>另一个order相关库的配置就不再这里写了</p><p><strong>欢迎关注微信公众号​：</strong></p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006y8mN6gy1g7d3llw1nkj30b40b4wee.jpg" srcset="/img/loading.gif" alt="欢迎关注公众号" style="width: 100px" />]]></content>
    
    
    <categories>
      
      <category>DataBase</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MongoDB</tag>
      
      <tag>DataBase</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JAVA操作MongoDB工具类分享</title>
    <link href="/2019/06/10/JAVA%E6%93%8D%E4%BD%9CMongoDB%E5%B7%A5%E5%85%B7%E7%B1%BB%E5%88%86%E4%BA%AB/"/>
    <url>/2019/06/10/JAVA%E6%93%8D%E4%BD%9CMongoDB%E5%B7%A5%E5%85%B7%E7%B1%BB%E5%88%86%E4%BA%AB/</url>
    
    <content type="html"><![CDATA[<p>最近做了个用MongoDB存储的项目，由于MongoDB对开发人员不开放，由DBA统一管理。因此，自己抽时间写了个MongoDB的查询机。便于查询项目中的数据，方便维护和分析问题。总结了一些java操作MongoDB的方法。本文没有使用spring-data来操作MongoDB。而是直接使用MongoDB for java的原始API。现在介绍一下工具类。 </p><h1 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1.准备工作"></a>1.准备工作</h1><p>MongoDB的安装，不多做介绍。 </p><p>MongoDB的java驱动 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mongodb<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mongo-java-driver<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.11.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><a id="more"></a><h1 id="2-封装实体介绍"><a href="#2-封装实体介绍" class="headerlink" title="2.封装实体介绍"></a>2.封装实体介绍</h1><ul><li><p>MongoDBCursor——MongoDB条件查询封装实体（支持limit，skip，sort）     </p></li><li><p>MongoDBEntity——MongoDB集合封装实体     </p></li><li><p>MongoDBUpdate——MongoDB更新封装实体 </p><p>​    </p></li></ul><p>MongoDBCursor </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.mongodb.BasicDBObject;<br><span class="hljs-keyword">import</span> com.mongodb.DBObject;<br> <br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.LinkedHashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * MongoDB条件查询封装实体（支持limit，skip，sort）</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: alex</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@time</span>: 14-1-21 下午5:00</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span>: 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MongoDBCursor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">MongoDBEntity</span> </span>&#123;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * skip属性</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> skip;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * limit属性</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> limit = <span class="hljs-number">100</span>;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 排序属性</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Map&lt;String, Object&gt; sort = <span class="hljs-keyword">new</span> LinkedHashMap&lt;String, Object&gt;();<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 自定义查询字段属性</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Map&lt;String, Object&gt; customFieldMap = <span class="hljs-keyword">new</span> HashMap&lt;String, Object&gt;();<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getSkip</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> skip;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setSkip</span><span class="hljs-params">(<span class="hljs-keyword">int</span> skip)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.skip = skip;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getLimit</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> limit;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setLimit</span><span class="hljs-params">(<span class="hljs-keyword">int</span> limit)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.limit = limit;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="hljs-title">getSort</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> sort;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setSort</span><span class="hljs-params">(Map&lt;String, Object&gt; sort)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.sort = sort;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> DBObject <span class="hljs-title">getSortObject</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.sort == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>        DBObject dbo = <span class="hljs-keyword">new</span> BasicDBObject();<br>        <span class="hljs-keyword">for</span> (String k : sort.keySet()) &#123;<br>            dbo.put(k, Integer.valueOf(sort.get(k).toString()));<br>        &#125;<br>        <span class="hljs-keyword">return</span> dbo;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="hljs-title">getCustomFieldMap</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> customFieldMap;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCustomFieldMap</span><span class="hljs-params">(Map&lt;String, Object&gt; customFieldMap)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.customFieldMap = customFieldMap;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p> MongoDBEntity </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.mongodb.DB;<br> <br><span class="hljs-keyword">import</span> java.util.Map;<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * MongoDB集合封装实体</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: alex</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@time</span>: 14-1-20 下午2:57</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span>: 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MongoDBEntity</span> </span>&#123;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * mongo数据库</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> DB db;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 集合名字</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String collectionName;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 字段封装Map</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Map&lt;String,Object&gt; fieldMap;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> DB <span class="hljs-title">getDb</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> db;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setDb</span><span class="hljs-params">(DB db)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.db = db;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getCollectionName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> collectionName;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCollectionName</span><span class="hljs-params">(String collectionName)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.collectionName = collectionName;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="hljs-title">getFieldMap</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> fieldMap;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setFieldMap</span><span class="hljs-params">(Map&lt;String, Object&gt; fieldMap)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.fieldMap = fieldMap;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>MongoDBUpdate  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Map;<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * MongoDB更新封装实体</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: alex</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@time</span>: 14-1-21 下午5:00</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span>: 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MongoDBUpdate</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">MongoDBEntity</span> </span>&#123;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * where查询Map</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Map&lt;String, Object&gt; whereMap;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * value查询Map</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Map&lt;String, Object&gt; valueMap;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="hljs-title">getWhereMap</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> whereMap;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setWhereMap</span><span class="hljs-params">(Map&lt;String, Object&gt; whereMap)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.whereMap = whereMap;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="hljs-title">getValueMap</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> valueMap;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setValueMap</span><span class="hljs-params">(Map&lt;String, Object&gt; valueMap)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.valueMap = valueMap;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="3-MongoDB操作类"><a href="#3-MongoDB操作类" class="headerlink" title="3.MongoDB操作类"></a>3.MongoDB操作类</h1><ul><li>MongoDBCommonUtil——MongoDB集合操作工作类     </li><li>MongoDBUtil——MongoDBCRUD操作封装工具类     </li></ul><p>MongoDBCommonUtil </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.mongodb.*;<br><span class="hljs-keyword">import</span> org.bson.types.BasicBSONList;<br><span class="hljs-keyword">import</span> org.bson.types.ObjectId;<br> <br><span class="hljs-keyword">import</span> java.util.*;<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * MongoDBCRUD操作封装工具类</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: alex</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@time</span>: 14-1-21 下午3:16</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span>: 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MongoDBUtil</span> </span>&#123;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 按主键查询单个实体</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id            主键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> mongoDBCursor 查询实体</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> DBObject</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> DBObject <span class="hljs-title">findById</span><span class="hljs-params">(MongoDBCursor mongoDBCursor, String id)</span> </span>&#123;<br>        Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;String, Object&gt;();<br>        map.put(<span class="hljs-string">"_id"</span>, <span class="hljs-keyword">new</span> ObjectId(id));<br>        mongoDBCursor.setFieldMap(map);<br>        <span class="hljs-keyword">return</span> findOne(mongoDBCursor);<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 按条件查询单个</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> mongoDBCursor 查询实体</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> DBObject</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> DBObject <span class="hljs-title">findOne</span><span class="hljs-params">(MongoDBCursor mongoDBCursor)</span> </span>&#123;<br>        DBObject dbObject = getMapped(mongoDBCursor.getFieldMap());<br>        <span class="hljs-keyword">return</span> MongoDBCommonUtil.getCollection(mongoDBCursor).findOne(dbObject);<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询全部</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> mongoDBCursor 查询实体</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;DBObject&gt; <span class="hljs-title">findAll</span><span class="hljs-params">(MongoDBCursor mongoDBCursor)</span> </span>&#123;<br>        mongoDBCursor.setFieldMap(<span class="hljs-keyword">new</span> HashMap&lt;String, Object&gt;());<br>        <span class="hljs-keyword">return</span> find(mongoDBCursor);<br>    &#125;<br> <br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 按条件查询</span><br><span class="hljs-comment">     * 支持skip，limit,sort</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> mongoDBCursor 查询实体</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;DBObject&gt; <span class="hljs-title">find</span><span class="hljs-params">(MongoDBCursor mongoDBCursor)</span> </span>&#123;<br>        DBObject dbObject = getMapped(mongoDBCursor.getFieldMap());<br>        BasicDBObjectBuilder customField = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-comment">//自定义查询字段</span><br>        <span class="hljs-keyword">if</span>(mongoDBCursor.getCustomFieldMap() != <span class="hljs-keyword">null</span> &amp;&amp; mongoDBCursor.getCustomFieldMap().size() &gt; <span class="hljs-number">0</span>) &#123;<br>            customField = <span class="hljs-keyword">new</span> BasicDBObjectBuilder();<br>            <span class="hljs-keyword">for</span>(Map.Entry&lt;String, Object&gt; field : mongoDBCursor.getCustomFieldMap().entrySet()) &#123;<br>                customField.add(field.getKey(),field.getValue());<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> find(mongoDBCursor, dbObject, customField);<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询（私有方法,检查是否含有skip，limit，sort）</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dbObject      查询条件</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> mongoDBCursor 查询实体</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> List&lt;DBObject&gt; <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">final</span> MongoDBCursor mongoDBCursor, DBObject dbObject,BasicDBObjectBuilder customField)</span> </span>&#123;<br>        MongoDBCursorPreparer cursorPreparer = mongoDBCursor == <span class="hljs-keyword">null</span> ? <span class="hljs-keyword">null</span> : <span class="hljs-keyword">new</span> MongoDBCursorPreparer() &#123;<br>            <span class="hljs-function"><span class="hljs-keyword">public</span> DBCursor <span class="hljs-title">prepare</span><span class="hljs-params">(DBCursor dbCursor)</span> </span>&#123;<br>                <span class="hljs-keyword">if</span> (mongoDBCursor == <span class="hljs-keyword">null</span>) &#123;<br>                    <span class="hljs-keyword">return</span> dbCursor;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (mongoDBCursor.getLimit() &lt;= <span class="hljs-number">0</span> &amp;&amp; mongoDBCursor.getSkip() &lt;= <span class="hljs-number">0</span> &amp;&amp; mongoDBCursor.getSortObject() == <span class="hljs-keyword">null</span>) &#123;<br>                    <span class="hljs-keyword">return</span> dbCursor;<br>                &#125;<br>                DBCursor cursorToUse = dbCursor;<br>                <span class="hljs-keyword">if</span> (mongoDBCursor.getSkip() &gt; <span class="hljs-number">0</span>) &#123;<br>                    cursorToUse = cursorToUse.skip(mongoDBCursor.getSkip());<br>                &#125;<br>                <span class="hljs-keyword">if</span> (mongoDBCursor.getLimit() &gt; <span class="hljs-number">0</span>) &#123;<br>                    cursorToUse = cursorToUse.limit(mongoDBCursor.getLimit());<br>                &#125;<br>                <span class="hljs-keyword">if</span> (mongoDBCursor.getSortObject() != <span class="hljs-keyword">null</span>) &#123;<br>                    cursorToUse = cursorToUse.sort(mongoDBCursor.getSortObject());<br>                &#125;<br>                <span class="hljs-keyword">return</span> cursorToUse;<br>            &#125;<br>        &#125;;<br>        <span class="hljs-keyword">return</span> find(mongoDBCursor, dbObject, cursorPreparer,customField);<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询（私有方法，真正的查询操作）</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> query       查询条件</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> mongoDBCursor  查询实体</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> cursorPreparer 查询转换接口</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> List&lt;DBObject&gt; <span class="hljs-title">find</span><span class="hljs-params">(MongoDBCursor mongoDBCursor, DBObject query, MongoDBCursorPreparer cursorPreparer,BasicDBObjectBuilder customField)</span> </span>&#123;<br>        DBCursor dbCursor = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">if</span>(customField == <span class="hljs-keyword">null</span>) &#123;<br>            dbCursor = MongoDBCommonUtil.getCollection(mongoDBCursor).find(query);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            dbCursor = MongoDBCommonUtil.getCollection(mongoDBCursor).find(query,customField.get());<br>        &#125;<br>        <span class="hljs-keyword">if</span> (cursorPreparer != <span class="hljs-keyword">null</span>) &#123;<br>            dbCursor = cursorPreparer.prepare(dbCursor);<br>        &#125;<br>        <span class="hljs-keyword">return</span> dbCursor.toArray();<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Count查询</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> mongoDBCursor 查询实体</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 总数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">long</span> <span class="hljs-title">count</span><span class="hljs-params">(MongoDBCursor mongoDBCursor)</span> </span>&#123;<br>        DBObject dbObject = getMapped(mongoDBCursor.getFieldMap());<br>        <span class="hljs-keyword">return</span> MongoDBCommonUtil.getCollection(mongoDBCursor).count(dbObject);<br> <br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 把参数Map转换DBObject</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> map 查询条件</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> DBObject</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> DBObject <span class="hljs-title">getMapped</span><span class="hljs-params">(Map&lt;String, Object&gt; map)</span> </span>&#123;<br>        DBObject dbObject = <span class="hljs-keyword">new</span> BasicDBObject();<br>        Iterator&lt;Map.Entry&lt;String, Object&gt;&gt; iterable = map.entrySet().iterator();<br>        <span class="hljs-keyword">while</span> (iterable.hasNext()) &#123;<br>            Map.Entry&lt;String, Object&gt; entry = iterable.next();<br>            Object value = entry.getValue();<br>            String key = entry.getKey();<br>            <span class="hljs-keyword">if</span> (key.startsWith(<span class="hljs-string">"$"</span>) &amp;&amp; value <span class="hljs-keyword">instanceof</span> Map) &#123;<br>                BasicBSONList basicBSONList = <span class="hljs-keyword">new</span> BasicBSONList();<br>                Map&lt;String, Object&gt; conditionsMap = ((Map) value);<br><span class="hljs-comment">//                Set&lt;String&gt; keys = conditionsMap.keySet();</span><br>                <span class="hljs-keyword">for</span> (String k : conditionsMap.keySet()) &#123;<br>                    Object conditionsValue = conditionsMap.get(k);<br>                    <span class="hljs-keyword">if</span> (conditionsValue <span class="hljs-keyword">instanceof</span> Collection) &#123;<br>                        conditionsValue = convertArray(conditionsValue);<br>                    &#125;<br>                    DBObject dbObject2 = <span class="hljs-keyword">new</span> BasicDBObject(k, conditionsValue);<br>                    basicBSONList.add(dbObject2);<br>                &#125;<br>                value = basicBSONList;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (value <span class="hljs-keyword">instanceof</span> Collection) &#123;<br>                value = convertArray(value);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!key.startsWith(<span class="hljs-string">"$"</span>) &amp;&amp; value <span class="hljs-keyword">instanceof</span> Map) &#123;<br>                value = getMapped(((Map) value));<br>            &#125;<br>            dbObject.put(key, value);<br>        &#125;<br>        <span class="hljs-keyword">return</span> dbObject;<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 转换成Object[]</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 待转换实体</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> Object[]</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Object[] convertArray(Object value) &#123;<br>        Object[] values = ((Collection) value).toArray();<br>        <span class="hljs-keyword">return</span> values;<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加操作</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> mongoDBEntity 实体</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(MongoDBEntity mongoDBEntity)</span> </span>&#123;<br>        DBObject dbObject = <span class="hljs-keyword">new</span> BasicDBObject(mongoDBEntity.getFieldMap());<br>        MongoDBCommonUtil.getCollection(mongoDBEntity).insert(dbObject);<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 批量处理添加操作</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> list          批量字段数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> mongoDBEntity 实体</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(MongoDBEntity mongoDBEntity, List&lt;Map&lt;String, Object&gt;&gt; list)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (Map&lt;String, Object&gt; map : list) &#123;<br>            mongoDBEntity.setFieldMap(map);<br>            add(mongoDBEntity);<br>        &#125;<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除操作</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> mongoDBEntity 实体</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">(MongoDBEntity mongoDBEntity)</span> </span>&#123;<br>        DBObject dbObject = <span class="hljs-keyword">new</span> BasicDBObject(mongoDBEntity.getFieldMap());<br>        MongoDBCommonUtil.getCollection(mongoDBEntity).remove(dbObject);<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除操作,根据主键</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id            主键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> mongoDBEntity 实体</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">(MongoDBEntity mongoDBEntity, String id)</span> </span>&#123;<br>        Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;String, Object&gt;();<br>        map.put(<span class="hljs-string">"_id"</span>, <span class="hljs-keyword">new</span> ObjectId(id));<br>        mongoDBEntity.setFieldMap(map);<br>        delete(mongoDBEntity);<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除全部</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> mongoDBEntity 实体</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteAll</span><span class="hljs-params">(MongoDBEntity mongoDBEntity)</span> </span>&#123;<br>        MongoDBCommonUtil.getCollection(mongoDBEntity).drop();<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 修改操作</span><br><span class="hljs-comment">     * 会用一个新文档替换现有文档,文档key结构会发生改变</span><br><span class="hljs-comment">     * 比如原文档&#123;"_id":"123","name":"zhangsan","age":12&#125;当根据_id修改age</span><br><span class="hljs-comment">     * value为&#123;"age":12&#125;新建的文档name值会没有,结构发生了改变</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> mongoDBUpdate 更新实体</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(MongoDBUpdate mongoDBUpdate)</span> </span>&#123;<br>        executeUpdate(mongoDBUpdate, <span class="hljs-keyword">new</span> UpdateCallback() &#123;<br>            <span class="hljs-function"><span class="hljs-keyword">public</span> DBObject <span class="hljs-title">doCallback</span><span class="hljs-params">(DBObject valueDBObject)</span> </span>&#123;<br>                <span class="hljs-keyword">return</span> valueDBObject;<br>            &#125;<br>        &#125;);<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 修改操作,使用$set修改器</span><br><span class="hljs-comment">     * 用来指定一个键值,如果键不存在,则自动创建,会更新原来文档, 不会生成新的, 结构不会发生改变</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> mongoDBUpdate 更新实体</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateSet</span><span class="hljs-params">(MongoDBUpdate mongoDBUpdate)</span> </span>&#123;<br>        executeUpdate(mongoDBUpdate, <span class="hljs-keyword">new</span> UpdateCallback() &#123;<br>            <span class="hljs-function"><span class="hljs-keyword">public</span> DBObject <span class="hljs-title">doCallback</span><span class="hljs-params">(DBObject valueDBObject)</span> </span>&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> BasicDBObject(<span class="hljs-string">"$set"</span>, valueDBObject);<br>            &#125;<br>        &#125;);<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 修改操作,使用$inc修改器</span><br><span class="hljs-comment">     * 修改器键的值必须为数字</span><br><span class="hljs-comment">     * 如果键存在增加或减少键的值, 如果不存在创建键</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> mongoDBUpdate 更新实体</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateInc</span><span class="hljs-params">(MongoDBUpdate mongoDBUpdate)</span> </span>&#123;<br>        executeUpdate(mongoDBUpdate, <span class="hljs-keyword">new</span> UpdateCallback() &#123;<br>            <span class="hljs-function"><span class="hljs-keyword">public</span> DBObject <span class="hljs-title">doCallback</span><span class="hljs-params">(DBObject valueDBObject)</span> </span>&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> BasicDBObject(<span class="hljs-string">"$inc"</span>, valueDBObject);<br>            &#125;<br>        &#125;);<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 修改(私有方法)</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> mongoDBUpdate  更新实体</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> updateCallback 更新回调</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">executeUpdate</span><span class="hljs-params">(MongoDBUpdate mongoDBUpdate, UpdateCallback updateCallback)</span> </span>&#123;<br>        DBObject whereDBObject = <span class="hljs-keyword">new</span> BasicDBObject(mongoDBUpdate.getWhereMap());<br>        DBObject valueDBObject = <span class="hljs-keyword">new</span> BasicDBObject(mongoDBUpdate.getValueMap());<br>        valueDBObject = updateCallback.doCallback(valueDBObject);<br>        MongoDBCommonUtil.getCollection(mongoDBUpdate).update(whereDBObject, valueDBObject);<br>    &#125;<br> <br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//获取操作DB</span><br>            DB db = MongoDBCommonUtil.getDB(<span class="hljs-string">"192.168.227.170"</span>, <span class="hljs-number">20011</span>,<span class="hljs-string">"lagd"</span>,<span class="hljs-string">"lagd_rw"</span>,<span class="hljs-string">"lagd_pwd"</span>);<br>            MongoDBCursor mongoDBCursor = <span class="hljs-keyword">new</span> MongoDBCursor();<br>            mongoDBCursor.setDb(db);     <span class="hljs-comment">//赋值DB</span><br>            mongoDBCursor.setCollectionName(<span class="hljs-string">"lagd_data_dictionary"</span>);   <span class="hljs-comment">//赋值集合名</span><br>            <span class="hljs-comment">//封装查询条件</span><br>            Map&lt;String, Object&gt; fieldMap = <span class="hljs-keyword">new</span> HashMap&lt;String, Object&gt;();<br>            fieldMap.put(<span class="hljs-string">"type"</span>,<span class="hljs-string">"dataSource"</span>);<br>            mongoDBCursor.setFieldMap(fieldMap);<br>            <span class="hljs-comment">//赋值skip</span><br>            mongoDBCursor.setSkip(<span class="hljs-number">1</span>);<br>            <span class="hljs-comment">//赋值limit</span><br>            mongoDBCursor.setLimit(<span class="hljs-number">1</span>);<br>            <span class="hljs-comment">//封装Sort</span><br>            Map&lt;String, Object&gt; sortMap = <span class="hljs-keyword">new</span> LinkedHashMap&lt;String, Object&gt;();<br>            sortMap.put(<span class="hljs-string">"key"</span>,<span class="hljs-number">1</span>);<br>            mongoDBCursor.setSort(sortMap);<br>            <span class="hljs-comment">//查询</span><br>            List&lt;DBObject&gt; result = MongoDBUtil.find(mongoDBCursor);<br>            <span class="hljs-keyword">for</span>(DBObject dbObject : result)&#123;<br>                <span class="hljs-keyword">for</span>(String key : dbObject.keySet())&#123;<br>                    System.out.println(<span class="hljs-string">"key="</span> + key + <span class="hljs-string">";  value="</span> + dbObject.get(key));<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p> MongoDBUtil </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.mongodb.*;<br><span class="hljs-keyword">import</span> org.bson.types.BasicBSONList;<br><span class="hljs-keyword">import</span> org.bson.types.ObjectId;<br> <br><span class="hljs-keyword">import</span> java.util.*;<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * MongoDBCRUD操作封装工具类</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: alex</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@time</span>: 14-1-21 下午3:16</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span>: 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MongoDBUtil</span> </span>&#123;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 按主键查询单个实体</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id            主键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> mongoDBCursor 查询实体</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> DBObject</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> DBObject <span class="hljs-title">findById</span><span class="hljs-params">(MongoDBCursor mongoDBCursor, String id)</span> </span>&#123;<br>        Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;String, Object&gt;();<br>        map.put(<span class="hljs-string">"_id"</span>, <span class="hljs-keyword">new</span> ObjectId(id));<br>        mongoDBCursor.setFieldMap(map);<br>        <span class="hljs-keyword">return</span> findOne(mongoDBCursor);<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 按条件查询单个</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> mongoDBCursor 查询实体</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> DBObject</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> DBObject <span class="hljs-title">findOne</span><span class="hljs-params">(MongoDBCursor mongoDBCursor)</span> </span>&#123;<br>        DBObject dbObject = getMapped(mongoDBCursor.getFieldMap());<br>        <span class="hljs-keyword">return</span> MongoDBCommonUtil.getCollection(mongoDBCursor).findOne(dbObject);<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询全部</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> mongoDBCursor 查询实体</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;DBObject&gt; <span class="hljs-title">findAll</span><span class="hljs-params">(MongoDBCursor mongoDBCursor)</span> </span>&#123;<br>        mongoDBCursor.setFieldMap(<span class="hljs-keyword">new</span> HashMap&lt;String, Object&gt;());<br>        <span class="hljs-keyword">return</span> find(mongoDBCursor);<br>    &#125;<br> <br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 按条件查询</span><br><span class="hljs-comment">     * 支持skip，limit,sort</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> mongoDBCursor 查询实体</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;DBObject&gt; <span class="hljs-title">find</span><span class="hljs-params">(MongoDBCursor mongoDBCursor)</span> </span>&#123;<br>        DBObject dbObject = getMapped(mongoDBCursor.getFieldMap());<br>        BasicDBObjectBuilder customField = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-comment">//自定义查询字段</span><br>        <span class="hljs-keyword">if</span>(mongoDBCursor.getCustomFieldMap() != <span class="hljs-keyword">null</span> &amp;&amp; mongoDBCursor.getCustomFieldMap().size() &gt; <span class="hljs-number">0</span>) &#123;<br>            customField = <span class="hljs-keyword">new</span> BasicDBObjectBuilder();<br>            <span class="hljs-keyword">for</span>(Map.Entry&lt;String, Object&gt; field : mongoDBCursor.getCustomFieldMap().entrySet()) &#123;<br>                customField.add(field.getKey(),field.getValue());<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> find(mongoDBCursor, dbObject, customField);<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询（私有方法,检查是否含有skip，limit，sort）</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dbObject      查询条件</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> mongoDBCursor 查询实体</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> List&lt;DBObject&gt; <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">final</span> MongoDBCursor mongoDBCursor, DBObject dbObject,BasicDBObjectBuilder customField)</span> </span>&#123;<br>        MongoDBCursorPreparer cursorPreparer = mongoDBCursor == <span class="hljs-keyword">null</span> ? <span class="hljs-keyword">null</span> : <span class="hljs-keyword">new</span> MongoDBCursorPreparer() &#123;<br>            <span class="hljs-function"><span class="hljs-keyword">public</span> DBCursor <span class="hljs-title">prepare</span><span class="hljs-params">(DBCursor dbCursor)</span> </span>&#123;<br>                <span class="hljs-keyword">if</span> (mongoDBCursor == <span class="hljs-keyword">null</span>) &#123;<br>                    <span class="hljs-keyword">return</span> dbCursor;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (mongoDBCursor.getLimit() &lt;= <span class="hljs-number">0</span> &amp;&amp; mongoDBCursor.getSkip() &lt;= <span class="hljs-number">0</span> &amp;&amp; mongoDBCursor.getSortObject() == <span class="hljs-keyword">null</span>) &#123;<br>                    <span class="hljs-keyword">return</span> dbCursor;<br>                &#125;<br>                DBCursor cursorToUse = dbCursor;<br>                <span class="hljs-keyword">if</span> (mongoDBCursor.getSkip() &gt; <span class="hljs-number">0</span>) &#123;<br>                    cursorToUse = cursorToUse.skip(mongoDBCursor.getSkip());<br>                &#125;<br>                <span class="hljs-keyword">if</span> (mongoDBCursor.getLimit() &gt; <span class="hljs-number">0</span>) &#123;<br>                    cursorToUse = cursorToUse.limit(mongoDBCursor.getLimit());<br>                &#125;<br>                <span class="hljs-keyword">if</span> (mongoDBCursor.getSortObject() != <span class="hljs-keyword">null</span>) &#123;<br>                    cursorToUse = cursorToUse.sort(mongoDBCursor.getSortObject());<br>                &#125;<br>                <span class="hljs-keyword">return</span> cursorToUse;<br>            &#125;<br>        &#125;;<br>        <span class="hljs-keyword">return</span> find(mongoDBCursor, dbObject, cursorPreparer,customField);<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询（私有方法，真正的查询操作）</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> query       查询条件</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> mongoDBCursor  查询实体</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> cursorPreparer 查询转换接口</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> List&lt;DBObject&gt; <span class="hljs-title">find</span><span class="hljs-params">(MongoDBCursor mongoDBCursor, DBObject query, MongoDBCursorPreparer cursorPreparer,BasicDBObjectBuilder customField)</span> </span>&#123;<br>        DBCursor dbCursor = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">if</span>(customField == <span class="hljs-keyword">null</span>) &#123;<br>            dbCursor = MongoDBCommonUtil.getCollection(mongoDBCursor).find(query);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            dbCursor = MongoDBCommonUtil.getCollection(mongoDBCursor).find(query,customField.get());<br>        &#125;<br>        <span class="hljs-keyword">if</span> (cursorPreparer != <span class="hljs-keyword">null</span>) &#123;<br>            dbCursor = cursorPreparer.prepare(dbCursor);<br>        &#125;<br>        <span class="hljs-keyword">return</span> dbCursor.toArray();<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Count查询</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> mongoDBCursor 查询实体</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 总数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">long</span> <span class="hljs-title">count</span><span class="hljs-params">(MongoDBCursor mongoDBCursor)</span> </span>&#123;<br>        DBObject dbObject = getMapped(mongoDBCursor.getFieldMap());<br>        <span class="hljs-keyword">return</span> MongoDBCommonUtil.getCollection(mongoDBCursor).count(dbObject);<br> <br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 把参数Map转换DBObject</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> map 查询条件</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> DBObject</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> DBObject <span class="hljs-title">getMapped</span><span class="hljs-params">(Map&lt;String, Object&gt; map)</span> </span>&#123;<br>        DBObject dbObject = <span class="hljs-keyword">new</span> BasicDBObject();<br>        Iterator&lt;Map.Entry&lt;String, Object&gt;&gt; iterable = map.entrySet().iterator();<br>        <span class="hljs-keyword">while</span> (iterable.hasNext()) &#123;<br>            Map.Entry&lt;String, Object&gt; entry = iterable.next();<br>            Object value = entry.getValue();<br>            String key = entry.getKey();<br>            <span class="hljs-keyword">if</span> (key.startsWith(<span class="hljs-string">"$"</span>) &amp;&amp; value <span class="hljs-keyword">instanceof</span> Map) &#123;<br>                BasicBSONList basicBSONList = <span class="hljs-keyword">new</span> BasicBSONList();<br>                Map&lt;String, Object&gt; conditionsMap = ((Map) value);<br><span class="hljs-comment">//                Set&lt;String&gt; keys = conditionsMap.keySet();</span><br>                <span class="hljs-keyword">for</span> (String k : conditionsMap.keySet()) &#123;<br>                    Object conditionsValue = conditionsMap.get(k);<br>                    <span class="hljs-keyword">if</span> (conditionsValue <span class="hljs-keyword">instanceof</span> Collection) &#123;<br>                        conditionsValue = convertArray(conditionsValue);<br>                    &#125;<br>                    DBObject dbObject2 = <span class="hljs-keyword">new</span> BasicDBObject(k, conditionsValue);<br>                    basicBSONList.add(dbObject2);<br>                &#125;<br>                value = basicBSONList;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (value <span class="hljs-keyword">instanceof</span> Collection) &#123;<br>                value = convertArray(value);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!key.startsWith(<span class="hljs-string">"$"</span>) &amp;&amp; value <span class="hljs-keyword">instanceof</span> Map) &#123;<br>                value = getMapped(((Map) value));<br>            &#125;<br>            dbObject.put(key, value);<br>        &#125;<br>        <span class="hljs-keyword">return</span> dbObject;<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 转换成Object[]</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 待转换实体</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> Object[]</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Object[] convertArray(Object value) &#123;<br>        Object[] values = ((Collection) value).toArray();<br>        <span class="hljs-keyword">return</span> values;<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加操作</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> mongoDBEntity 实体</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(MongoDBEntity mongoDBEntity)</span> </span>&#123;<br>        DBObject dbObject = <span class="hljs-keyword">new</span> BasicDBObject(mongoDBEntity.getFieldMap());<br>        MongoDBCommonUtil.getCollection(mongoDBEntity).insert(dbObject);<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 批量处理添加操作</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> list          批量字段数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> mongoDBEntity 实体</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(MongoDBEntity mongoDBEntity, List&lt;Map&lt;String, Object&gt;&gt; list)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (Map&lt;String, Object&gt; map : list) &#123;<br>            mongoDBEntity.setFieldMap(map);<br>            add(mongoDBEntity);<br>        &#125;<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除操作</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> mongoDBEntity 实体</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">(MongoDBEntity mongoDBEntity)</span> </span>&#123;<br>        DBObject dbObject = <span class="hljs-keyword">new</span> BasicDBObject(mongoDBEntity.getFieldMap());<br>        MongoDBCommonUtil.getCollection(mongoDBEntity).remove(dbObject);<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除操作,根据主键</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id            主键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> mongoDBEntity 实体</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">(MongoDBEntity mongoDBEntity, String id)</span> </span>&#123;<br>        Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;String, Object&gt;();<br>        map.put(<span class="hljs-string">"_id"</span>, <span class="hljs-keyword">new</span> ObjectId(id));<br>        mongoDBEntity.setFieldMap(map);<br>        delete(mongoDBEntity);<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除全部</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> mongoDBEntity 实体</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteAll</span><span class="hljs-params">(MongoDBEntity mongoDBEntity)</span> </span>&#123;<br>        MongoDBCommonUtil.getCollection(mongoDBEntity).drop();<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 修改操作</span><br><span class="hljs-comment">     * 会用一个新文档替换现有文档,文档key结构会发生改变</span><br><span class="hljs-comment">     * 比如原文档&#123;"_id":"123","name":"zhangsan","age":12&#125;当根据_id修改age</span><br><span class="hljs-comment">     * value为&#123;"age":12&#125;新建的文档name值会没有,结构发生了改变</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> mongoDBUpdate 更新实体</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(MongoDBUpdate mongoDBUpdate)</span> </span>&#123;<br>        executeUpdate(mongoDBUpdate, <span class="hljs-keyword">new</span> UpdateCallback() &#123;<br>            <span class="hljs-function"><span class="hljs-keyword">public</span> DBObject <span class="hljs-title">doCallback</span><span class="hljs-params">(DBObject valueDBObject)</span> </span>&#123;<br>                <span class="hljs-keyword">return</span> valueDBObject;<br>            &#125;<br>        &#125;);<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 修改操作,使用$set修改器</span><br><span class="hljs-comment">     * 用来指定一个键值,如果键不存在,则自动创建,会更新原来文档, 不会生成新的, 结构不会发生改变</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> mongoDBUpdate 更新实体</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateSet</span><span class="hljs-params">(MongoDBUpdate mongoDBUpdate)</span> </span>&#123;<br>        executeUpdate(mongoDBUpdate, <span class="hljs-keyword">new</span> UpdateCallback() &#123;<br>            <span class="hljs-function"><span class="hljs-keyword">public</span> DBObject <span class="hljs-title">doCallback</span><span class="hljs-params">(DBObject valueDBObject)</span> </span>&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> BasicDBObject(<span class="hljs-string">"$set"</span>, valueDBObject);<br>            &#125;<br>        &#125;);<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 修改操作,使用$inc修改器</span><br><span class="hljs-comment">     * 修改器键的值必须为数字</span><br><span class="hljs-comment">     * 如果键存在增加或减少键的值, 如果不存在创建键</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> mongoDBUpdate 更新实体</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateInc</span><span class="hljs-params">(MongoDBUpdate mongoDBUpdate)</span> </span>&#123;<br>        executeUpdate(mongoDBUpdate, <span class="hljs-keyword">new</span> UpdateCallback() &#123;<br>            <span class="hljs-function"><span class="hljs-keyword">public</span> DBObject <span class="hljs-title">doCallback</span><span class="hljs-params">(DBObject valueDBObject)</span> </span>&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> BasicDBObject(<span class="hljs-string">"$inc"</span>, valueDBObject);<br>            &#125;<br>        &#125;);<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 修改(私有方法)</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> mongoDBUpdate  更新实体</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> updateCallback 更新回调</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">executeUpdate</span><span class="hljs-params">(MongoDBUpdate mongoDBUpdate, UpdateCallback updateCallback)</span> </span>&#123;<br>        DBObject whereDBObject = <span class="hljs-keyword">new</span> BasicDBObject(mongoDBUpdate.getWhereMap());<br>        DBObject valueDBObject = <span class="hljs-keyword">new</span> BasicDBObject(mongoDBUpdate.getValueMap());<br>        valueDBObject = updateCallback.doCallback(valueDBObject);<br>        MongoDBCommonUtil.getCollection(mongoDBUpdate).update(whereDBObject, valueDBObject);<br>    &#125;<br> <br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//获取操作DB</span><br>            DB db = MongoDBCommonUtil.getDB(<span class="hljs-string">"192.168.227.170"</span>, <span class="hljs-number">20011</span>,<span class="hljs-string">"lagd"</span>,<span class="hljs-string">"lagd_rw"</span>,<span class="hljs-string">"lagd_pwd"</span>);<br>            MongoDBCursor mongoDBCursor = <span class="hljs-keyword">new</span> MongoDBCursor();<br>            mongoDBCursor.setDb(db);     <span class="hljs-comment">//赋值DB</span><br>            mongoDBCursor.setCollectionName(<span class="hljs-string">"lagd_data_dictionary"</span>);   <span class="hljs-comment">//赋值集合名</span><br>            <span class="hljs-comment">//封装查询条件</span><br>            Map&lt;String, Object&gt; fieldMap = <span class="hljs-keyword">new</span> HashMap&lt;String, Object&gt;();<br>            fieldMap.put(<span class="hljs-string">"type"</span>,<span class="hljs-string">"dataSource"</span>);<br>            mongoDBCursor.setFieldMap(fieldMap);<br>            <span class="hljs-comment">//赋值skip</span><br>            mongoDBCursor.setSkip(<span class="hljs-number">1</span>);<br>            <span class="hljs-comment">//赋值limit</span><br>            mongoDBCursor.setLimit(<span class="hljs-number">1</span>);<br>            <span class="hljs-comment">//封装Sort</span><br>            Map&lt;String, Object&gt; sortMap = <span class="hljs-keyword">new</span> LinkedHashMap&lt;String, Object&gt;();<br>            sortMap.put(<span class="hljs-string">"key"</span>,<span class="hljs-number">1</span>);<br>            mongoDBCursor.setSort(sortMap);<br>            <span class="hljs-comment">//自定义查询字段</span><br>            Map&lt;String, Object&gt; customFieldMap =  <span class="hljs-keyword">new</span> LinkedHashMap&lt;String, Object&gt;();<br>            customFieldMap.put(<span class="hljs-string">"type"</span>,<span class="hljs-string">"1"</span>);<br>            customFieldMap.put(<span class="hljs-string">"key"</span>,<span class="hljs-string">"1"</span>);<br>            customFieldMap.put(<span class="hljs-string">"value"</span>,<span class="hljs-string">"1"</span>);<br>            mongoDBCursor.setCustomFieldMap(customFieldMap);<br>            <span class="hljs-comment">//查询</span><br>            List&lt;DBObject&gt; result = MongoDBUtil.find(mongoDBCursor);<br>            <span class="hljs-keyword">for</span>(DBObject dbObject : result)&#123;<br>                <span class="hljs-keyword">for</span>(String key : dbObject.keySet())&#123;<br>                    System.out.println(<span class="hljs-string">"键："</span> + key + <span class="hljs-string">";  值："</span> + dbObject.get(key));<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>MongoDBCursorPreparer </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.mongodb.DBCursor;<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 查询转换接口定义</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: alex</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@time</span>: 14-1-21 下午4:55</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span>: 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">MongoDBCursorPreparer</span> </span>&#123;<br> <br>    <span class="hljs-function">DBCursor <span class="hljs-title">prepare</span><span class="hljs-params">(DBCursor cursor)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>UpdateCallback </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.mongodb.DBObject;<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * MongoDB更新操作接口定义</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: alex</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@time</span>: 14-1-21 下午5:25</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span>: 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UpdateCallback</span> </span>&#123;<br> <br>    <span class="hljs-function">DBObject <span class="hljs-title">doCallback</span><span class="hljs-params">(DBObject valueDBObject)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>欢迎关注微信公众号​：</strong></p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006y8mN6gy1g7d3llw1nkj30b40b4wee.jpg" srcset="/img/loading.gif" alt="欢迎关注公众号" style="width: 100px" />]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>MongoDB</tag>
      
      <tag>DataBase</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CentOS7搭建ngrok服务器</title>
    <link href="/2019/06/10/CentOS7%E6%90%AD%E5%BB%BAngrok%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <url>/2019/06/10/CentOS7%E6%90%AD%E5%BB%BAngrok%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p>ngrok是一个反向代理，它能够让你本地的web服务或tcp服务通过公共的端口和外部建立一个安全的通道， 使得外网可以访问本地的计算机服务。也就是说，我们提供的服务（比如web站点）无需搭建在外部服务器， 只要通过ngrok把站点映射出去，别人即可直接访问到我们的服务。</p><p>有做过微信公众号开发的人，对它应该不陌生。因为用户跟微信公众号产生的交互行为，微信会把用户的相关信息推送到我们自己的服务器， 如果服务在本地，那微信当然无法推送给我们，这使得开发功能的时候调试相当麻烦。我们可以使用ngrok把本地站点映射出去，解决这个问题。</p><p>另外如果我们想把本地开发时候的系统临时给外网用户看，无需部署到服务器上面去就可以，非常方便。</p><p>ngrok是开源的，官网地址：<a href="https://github.com/inconshreveable/ngrok" target="_blank" rel="noopener">https://github.com/inconshreveable/ngrok</a></p><p>下面，我们开始搭建ngrok服务。操作系统为CentOS 7.2</p><a id="more"></a><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>搭建ngrok服务需要有一个外网服务器及一个域名解析到外网服务器上，我已经有了一个<code>xncoding.com</code>域名，并且拥有一台腾讯云主机。</p><p>在腾讯云主机的域名解析处，配置2个A记录，比如我新建2个<code>ngrok.xncoding.com</code> 和 <code>*.ngrok.xncoding.com</code> 解析到vps服务器上。</p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymn9j8enj30tq0de0tm.jpg" srcset="/img/loading.gif" alt="img"></p><h2 id="搭建ngrok服务"><a href="#搭建ngrok服务" class="headerlink" title="搭建ngrok服务"></a>搭建ngrok服务</h2><h3 id="安装go语言环境"><a href="#安装go语言环境" class="headerlink" title="安装go语言环境"></a>安装go语言环境</h3><p>ngrok是基于go语言开发的，所以需要先安装go语言开发环境，CentOS可以使用yum安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install golang<br></code></pre></td></tr></table></figure><h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3><p>默认的git版本太低了，需要升级到git2.5，具体步骤如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo yum remove git<br>sudo yum install epel-release<br>sudo yum install https://centos7.iuscommunity.org/ius-release.rpm<br>sudo yum install git2u<br></code></pre></td></tr></table></figure><p><code>git --version</code>，返回 <code>git version 2.5.0</code>，安装成功。</p><h3 id="下载ngrok源码"><a href="#下载ngrok源码" class="headerlink" title="下载ngrok源码"></a>下载ngrok源码</h3><p>新建一个目录，并clone一份源码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">mkdir ~/go/src/github.com/inconshreveable<br><span class="hljs-built_in">cd</span> ~/go/src/github.com/inconshreveable<br>git <span class="hljs-built_in">clone</span> https://github.com/inconshreveable/ngrok.git<br><span class="hljs-built_in">export</span> GOPATH=~/go/src/github.com/inconshreveable/ngrok<br></code></pre></td></tr></table></figure><h3 id="生成自签名证书"><a href="#生成自签名证书" class="headerlink" title="生成自签名证书"></a>生成自签名证书</h3><p>使用ngrok.com官方服务时，我们使用的是官方的SSL证书。自己建立ngrok服务，需要我们生成自己的证书，并提供携带该证书的ngrok客户端。</p><p>证书生成过程需要有自己的一个基础域名，比如我的就是<code>ngrok.xncoding.com</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> ngrok<br>$ openssl genrsa -out rootCA.key 2048<br>$ openssl req -x509 -new -nodes -key rootCA.key -subj <span class="hljs-string">"/CN=ngrok.xncoding.com"</span> -days 5000 -out rootCA.pem<br>$ openssl genrsa -out device.key 2048<br>$ openssl req -new -key device.key -subj <span class="hljs-string">"/CN=ngrok.xncoding.com"</span> -out device.csr<br>$ openssl x509 -req -<span class="hljs-keyword">in</span> device.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out device.crt -days 5000<br></code></pre></td></tr></table></figure><p>执行完成以上命令后，在ngrok目录下，会新生成6个文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">-rw-r--r-- 1 root root   1001 Dec 29 11:53 device.crt<br>-rw-r--r-- 1 root root    903 Dec 29 11:44 device.csr<br>-rw-r--r-- 1 root root   1675 Dec 29 11:44 device.key<br>-rw-r--r-- 1 root root   1679 Dec 29 11:44 rootCA.key<br>-rw-r--r-- 1 root root   1119 Dec 29 11:44 rootCA.pem<br>-rw-r--r-- 1 root root     17 Dec 29 11:53 rootCA.srl<br></code></pre></td></tr></table></figure><p>我们在编译可执行文件之前，需要把生成的证书分别替换到 <code>assets/client/tls</code>和<code>assets/server/tls</code>中， 这两个目录分别存放着ngrok和ngrokd的默认证书。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ cp rootCA.pem assets/client/tls/ngrokroot.crt<br>$ cp device.crt assets/server/tls/snakeoil.crt<br>$ cp device.key assets/server/tls/snakeoil.key<br></code></pre></td></tr></table></figure><h3 id="使用lets-encrypt免费证书"><a href="#使用lets-encrypt免费证书" class="headerlink" title="使用lets encrypt免费证书"></a>使用lets encrypt免费证书</h3><p>如果想让浏览器不弹出提示，最好不要使用自签名证书，现在lets encrypt推出泛域名证书了，所以可以先申请个免费域名证书。</p><p>客户端用证书 ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ngrok<br>cp /etc/letsencrypt/live/xncoding.com/chain.pem assets/client/tls/ngrokroot.crt<br></code></pre></td></tr></table></figure><p>服务器端用证书：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">cp /etc/letsencrypt/live/xncoding.com/cert.pem assets/server/tls/snakeoil.crt<br>cp /etc/letsencrypt/live/xncoding.com/privkey.pem assets/server/tls/snakeoil.key<br></code></pre></td></tr></table></figure><h3 id="编译ngrokd和ngrok"><a href="#编译ngrokd和ngrok" class="headerlink" title="编译ngrokd和ngrok"></a>编译ngrokd和ngrok</h3><p>首先需要知道，ngrokd 为服务端的执行文件，ngrok为客户端的执行文件。</p><p>接下来我们来编译ngrokd，在ngrok目录下，执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ make release-server<br></code></pre></td></tr></table></figure><p>编译过程需要等待一会，因为需要通过git安装相关依赖包。如果提示没有权限，使用 sudo 命令来安装。</p><p>由于客户端的平台版本较多，我们需要交叉编译来选择生成的平台。 以windows、arm、linux版本编译，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ GOOS=linux GOARCH=amd64 make release-client<br>$ GOOS=windows GOARCH=amd64 make release-client<br>$ GOOS=linux GOARCH=arm make release-client<br></code></pre></td></tr></table></figure><p>不同平台使用不同的 GOOS 和 GOARCH，GOOS为go编译出来的操作系统 (windows,linux,darwin)，GOARCH, 对应的构架 (386,amd64,arm)</p><p>通过上面的步骤，将生成所有客户端文件，客户端文件放在对于的文件夹中，如windows 64位的为：windows_amd64，linux客户端在bin目录下的ngrok文件。</p><p>完成之后，把相应的客户端文件使用SFTP或其他方式分发到客户端电脑上面，比如我用的windows电脑，就把<code>windows_amd64/ngrok.exe</code>文件复制过去。</p><h3 id="启动ngrokd服务器"><a href="#启动ngrokd服务器" class="headerlink" title="启动ngrokd服务器"></a>启动ngrokd服务器</h3><p>请将 bin/ngrokd 放入PATH环境变量中，启动命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nohup ngrokd -domain=ngrok.xncoding.com -httpAddr=:5442 -httpsAddr=:5443 -tunnelAddr=<span class="hljs-string">":4443"</span> &amp;<br></code></pre></td></tr></table></figure><p><code>-domain</code>为你的服务域名，<code>-httpAddr</code>为http服务端口地址，访问形式为<code>xxx.ngrok.xncoding.com:5442</code>，也可设置为80默认端口，<code>-httpsAddr</code>为https服务，同上。</p><p>ngrokd还会开一个端口用来跟客户端通讯（可通过<code>-tunnelAddr=&quot;:xxx&quot;</code> 指定），如果你配置了 iptables 规则，需要放行这个通讯端口(4443)上的 TCP 协议。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">firewall-cmd --zone=public --add-port=4443/tcp --permanent<br>firewall-cmd --reload<br></code></pre></td></tr></table></figure><h3 id="Nginx配置80端口转发"><a href="#Nginx配置80端口转发" class="headerlink" title="Nginx配置80端口转发"></a>Nginx配置80端口转发</h3><p>我们在微信开发时候不允许使用端口访问，那么最好使用nginx反向代理转发，首先申请一个<code>demo.ngrok.xncoding.com</code>的免费证书，然后修改nginx配置如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs bash">server &#123;<br>    listen       80;<br>    server_name  demo.ngrok.xncoding.com;<br>    <span class="hljs-built_in">return</span>       301 https://demo.ngrok.xncoding.com<span class="hljs-variable">$request_uri</span>;<br>&#125;<br><br>server &#123;<br>    listen       443 ssl http2;<br>    server_name  demo.ngrok.xncoding.com;<br><br>    charset utf-8;<br><br>    ssl_certificate /etc/letsencrypt/live/demo.ngrok.xncoding.com/fullchain.pem;<br>    ssl_certificate_key /etc/letsencrypt/live/demo.ngrok.xncoding.com/privkey.pem;<br>    ssl_trusted_certificate /etc/letsencrypt/live/demo.ngrok.xncoding.com/chain.pem;<br><br>    access_log /var/<span class="hljs-built_in">log</span>/nginx/ngrok.log main;<br>    error_log /var/<span class="hljs-built_in">log</span>/nginx/ngrok_error.log error;<br><br>    location / &#123;<br>        proxy_pass http://127.0.0.1:5442;<br>        proxy_redirect off;<br>        proxy_set_header Host       <span class="hljs-variable">$http_host</span>:5442;<br>        proxy_set_header X-Real-IP  <span class="hljs-variable">$remote_addr</span>;<br>        proxy_set_header X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>但是！这里就有一个很烦躁的地方了，ngrokd 里面有一层自己的 Host 处理，于是 <code>proxy_set_header Host</code> 必须带上 ngrokd 所监听的端口， 否则就算请求被转发到对应端口上， ngrokd 也不会正确的处理。</p><h3 id="启用客户端"><a href="#启用客户端" class="headerlink" title="启用客户端"></a>启用客户端</h3><p>在刚刚复制过来的ngrok.exe客户端文件夹中，新建一个客户端配置<code>ngrok.cfg</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">server_addr: <span class="hljs-string">"ngrok.xncoding.com:4443"</span><br>trust_host_root_certs: <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>本地启动一个SpringBoot的WEB工程，端口8092，然后通过下面命令启动客户端：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ngrok.exe -subdomain demo -config=ngrok.cfg -<span class="hljs-built_in">log</span>=log.txt 8092<br></code></pre></td></tr></table></figure><p>看到下面的画面说明连接成功了：</p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymnc8ceij30lb06oglu.jpg" srcset="/img/loading.gif" alt="img"></p><p>访问页面，浏览器中输入：<code>https://demo.ngrok.xncoding.com</code>，成功访问本地SpringBoot站点内容。</p><p>浏览器输入：<code>127.0.0.1:4040</code> 查看页面请求情况：</p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymndmltvj30q10fu0uv.jpg" srcset="/img/loading.gif" alt="img"></p><h2 id="烦恼的事情"><a href="#烦恼的事情" class="headerlink" title="烦恼的事情"></a>烦恼的事情</h2><p>带上端口号又会导致了另一个操蛋的问题：你请求的时候是<code>demo.ngrok.xncoding.com</code>， 你在 web 应用中获取到的 Host 是 <code>demo.ngrok.xncoding.com:5442</code>， 如果你的程序里面有基于 Request Host 的重定向，就会被重定向到 <code>demo.ngrok.xncoding.com:5442</code> 下面去。</p><p>要完美的解决这个端口的问题，就需要让 ngrokd 直接监听 80 端口，或者使用Docker容器的端口映射来解决。</p><h2 id="使用Docker"><a href="#使用Docker" class="headerlink" title="使用Docker"></a>使用Docker</h2><p>上面我讲到自己手动搭建的时候出现的端口问题，没办法解决。 一般80端口早就被占用了，不可能就给你ngrok使用，最完美的方式是使用Docker + Nginx的方式。</p><h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h3><p>参考我的这篇<a href="https://www.xncoding.com/2017/04/01/docker/docker01.html" target="_blank" rel="noopener">Docker入门</a>来安装docker。</p><h3 id="构建镜象"><a href="#构建镜象" class="headerlink" title="构建镜象"></a>构建镜象</h3><p>这里使用的是<a href="https://github.com/hteen/docker-ngrok" target="_blank" rel="noopener">hteen/docker-ngrok</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/hteen/docker-ngrok.git<br><span class="hljs-built_in">cd</span> docker-ngrok<br>docker build -t hteen/ngrok .<br></code></pre></td></tr></table></figure><p>这里需要等待一段时间下载</p><h3 id="Docker容器的https"><a href="#Docker容器的https" class="headerlink" title="Docker容器的https"></a>Docker容器的https</h3><p>关于 https 的支持</p><p>由于 ngrok 工作是通过分配 subdomain 的方式，所以我们实际使用到的域名都是 <code>ngrok.xncoding.com</code>的子域名， 如 <code>demo.ngrok.xncoding.com</code> 如果要对这个子域名启用 https 服务，那么至少需要三点支持：</p><ol><li>ngrok 支持 https， 这个默认就是开启的</li><li><code>demo.ngrok.xncoding.com</code> 也需要有证书或包含在一个泛域名证书中</li><li>浏览器（或其他终端）信任 <code>demo.ngrok.xncoding.com</code> 的根证书</li></ol><p>好消息是现在lets encrypt支持通配符域名了，所以很简单，具体怎么申请，请参考我博客中的nginx相关文章。</p><p>这里请先申请<code>ngrok.xncoding.com</code>的通配符证书。</p><p>申请好之后，增加配置<code>/etc/nginx/conf.d/ngrok.conf</code> 添加反向代理配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash">map <span class="hljs-variable">$scheme</span> <span class="hljs-variable">$proxy_port</span> &#123;<br>    <span class="hljs-string">"http"</span>  <span class="hljs-string">"5442"</span>;<br>    <span class="hljs-string">"https"</span> <span class="hljs-string">"5443"</span>;<br>    default <span class="hljs-string">"5442"</span>;<br>&#125;<br><br>server &#123;<br>    listen      80;<br>    listen      443;<br>    server_name ngrok.xncoding.com *.ngrok.xncoding.com;<br><br>    location / &#123;<br>        proxy_pass  <span class="hljs-variable">$scheme</span>://127.0.0.1:<span class="hljs-variable">$proxy_port</span>;<br>    &#125;<br><br>    ssl on;<br>    ssl_certificate /etc/letsencrypt/live/ngrok.xncoding.com/fullchain.pem;<br>    ssl_certificate_key /etc/letsencrypt/live/ngrok.xncoding.com/privkey.pem;<br><br>    proxy_set_header    X-Real-IP <span class="hljs-variable">$remote_addr</span>;<br>    proxy_set_header    Host <span class="hljs-variable">$http_host</span>;<br>    proxy_set_header    X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br><br>    access_log off;<br>    log_not_found off;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="运行镜象"><a href="#运行镜象" class="headerlink" title="运行镜象"></a>运行镜象</h3><p>上一步已经申请<code>ngrok.xncoding.com</code>这个域名的通配符lets encrypt证书，然后修改脚本<code>server.sh</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">-tlsKey=/etc/letsencrypt/live/ngrok.xncoding.com/privkey.pem -tlsCrt=/etc/letsencrypt/live/ngrok.xncoding.com/fullchain.pem<br></code></pre></td></tr></table></figure><p>也就是将之前的证书变量改成你实际的证书路径即可。</p><p>然后运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -idt --name ngrok-server \<br>-p 5442:80 -p 5443:443 -p 4443:4443 \<br>-v /data/ngrok:/myfiles \<br>-e DOMAIN=<span class="hljs-string">'ngrok.xncoding.com'</span> -e HTTP_ADDR=<span class="hljs-string">':80'</span> -e HTTPS_ADDR=<span class="hljs-string">':443'</span> hteen/ngrok /bin/sh /server.sh<br></code></pre></td></tr></table></figure><p>如果在腾讯云主机上面，还需要本级防火墙放行4443端口，以及在腾讯云安全组中也要放开4443端口。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1.查看已开放的端口(默认不开放任何端口)</span><br>firewall-cmd --list-ports<br><span class="hljs-comment"># 2.开启4443端口</span><br>firewall-cmd --zone=public --add-port=4443/tcp --permanent<br><span class="hljs-comment"># 3.重启防火墙</span><br>systemctl restart firewalld<br></code></pre></td></tr></table></figure><p>这里会把主机的5442端口映射到Docker容器中的80端口，讲5443端口映射到443端口，同时将本机的/data/ngrok文件夹映射到docker容器的/myfiles目录。</p><p>运行后，会要等一段时间，因为要编译客户端。一直等到/data/ngrok/目录里面有/bin目录就OK了。</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>因为ngrok有心跳机制，每次心跳均会产生日志，所以以docker方式运行，会产生很多日志。实测试中，大概每个星期会产生100M的日志文件。</p><p>查年docker日志文件位置<code>sudo docker inspect &lt;id&gt; | grep LogPath</code></p><p>查看大小<code>sudo ls -lh /var/lib/docker/containers/&lt;id&gt;/&lt;id&gt;-json.log</code></p><h3 id="运行客户端"><a href="#运行客户端" class="headerlink" title="运行客户端"></a>运行客户端</h3><p>在<code>/data/ngrok/bin/</code>目录下会生成客户端程序，每个平台的版本都有。以windows64位来说， 在windows_amd64目录下，拷贝到自己的windows电脑上。</p><p>新建配置文件ngrok.cfg，跟ngrok.exe同级目录，里面的内容跟之前讲的一样：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">server_addr: <span class="hljs-string">"ngrok.xncoding.com:4443"</span><br>trust_host_root_certs: <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>然后打开windows的命令行，cd到<code>ngrok.exe</code>所在的目录中，到这个运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ngrok -config=ngrok.cfg -subdomain=demo -<span class="hljs-built_in">log</span>=log.txt 8092<br></code></pre></td></tr></table></figure><p>或者为了方便，在<code>ngrok.exe</code>所在的目录中新建一个<code>run.bat</code>文件，内容如下：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino">@echo off<br>ngrok.exe -<span class="hljs-built_in">config</span>=ngrok.cfg -subdomain=demo -<span class="hljs-built_in">log</span>=<span class="hljs-built_in">log</span>.txt <span class="hljs-number">8092</span><br></code></pre></td></tr></table></figure><p>上面的subdomain是你想去访问域名前缀，后面的端口是你本机应用启动端口。</p><p>看到下面的结果表示成功了：</p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymngjdqwj30ke0cbdgh.jpg" srcset="/img/loading.gif" alt="img"></p><p>然后再打开<code>http://demo.ngrok.xncoding.com</code>看看，发现不会像之前那样出现端口了。</p><h2 id="国内免费的ngrok"><a href="#国内免费的ngrok" class="headerlink" title="国内免费的ngrok"></a>国内免费的ngrok</h2><p>如果你自己没VPS，或者你机子上面80端口已经被nginx占用不想搞了，就直接使用免费的ngrok吧， 我推荐你使用<a href="https://www.ngrok.cc/" target="_blank" rel="noopener">https://www.ngrok.cc/</a>。</p><p>比如我自己弄了个<code>yidao620.free.ngrok.cc</code>，启动本地客户端后，映射到本地的8092端口了，也还不错。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="https://morongs.github.io/2016/12/28/dajian-ngrok/" target="_blank" rel="noopener">从零教你搭建ngrok服务器</a></li><li><a href="https://www.jianshu.com/p/4b03fb532145" target="_blank" rel="noopener">ngrok使用自己的证书通过https访问</a></li><li><a href="https://yii.im/posts/pretty-self-hosted-ngrokd/" target="_blank" rel="noopener">搭建并配置优雅的 ngrok 服务实现内网穿透</a></li><li><a href="https://blog.fengcl.com/2017/05/24/how-to-use-docker-build-ngrok-to-network-penetrate/" target="_blank" rel="noopener">使用Docker搭建Ngrok服务器实现内网穿透</a></li><li><a href="https://fengqi.me/unix/409.html" target="_blank" rel="noopener">搭建自己的Ngrok服务器, 并与Nginx并存</a></li></ul><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006y8mN6gy1g7d3llw1nkj30b40b4wee.jpg" srcset="/img/loading.gif" alt="欢迎关注公众号" style="width: 100px" />]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Server</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>CentOS</tag>
      
      <tag>Server</tag>
      
      <tag>Ngrok</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>创建线程池的两种办法</title>
    <link href="/2019/06/10/%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%8A%9E%E6%B3%95/"/>
    <url>/2019/06/10/%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%8A%9E%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>线程池，其实就是一个容纳多个线程的容器，其中的线程可以反复使用，省去了频繁创建线程对象的操作，</p><p>无需反复创建线程而消耗过多资源。</p><p>我们详细的解释一下为什么要使用线程池？</p><p>在java中，如果每个请求到达就创建一个新线程，开销是相当大的。在实际使用中，创建和销毁线程花费的时间和消耗的系统资源都相当大，</p><p>甚至可能要比在处理实际的用户请求的时间和资源要多的多。除了创建和销毁线程的开销之外，活动的线程也需要消耗系统资源。</p><p>如果在一个jvm里创建太多的线程，可能会使系统由于过度消耗内存或“切换过度”而导致系统资源不足。为了防止资源不足，</p><p>需要采取一些办法来限制任何给定时刻处理的请求数目，尽可能减少创建和销毁线程的次数，特别是一些资源耗费比较大的线程的创建和销毁，</p><p>尽量利用已有对象来进行服务。</p><p>线程池主要用来解决线程生命周期开销问题和资源不足问题。通过对多个任务重复使用线程，线程创建的开销就被分摊到了多个任务上了，</p><p>而且由于在请求到达时线程已经存在，所以消除了线程创建所带来的延迟。这样，就可以立即为请求服务，使用应用程序响应更快。另外，</p><p>通过适当的调整线程中的线程数目可以防止出现资源不足的情况。</p><a id="more"></a><h6 id="使用线程池方式–Runnable接口"><a href="#使用线程池方式–Runnable接口" class="headerlink" title="使用线程池方式–Runnable接口"></a><strong>使用线程池方式–Runnable接口</strong></h6><blockquote><p>通常，线程池都是通过线程池工厂创建，再调用线程池中的方法获取线程，再通过线程去执行任务方法。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadPoolDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//创建线程池对象</span><br>        ExecutorService service = Executors.newFixedThreadPool(<span class="hljs-number">2</span>);<span class="hljs-comment">//包含2个线程对象</span><br>        <span class="hljs-comment">//创建Runnable实例对象</span><br>        MyRunnable r = <span class="hljs-keyword">new</span> MyRunnable();<br><br>        <span class="hljs-comment">//自己创建线程对象的方式</span><br>        <span class="hljs-comment">//Thread t = new Thread(r);</span><br>        <span class="hljs-comment">//t.start(); ---&gt; 调用MyRunnable中的run()</span><br><br>        <span class="hljs-comment">//从线程池中获取线程对象,然后调用MyRunnable中的run()</span><br>        service.submit(r);<br>        <span class="hljs-comment">//再获取个线程对象，调用MyRunnable中的run()</span><br>        service.submit(r);<br>        service.submit(r);<br>        service.submit(r);<br>        <span class="hljs-comment">//注意：submit方法调用结束后，程序并不终止，是因为线程池控制了线程的关闭。将使用完的线程又归还到了线程池中</span><br><br>        <span class="hljs-comment">//关闭线程池</span><br>        service.shutdown();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Runnable接口实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyRunnable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"我要一个教练"</span>);<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">2000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        System.out.println(<span class="hljs-string">"教练来了： "</span> + Thread.currentThread().getName());<br>        System.out.println(<span class="hljs-string">"教我游泳,教完后，教练回到了游泳池"</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="使用线程池方式—Callable接口"><a href="#使用线程池方式—Callable接口" class="headerlink" title="使用线程池方式—Callable接口"></a><strong>使用线程池方式—Callable接口</strong></h6><blockquote><p>与Runnable接口功能相似，用来指定线程的任务。其中的call()方法，用来返回线程任务执行完毕后的结果，call方法可抛出异常。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.ExecutorService;<br><span class="hljs-keyword">import</span> java.util.concurrent.Executors;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadPoolDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//创建线程池对象</span><br>        ExecutorService service = Executors.newFixedThreadPool(<span class="hljs-number">2</span>);<span class="hljs-comment">//包含2个线程对象</span><br>        <span class="hljs-comment">//创建Callable对象</span><br>        MyCallable c = <span class="hljs-keyword">new</span> MyCallable();<br>        <span class="hljs-comment">//从线程池中获取线程对象,然后调用MyRunnable中的run()</span><br>        service.submit(c);<br>        <span class="hljs-comment">//再获取个教练</span><br>        service.submit(c);<br>        service.submit(c);<br>        <span class="hljs-comment">//注意：submit方法调用结束后，程序并不终止，是因为线程池控制了线程的关闭。将使用完的线程又归还到了线程池中</span><br><br>        <span class="hljs-comment">//关闭线程池</span><br>        <span class="hljs-comment">//service.shutdown();</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Callable接口实现类,call方法可抛出异常、返回线程任务执行完毕后的结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyCallable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Callable</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        System.out.println(<span class="hljs-string">"我要一个教练:call"</span>);<br>        Thread.sleep(<span class="hljs-number">2000</span>);<br>        System.out.println(<span class="hljs-string">"教练来了： "</span> + Thread.currentThread().getName());<br>        System.out.println(<span class="hljs-string">"教我游泳,教完后,教练回到了游泳池"</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Thread</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实现多线程的两种方式</title>
    <link href="/2019/06/10/%E5%AE%9E%E7%8E%B0%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <url>/2019/06/10/%E5%AE%9E%E7%8E%B0%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>Thread类：</p><p>Thread是程序中的执行线程。java虚拟机允许应用程序并发地的运行多个执行线程。</p><h5 id="1-进程与线程的关系"><a href="#1-进程与线程的关系" class="headerlink" title="1.进程与线程的关系"></a><strong>1.进程与线程的关系</strong></h5><p>进程：进程指正在运行的程序。确切的来说，当一个程序进入内存运行，即变成一个进程，进程是处于运行过程中的程序，并且具有一定独立功能。</p><p>线程：线程是进程中的一个执行单元，负责当前进程中程序的执行，一个进程中至少有一个线程。一个进程中是可以有多个线程的，</p><p>　　　这个应用程序也可以称之为多线程程序。</p><p>简而言之：一个程序运行后至少有一个进程，一个进程中可以包含多个线程。</p><p>​    <a id="more"></a></p><h5 id="2-多线程两种实现方式"><a href="#2-多线程两种实现方式" class="headerlink" title="2.多线程两种实现方式"></a><strong>2.多线程两种实现方式</strong></h5><p>创建线程有两种方法</p><pre><code>一种方法是将类声明为 Thread 的子类。该子类应重写 Thread 类的 run 方法。创建对象，开启线程。</code></pre><p> run方法相当于其他线程的main方法。</p><pre><code>另一种方法是声明一个实现 Runnable 接口的类。该类然后实现 run 方法。</code></pre><p> 然后创建Runnable的子类对象，传入到某个线程的构造方法中，开启线程。</p><h6 id="2-1-创建线程方式一继承Thread类"><a href="#2-1-创建线程方式一继承Thread类" class="headerlink" title="2.1.创建线程方式一继承Thread类"></a><strong>2.1.创建线程方式一继承Thread类</strong></h6><p>创建线程的步骤：</p><p>1 定义一个类继承Thread。</p><p>2 重写run方法。</p><p>3 创建子类对象，就是创建线程对象。</p><p>4 调用start方法，开启线程并让线程执行，同时还会告诉jvm去调用run方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo01</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//创建自定义线程对象</span><br>        MyThread mt = <span class="hljs-keyword">new</span> MyThread(<span class="hljs-string">"新的线程！"</span>);<br>        <span class="hljs-comment">//开启新线程</span><br>        mt.start();<br>        <span class="hljs-comment">//在主方法中执行for循环</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">"for==main线程！"</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>自定义线程类</p><h6 id=""><a href="#" class="headerlink" title=""></a></h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br>    <span class="hljs-comment">//定义指定线程名称的构造方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyThread</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-comment">//调用父类的String参数的构造方法，指定线程的名称</span><br>        <span class="hljs-keyword">super</span>(name);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 重写run方法，完成该线程执行的逻辑</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            System.out.println(getName() + <span class="hljs-string">"：正在执行！"</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="2-2-创建线程方式—实现Runnable接口"><a href="#2-2-创建线程方式—实现Runnable接口" class="headerlink" title="2.2.创建线程方式—实现Runnable接口"></a><strong>2.2.创建线程方式—实现Runnable接口</strong></h6><p>创建线程的另一种方法是声明实现 Runnable 接口的类。</p><p>该类然后实现 run 方法。然后创建Runnable的子类对象，传入到某个线程的构造方法中，开启线程。</p><p>1、定义类实现Runnable接口。</p><p>2、覆盖接口中的run方法。。</p><p>3、创建Thread类的对象</p><p>4、将Runnable接口的子类对象作为参数传递给Thread类的构造函数。</p><p>5、调用Thread类的start方法开启线程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo02</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//创建线程执行目标类对象</span><br>        Runnable runn = <span class="hljs-keyword">new</span> MyRunnable();<br>        <span class="hljs-comment">//将Runnable接口的子类对象作为参数传递给Thread类的构造函数</span><br>        Thread thread = <span class="hljs-keyword">new</span> Thread(runn);<br>        Thread thread2 = <span class="hljs-keyword">new</span> Thread(runn);<br>        <span class="hljs-comment">//开启线程</span><br>        thread.start();<br>        thread2.start();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">"main线程：正在执行！"</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>自定义线程执行任务类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyRunnable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br>    <span class="hljs-comment">//定义线程要执行的run方法逻辑</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">"我的线程：正在执行！"</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-多线程两种实现方式的区别"><a href="#3-多线程两种实现方式的区别" class="headerlink" title="3.多线程两种实现方式的区别"></a><strong>3.多线程两种实现方式的区别</strong></h5><p>第二种方式实现Runnable接口避免了单继承的局限性，所以较为常用。实现Runnable接口的方式，更加的符合面向对象，线程分为两部分，</p><p>一部分线程对象，一部分线程任务。继承Thread类，线程对象和线程任务耦合在一起。一旦创建Thread类的子类对象，既是线程对象，</p><p>有又有线程任务。实现runnable接口，将线程任务单独分离出来封装成对象，类型就是Runnable接口类型。Runnable接口对线程对象和线程任务进行解耦。</p><h5 id="4-线程的匿名内部类使用"><a href="#4-线程的匿名内部类使用" class="headerlink" title="4. 线程的匿名内部类使用"></a><strong>4. 线程的匿名内部类使用</strong></h5><p>方式1：创建线程对象时，直接重写Thread类中的run方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> Thread() &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>; x &lt; <span class="hljs-number">40</span>; x++) &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">"...X...."</span> + x);<br>        &#125;<br>    &#125;<br>&#125;.start();<br></code></pre></td></tr></table></figure><p>方式2：使用匿名内部类的方式实现Runnable接口，重新Runnable接口中的run方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">Runnable r = <span class="hljs-keyword">new</span> Runnable() &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>; x &lt; <span class="hljs-number">40</span>; x++) &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">"...Y...."</span> + x);<br>        &#125;<br>    &#125;<br>&#125;;<br><span class="hljs-keyword">new</span> Thread(r).start();<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Thread</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mac资源共享</title>
    <link href="/2019/06/10/mac%E8%B5%84%E6%BA%90%E5%85%B1%E4%BA%AB/"/>
    <url>/2019/06/10/mac%E8%B5%84%E6%BA%90%E5%85%B1%E4%BA%AB/</url>
    
    <content type="html"><![CDATA[<h4 id="PDFelement-Pro-For-Mac强大的PDF编辑工具V6-8-0"><a href="#PDFelement-Pro-For-Mac强大的PDF编辑工具V6-8-0" class="headerlink" title="PDFelement Pro For Mac强大的PDF编辑工具V6.8.0"></a>PDFelement Pro For Mac强大的PDF编辑工具V6.8.0</h4><p>软件介绍：</p><p>Wondershare PDFelement Pro（PDFelement 6 Pro ）是一款安全强大，简单好用的PDF解决方案。拥有您使用PDF所需的一切。</p><p>功能介绍：</p><p>特性：</p><p>PDF编辑器</p><p>编辑，删除，剪切，复制，粘贴和插入PDF文本和图像。</p><p>改变字体属性（类型，大小和风格，对齐）。</p><p>插入，更新或删除自定义水印和背景。</p><p>使用高级格式应用贝茨编号。 （独家！）</p><p>插入，更新或删除页眉和页脚（包括页码和日期）。</p><p>插入和编辑超链接。</p><p>标记和注释PDF</p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/06/26/b5da8c4ab0bcdd7b53e22a7c8900d39a-700.jpg" srcset="/img/loading.gif" alt="wallpaper"></p><p>添加评论，粘滞便笺，文本框，文本呼出，邮票，添加/编辑链接，徒手画。</p><p>突出显示，强调或突破上下文。</p><p>创建和管理预建和自定义邮票库。</p><p>创建和编辑表单</p><p>填写PDF表格。</p><p>自动表单字段识别自动创建表单。</p><p>从交互式字段对象（如按钮，复选框，单选按钮，列表框和下拉列表）中创建可填写的PDF表单。</p><p>访问预先构建，可自定义的可填写表单的集合。</p><p>支持在PDF上创建，编辑和添加数字签名。</p><p>数据提取（独家！）</p><p>从数字和扫描的PDF表格中自动提取数据。</p><p>从数字和扫描的PDF格式的批量数据提取到CSV电子表格。</p><p>标记并提取扫描PDF的选定表单域中的数据。</p><p>从PDF格式导出或导入表单数据。</p><p>OCR（独家！）</p><p>OCR（光学字符识别）使您能够编辑和转换扫描的PDF文件或图片中的字符。</p><p>OCR有助于从扫描的PDF表单或发票中提取数据。</p><p>PDF / A（独家！）</p><p>支持PDF / A作为一个可用的输出格式与ISO标准长期归档。</p><p>PDF转换器</p><p>除标准版支持的Word，Excel，PPT和Image等普通输出格式外，Pro版本还支持将PDF文件转换为EPUB，HTML，Text，RTF等格式。</p><p>使用OCR技术将扫描的PDF转换为可编辑和可搜索的文档。</p><p>转换后保留文本，图像，图形，字体和嵌入式元素的原始布局。</p><p>页面管理</p><p>管理文档中的页面（重新组织，插入，提取，裁剪，旋转和删除页面）。</p><p>创建和组合PDF</p><p>支持输入格式：pdf / html / webarchive / rtf / txt / jpeg / jpg / png / bmp / gif。</p><p>将不同的格式文件组合成一个新的PDF。</p><p>由PDFelement创建的文件是100％兼容和Adobe Reader和其他PDF阅读器访问。</p><p>安全并共享PDF</p><p>设置密码以防止未经授权的用户打开PDF。</p><p>应用权限。通过为文档设置权限，限制用户访问PDF打印，复制，编辑和提取。</p><p>编辑PDF中的敏感文本和图像。 （独家！）</p><p>发送PDF格式的电子邮件附件。</p><p>支持直接打印和电子邮件编辑的PDF。</p><p>将您的PDF文件保存到流行的云存储服务（Google Drive，Dropbox和Evernote）。</p><p>软件兼容性：</p><p>OS X 10.12或更高版本</p><p>软件语言：</p><p>多国语言（Chinese/English）</p><p>链接: <a href="https://pan.baidu.com/s/1l8L-qN7rewdeCuWt1dSlcw" target="_blank" rel="noopener">https://pan.baidu.com/s/1l8L-qN7rewdeCuWt1dSlcw</a> 提取码: dfn2 </p><h4 id="RazorSQL-For-Mac支持多种数据库的数据库管理工具-V8-3-4"><a href="#RazorSQL-For-Mac支持多种数据库的数据库管理工具-V8-3-4" class="headerlink" title="RazorSQL For Mac支持多种数据库的数据库管理工具 V8.3.4"></a>RazorSQL For Mac支持多种数据库的数据库管理工具 V8.3.4</h4><p>软件介绍：</p><p>RazorSQL 是一款优秀的数据库管理客户端，具有数据库连接、SQL编辑和查询、数据库管理、导入/导出数据等等功能。</p><p>功能介绍：</p><p>RazorSQL 是一款优秀的数据库管理客户端，具有数据库连接、SQL编辑和查询、数据库管理、导入/导出数据等等功能。</p><p>支持主流的30多种数据库，如：Cassandra、Oracle、SQLite、MS SQL Server、MySQL、MongoDB等。</p><p>软件兼容性：</p><p>OS X 10.12或更高版本</p><p>软件语言：</p><p>英文语言（English）</p><p>链接: <a href="https://pan.baidu.com/s/1_80dXs_NW0ZAp3_umhXQiw" target="_blank" rel="noopener">https://pan.baidu.com/s/1_80dXs_NW0ZAp3_umhXQiw</a> 提取码: vn9k </p><h4 id="Microsoft-Office-For-Mac办公软件-V2019-16-25-19051201"><a href="#Microsoft-Office-For-Mac办公软件-V2019-16-25-19051201" class="headerlink" title="Microsoft Office For Mac办公软件 V2019 16.25.19051201"></a>Microsoft Office For Mac办公软件 V2019 16.25.19051201</h4><p>软件介绍：</p><p>Office For Mac包含全新的Word，Excel,PowerPoint，Outlook和OneNote，完全支持Retina，支持中文，大量功能更新，非常强大！</p><p>功能介绍：</p><p>全新的、富有时代气息的 Word、Excel、PowerPoint、Outlook 和 OneNote — 将熟悉的 Office 与你钟爱的独有 Mac 功能相结合，让你可以快速上手。</p><p>无论身处何处，你都能随时创建精美的文档，深入获取各类信息，从容自信地展示。</p><p>Office 应用程序功能强大，借助 Office 应用程序，你可以在平板电脑、手机和 Web 上随时完成工作。</p><p>内置工具能更好地支持团队协作，团队成员可以共享、审阅和共同编辑文档、演示文稿和笔记，让你的团队更高效紧密合作。</p><p>软件兼容性：<br>OS X 10.12或更高版本</p><p><strong>支持10.14系统</strong></p><p>软件语言：</p><p>多国语言（Chinese/English）</p><p>链接: <a href="https://pan.baidu.com/s/14QibV7ruW1CJd7QADnAKog" target="_blank" rel="noopener">https://pan.baidu.com/s/14QibV7ruW1CJd7QADnAKog</a> 提取码: ne4p</p><h4 id="Sketch-For-Mac矢量绘图工具-V54-1"><a href="#Sketch-For-Mac矢量绘图工具-V54-1" class="headerlink" title="Sketch For Mac矢量绘图工具 V54.1"></a>Sketch For Mac矢量绘图工具 V54.1</h4><p>软件介绍：</p><p>Sketch 是Mac上一个强大、创新、易使用的矢量绘图软件。Sketch 简约的设计是基于无限的规模和层次的绘图空间，丰富的调色板、面板、菜单、窗口和控件。虽然使用简单，但是它提供了功能强大的矢量绘图和文字工具，如完美的布尔运算、符号，和强大的标尺、参考线和网格。</p><p>功能介绍：<br>简单但功能强大的接口</p><ul><li>优化的视网膜和非Retina显示屏</li><li>强大的造型，多重阴影，多个填充，渐变，混合，模糊，噪点多…</li><li>灵活的布尔操作简单的图形组合成复杂的形状</li><li>画板及切片出口多个图像出一个单一的文件</li><li>自动@ 2X出口的视网膜图形<br>独特的颜色（与RGB和HSB模式）和字体选择器</li><li>美丽的原生文本渲染和文本样式</li><li>向量和像素变焦，拉近与无限的矢量精度或个别像素</li><li>多站和径向渐变编辑右侧的画布中。强大的所见即所得的渲染。</li><li>PDF，EPS和SVG的进口和出口的支持</li><li>共享与链接图层样式的自动更新彼此</li><li>功能强大，易于使用的矢量工具<br>此外，设计师在以下几个方面将享受以下功能：<br>　　为Web和UI设计</li><li>复制CSS样式到剪贴板（包括梯度！ ）</li><li>切片：将出口作为画布上的图像区域</li><li>960px网格，用更先进的网格选项的支持</li><li>多页的单个文件里面支持<br>用于图标设计师</li><li>画板，画板每一个是自己的小帆布</li><li>iOS的图标模板</li><li>像素网格</li><li>像素效果，如高斯和运动模糊</li></ul><p>现V53以上的版本，已经支持中文了</p><p>汉化安装说明： 点这里 <a href="https://u14254589.pipipan.com/fs/14254589-234413612" target="_blank" rel="noopener">汉化包下载</a></p><p>1.下载汉化 Sketchl18N-master 压缩包</p><p>2.找到 SketchI18N.sketchplugin 双击安装（前提你装好了 Sketch）</p><p>3.提示安装成功后点 OK 进入sketch</p><p>4.在 Sketch 中按快捷键 control command + x 实现（也可以在菜单栏中 Plugins 中找到 Sketchl 18N）</p><p>5.汉化成功</p><p>软件兼容性：<br>OS X 10.13或更高版本</p><p>软件语言：<br>多国语言（Chinese/English）</p><p>链接: <a href="https://pan.baidu.com/s/1PcQavpmtNZ5WdT5c4uMp_Q" target="_blank" rel="noopener">https://pan.baidu.com/s/1PcQavpmtNZ5WdT5c4uMp_Q</a> 提取码: 4x1n 复制这段内容后打开百度网盘手机App，操作更方便哦</p><h4 id="OmniFocus-For-Mac最优秀的GTD效率工具-V3-3-2"><a href="#OmniFocus-For-Mac最优秀的GTD效率工具-V3-3-2" class="headerlink" title="OmniFocus For Mac最优秀的GTD效率工具 V3.3.2"></a>OmniFocus For Mac最优秀的GTD效率工具 V3.3.2</h4><p>软件介绍：</p><p>OmniFocus 是一款IOS 和Mac平台上最强大的书籍与事务管理方法“Getting Things Done”工具，你可以有条理有逻辑的安排好你的工作和生活。主要协助您捕捉并管理各项事务与点子，发挥生产力；您可以用它来储存、管理及处理各项动作或任务，而任务或各项目可被指派到相关的专案中，同时OmniFocus也提供了视觉提示来提醒您下一步该执行的动作。</p><p>功能介绍：</p><p>OmniFocus的开发概念是来自David Allen的书籍与事务管理方法“Getting Things Done”，主要协助您捕捉并管理各项事务与点子，发挥生产力；您可以用它来储存、管理及处理各项动作或任务，而任务或各项目可被指派到相关的专案中，同时OmniFocus也提供了视觉提示来提醒您下一步该执行的动作。</p><p>OmniFocus可输入kGTD文件的资料、与iCal同步、透过Mail加入任务、使用Spotlight来存取各项任务、过滤专案与任务、支援档案附件…等等。开发人员在产品网页也提供了产品概观与示范影片，供使用者参考。Capture-快速方便记录你所有需要做的事件到你的收件箱中，直到你准备去处理和组织他们。Organize-在OmniFocus中使用强大的contexts特点进行分类的工作模式。</p><p>Sync-你在Mac上没有完成你的目标，你可以把他们一起带走。在OmniFocus里，你能够把你的任务数据库同步到服务器或者磁盘里。如果你有iPhone，那就更方便了，直接把所有Mac的任务数据直接同步在iPhone和iPad上。</p><p>软件兼容性：</p><p>OS X 10.13或更高版本</p><p>软件语言：</p><p>多国语言（Chinese/English）</p><p>链接: <a href="https://pan.baidu.com/s/1eKH2kA-Z85RKe-wGz2CgnA" target="_blank" rel="noopener">https://pan.baidu.com/s/1eKH2kA-Z85RKe-wGz2CgnA</a> 提取码: 81iu </p><h4 id="Launchey-For-Mac灵活的菜单栏快捷工具-V2-0-9b"><a href="#Launchey-For-Mac灵活的菜单栏快捷工具-V2-0-9b" class="headerlink" title="Launchey For Mac灵活的菜单栏快捷工具 V2.0.9b"></a>Launchey For Mac灵活的菜单栏快捷工具 V2.0.9b</h4><p>软件介绍：</p><p>Launchey是一个轻量级的菜单启动程序，让你启动任何应用程序在您的Mac的菜单栏。你可以选择哪些应用程序是可见的Launchey的菜单栏菜单，选择5个最喜欢的，你就可以直接在你的Mac的菜单栏显示。Launchey让您启动您最喜爱的应用程序设置全局热键。</p><p>功能介绍：</p><p>特征：</p><p>可定制的菜单，</p><p>可定制的热键，</p><p>直接在菜单栏中显示应用，</p><p>可定制的应用程序，</p><p>在启动时启动，</p><p>快速轻巧，</p><p>使用最新的Apple技术构建，</p><p>专为OS X El Capitan设计。</p><p>软件兼容性：</p><p>OS X 10.12或更高版本</p><p>软件语言：</p><p>英文语言（English）</p><p>链接: <a href="https://pan.baidu.com/s/1LwS_tKeLJ5bKxCICy1TQdA" target="_blank" rel="noopener">https://pan.baidu.com/s/1LwS_tKeLJ5bKxCICy1TQdA</a> 提取码: 6rma</p><h4 id="uTools-For-Mac你的生产力工具集-V0-6-1-beta"><a href="#uTools-For-Mac你的生产力工具集-V0-6-1-beta" class="headerlink" title="uTools For Mac你的生产力工具集 V0.6.1-beta"></a>uTools For Mac你的生产力工具集 V0.6.1-beta</h4><p>软件介绍：</p><p>uTools是一个极简、插件化、跨平台的现代桌面软件。通过自由选配丰富的插件，打造你得心应手的工具集合。</p><p>当你熟悉它后，能够为你节约大量时间，让你可以更加专注地改变世界。</p><p>功能介绍：</p><p>快速启动</p><p>强大的快速启动，比你想象的更加深入。对中文语义的友好支持，首字母检索等。</p><p>自动识别</p><p>uTools支持多种输入源呼出插件，例如：字符输入、文件拖拽、截图粘贴，亦能够自动识别输入内容进入相应插件，如json、时间戳、base64等。</p><p>数据同步</p><p>uTools各插件产生的数据将保存到本地数据库中。为了便于在不同设备之间共享数据，或是预防重装系统造成数据丢失，我们提供云端数据备份同步服务，登录后可一键开启。</p><p>高度自由</p><p>uTools 一切皆插件的设计，可以允许你高度自由的定义自己的开发工具，现在你也可以扩展第三方插件或者开发属于自己的插件。</p><p>软件兼容性：</p><p>OS X 10.12或更高版本</p><p>软件语言：</p><p>多国语言（Chinese/English）</p><p>链接: <a href="https://pan.baidu.com/s/1ZUjcSggBZrkJCrs2lVdCMA" target="_blank" rel="noopener">https://pan.baidu.com/s/1ZUjcSggBZrkJCrs2lVdCMA</a> 提取码: vcwa</p><h4 id="Remote-Desktop-Manager-For-Mac优秀的远程桌面管理应用-V2019-1-3-0"><a href="#Remote-Desktop-Manager-For-Mac优秀的远程桌面管理应用-V2019-1-3-0" class="headerlink" title="Remote Desktop Manager For Mac优秀的远程桌面管理应用 V2019.1.3.0"></a>Remote Desktop Manager For Mac优秀的远程桌面管理应用 V2019.1.3.0</h4><p>软件介绍：</p><p>Devolutions Remote Desktop Manager是一款功能强大直观的远程桌面管理应用，使您可以在用户友好的界面中管理所有远程连接，帐户凭据和其他信息。专门针对网络和系统管理员，以及需要将所有远程连接，密码和其他凭据保存在同一屋檐下的用户。</p><p>功能介绍：</p><p>功能丰富，易于与管理应用程序一起工作</p><p>它的组织良好的界面和易于使用的功能将使您在使用远程桌面管理器之前不需要大量的时间它。</p><p>绝对使用远程桌面管理器企业版的所有条目都必须手工完成，无论我们是在谈论凭证，组还是其他更高级的设置。</p><p>但是，作为补偿，一旦配置了会话，就可以利用其批量编辑功能，使您可以跨多个会话更改设置。</p><p>轻松管理您的远程连接并保存您的所有密码和凭据</p><p>此外，远程桌面管理器企业版还支持RDP，SSH，Web，VNC，Telnet，ICA / HDX，TeamViewer，LogMeIn等大量连接，以及25种VPN类型的附加功能。</p><p>就安全性而言，远程桌面管理器企业版具有内置的密码管理器，密码分析器和SSH密钥生成器。它还使您能够保存和管理所有密码，并从其他现有密码管理器导入数据。</p><p>系统和网络管理员的综合和有用的工具</p><p>关于其管理工具，远程桌面管理器企业版集成了用于Citrix XenServer，VMware，Microsoft终端服务器和Hyper-V的控制台，以及远程关闭，局域网唤醒和库存报告功能。</p><p>考虑到所有因素，远程桌面管理器企业版提供了一个简化的管理环境和大量的功能，使其成为任何系统和网络管理员与多个远程连接和凭证工作的必备应用程序。</p><p>软件兼容性：</p><p>OS X 10.12或更高版本</p><p>软件语言：</p><p>英文语言（English）</p><p>链接: <a href="https://pan.baidu.com/s/1rmHryFLYZiIh-CIh49tA1A" target="_blank" rel="noopener">https://pan.baidu.com/s/1rmHryFLYZiIh-CIh49tA1A</a> 提取码: ihd3</p><h4 id="Things-For-Mac强大的GTD效率工具-V3-9-0"><a href="#Things-For-Mac强大的GTD效率工具-V3-9-0" class="headerlink" title="Things For Mac强大的GTD效率工具 V3.9.0"></a>Things For Mac强大的GTD效率工具 V3.9.0</h4><p>软件介绍：</p><p>Things Mac版是MAC OS平台上的文件管理工具，在一种优雅和直观的方式来帮助组织你的任务。Things for Mac结合了强大的功能与简单的使用界面，通过使用标签和智能过滤栏来更好的为你工作。</p><p>十分简洁易用。</p><p>您会立即注意到 Things 中的所有功能是如此完美地融合在一起，从而为您带来整洁、集中的体验。没有不必要的铃声和哨声，以及检查器窗口和弹出对话框。只有您和您的待办事项。</p><p>一切都以您的待办事项为中心。</p><p>Things 中的待办事项比较特别。在列表中，它们会以最紧凑的形式显示复选框和标题。但将它们展开后，它们就会变为一张漂亮的白纸，上面有您想做的各种事情 – 并且如果您需要，还可以包括您的检查列表、标签、提醒事项以及截止日期。</p><p>一些超酷的功能。</p><p>例如“按类型查看” – 这是浏览列表和查找待办事项的极佳方式。或者自然语言日期解析器 – 只需输入“明天”、“4 天后”或“下周三”，就会跳到所有正确的结果。</p><p>一款制作相当精良的 macOS 应用。</p><p>Things 可与所有 macOS 技术完全集成： Touch Bar、今天小部件、共享扩展、 Handoff、日历、提醒事项和 AppleScript。或许还包括几项我们忘记列出的技术。</p><p>各种出色的功能数不胜数。</p><p>每个人都有自己喜欢的功能，不可能将其全部列出。</p><p>功能介绍：</p><p>如果您是初次使用 Things，请参照以下的基本工作流程：</p><p>1.收集想法</p><p>快速记录您的想法：与 Siri 交谈或者使用系统范围的键盘快捷键来启动“快速创建”。</p><p>2.分类</p><p>为您的每个目标创建一个项目。根据您的责任区域群组各项目，例如“家庭”、“工作”或“健康”。定期审查这些项目，从而顺利实现各目标。</p><p>3.计划时间</p><p>有效管理您的时间 – 同时查看您的待办事项和日历事件，并相应地对每周进行计划。创建重复的待办事项以确保始终如一。</p><p>4.充实生活每一天</p><p>每天早晨查看您的“今天”列表，然后马上行动。之前计划的待办事项会自动显示在其中。在您进行每天的工作时，这是您唯一需要查看的列表。</p><p>5.自定义工作流程</p><p>您可以利用标签为待办事项分配自定义类别：标记“重要”待办事项、“日常”待办事项、需要在“办公室”完成的待办事项以及与“凯特”一起完成的待办事项。既可以按标签轻松筛选列表，也可以在所有列表中搜索标签。</p><p>软件兼容性：</p><p>OS X 10.12或更高版本</p><p>软件语言：</p><p>多国语言（Chinese/English）</p><p>链接: <a href="https://pan.baidu.com/s/17vMxzdK3yCNgIaALor7w7A" target="_blank" rel="noopener">https://pan.baidu.com/s/17vMxzdK3yCNgIaALor7w7A</a> 提取码: d4x9</p><h4 id="Things-For-Mac强大的GTD效率工具-V3-9-1"><a href="#Things-For-Mac强大的GTD效率工具-V3-9-1" class="headerlink" title="Things For Mac强大的GTD效率工具 V3.9.1"></a>Things For Mac强大的GTD效率工具 V3.9.1</h4><p>软件介绍：</p><p>Things Mac版是MAC OS平台上的文件管理工具，在一种优雅和直观的方式来帮助组织你的任务。Things for Mac结合了强大的功能与简单的使用界面，通过使用标签和智能过滤栏来更好的为你工作。</p><p>十分简洁易用。</p><p>您会立即注意到 Things 中的所有功能是如此完美地融合在一起，从而为您带来整洁、集中的体验。没有不必要的铃声和哨声，以及检查器窗口和弹出对话框。只有您和您的待办事项。</p><p>一切都以您的待办事项为中心。</p><p>Things 中的待办事项比较特别。在列表中，它们会以最紧凑的形式显示复选框和标题。但将它们展开后，它们就会变为一张漂亮的白纸，上面有您想做的各种事情 – 并且如果您需要，还可以包括您的检查列表、标签、提醒事项以及截止日期。</p><p>一些超酷的功能。</p><p>例如“按类型查看” – 这是浏览列表和查找待办事项的极佳方式。或者自然语言日期解析器 – 只需输入“明天”、“4 天后”或“下周三”，就会跳到所有正确的结果。</p><p>一款制作相当精良的 macOS 应用。</p><p>Things 可与所有 macOS 技术完全集成： Touch Bar、今天小部件、共享扩展、 Handoff、日历、提醒事项和 AppleScript。或许还包括几项我们忘记列出的技术。</p><p>各种出色的功能数不胜数。</p><p>每个人都有自己喜欢的功能，不可能将其全部列出。</p><p>功能介绍：</p><p>如果您是初次使用 Things，请参照以下的基本工作流程：</p><p>1.收集想法</p><p>快速记录您的想法：与 Siri 交谈或者使用系统范围的键盘快捷键来启动“快速创建”。</p><p>2.分类</p><p>为您的每个目标创建一个项目。根据您的责任区域群组各项目，例如“家庭”、“工作”或“健康”。定期审查这些项目，从而顺利实现各目标。</p><p>3.计划时间</p><p>有效管理您的时间 – 同时查看您的待办事项和日历事件，并相应地对每周进行计划。创建重复的待办事项以确保始终如一。</p><p>4.充实生活每一天</p><p>每天早晨查看您的“今天”列表，然后马上行动。之前计划的待办事项会自动显示在其中。在您进行每天的工作时，这是您唯一需要查看的列表。</p><p>5.自定义工作流程</p><p>您可以利用标签为待办事项分配自定义类别：标记“重要”待办事项、“日常”待办事项、需要在“办公室”完成的待办事项以及与“凯特”一起完成的待办事项。既可以按标签轻松筛选列表，也可以在所有列表中搜索标签。</p><p>软件截图：</p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/ac9085_67e22147e15b4713a652948afefca293_mv2_nj7cje.jpg" srcset="/img/loading.gif" alt="img"></p><p>软件兼容性：</p><p>OS X 10.12或更高版本</p><p>软件语言：</p><p>多国语言（Chinese/English）</p><p>下载破解版本：</p><p>链接: <a href="https://pan.baidu.com/s/1Hw0wnFeuf2RWOpRz5Z1uEw" target="_blank" rel="noopener">https://pan.baidu.com/s/1Hw0wnFeuf2RWOpRz5Z1uEw</a> 提取码: g37n</p><h4 id="TechSmith-Snagit-For-Mac超强截屏神器-V2019-1-3"><a href="#TechSmith-Snagit-For-Mac超强截屏神器-V2019-1-3" class="headerlink" title="TechSmith Snagit For Mac超强截屏神器 V2019.1.3"></a>TechSmith Snagit For Mac超强截屏神器 V2019.1.3</h4><p>软件介绍：<br>Snagit for mac(TechSmith Snagit)这是一款很好用的Mac OS系统截屏工具，你可以使用此工具轻松抓取图像、文本和影音等多种内容形式，内置强大编辑器，捕捉、编辑一步到位。</p><p>功能介绍：<br>Snagit 帮助您通过视频和图像提高交流的水平和质量。您可快速提供更好的反馈，鼓励团队合作，以及改变合伙方式，从而完成工作。您可采集任何图像，然后用各种特效对其进行强化或快速创建计算机屏幕图像视频。根据需要选择特效，方便地自定义任意截屏。<br>您可使用 Snagit 的各种标记工具加亮一个区域，或者将注意力吸引到某个特殊的点上。您也可通过录制屏幕和快速裁剪不需要的部分来快速创建视频。使用 Snagit 制作的所有内容都能方便地与任何人分享。</p><p>软件兼容性：<br>OS X 10.12或更高版本</p><p>软件语言：<br>英文语言（English）​</p><p>链接: <a href="https://pan.baidu.com/s/1YsJxqDOqXvuTzpqMD9pq8Q" target="_blank" rel="noopener">https://pan.baidu.com/s/1YsJxqDOqXvuTzpqMD9pq8Q</a> 提取码: 7bba</p><h4 id="Better-And-Better-For-Mac一款包含很多功能等长截图的macOS工具-V1-6-63"><a href="#Better-And-Better-For-Mac一款包含很多功能等长截图的macOS工具-V1-6-63" class="headerlink" title="Better And Better For Mac一款包含很多功能等长截图的macOS工具 V1.6.63"></a>Better And Better For Mac一款包含很多功能等长截图的macOS工具 V1.6.63</h4><p>软件介绍：</p><p>BetterAndBetter 是一款集合众多优秀功能的 macOS 软件。包含🖱️鼠标、⌨️键盘、触摸板、情景模式、蓝牙解锁、自动切换输入法、🔉 打字音效等功能，出色的创意和强大的功能将极大提升你的 macOS 使用体验。</p><p>功能介绍：</p><p>触摸板模块</p><p>这个模块是手势识别应用程序，在 MacBook 系列里自带的触摸板上，软件会监听你几个手指，做不同的手势动作，如果手势被识别，BetterAndBetter 将执行已经制定规则的相应操作。</p><p>目前 BetterAndBetter 可以模拟按键，执行软件预设的命令，执行 apple script。</p><p>其中有一个开关是开启二指绘图功能，意思是按住一个手指，另一个手指在左侧轻拍一下，就可以用单指绘图了，相当于按住鼠标右键做拖移动作，就会执行鼠标模块里面的某些功能。</p><p>选择手势时如果选择黑名单，就会在你选择的程序里所有的手势不起作用。</p><p>鼠标模块</p><p>这个模块是鼠标手势识别应用程序。按住右键部分是在按住鼠标右键的同时使用鼠标进行的运动。 如果手势被识别，BetterAndBetter 将执行某些操作。</p><p>组合按键部分，是指按住鼠标右键，然后配合菜单里指示的动作去自定义执行动作。</p><p>其他按键部分，是指按住其他按键，然后配合相应菜单里指示的动作去自定义执行动作。</p><p>手势相似度，意思是你鼠标画的轨迹和数据库里已经设置的轨迹比对的吻合程度，这个值一般设定为 75–95，具体可以根据自己的实际操作以后的感觉来设定。</p><p>鼠标加速度滑块，你可以根据自己的习惯调节鼠标的加速度，数值为零时就是关闭鼠标的加速度。</p><p>自动跳窗模块</p><p>这个模块类似 popclip 这个软件，按住鼠标左键，然后拖移去选择文本或者在 Finder 里面去选择文件，软件会根据不同的情况自动跳出不同的窗口，点击已经跳出的窗口，就可以执行相应的动作</p><p>因为有 2 个表格，所以先点击一个表格，然后在按“+”等按钮。表格里的内容都是可以修改的，特别提醒的是这两个表格里面的行是可以拖移的，以此来调整跳窗的先后次序。</p><p>需要特别解释的是状态栏，有 ⌘C，⌘V，⌘X和⌘，它的意思是在激活的 App 里的复制，粘贴，剪切按钮是点亮的，对应的标识才会出现在跳窗里，⌘ 表示在任何情况下都会出现在跳窗里。</p><p>在选择文本时有以下三种情况下会跳出窗口：</p><p>鼠标拖拽划选；</p><p>在文本上面双击鼠标；</p><p>鼠标没有移动的情况下，在能输入的地方隔开 0.6 秒以上的两次点击鼠标。</p><p>在选择文件时也有以下三种情况下会跳出窗口：</p><p>鼠标拖拽划选在 Finder 程序的空白处；</p><p>桌面上双击鼠标；</p><p>在鼠标没有移动的情况下，在文件或者目录上面隔开 0.6 秒以上的两次点击鼠标。</p><p>边角触发模块</p><p>这个模块是可以设定在不同的桌面时，左键或右键点击屏膜的四个角，可以分别设置一些动作，这些动作有快捷键，预设动作和 applescript 三种。</p><p>窗口管理</p><p>当你移动窗口时，会自动出来八个提示框，分别代表分屏的位置。</p><p>吸附功能：当你用鼠标把一个窗口拖移向屏膜左边或者右边，当窗口的一边接近屏膜边缘时，在相应位置会出现一条黄色的线，此时松开鼠标按键，窗口就会吸附在屏幕一侧。当鼠标移动到已经有窗口吸附的屏膜的左边或者右边时，鼠标下被吸附的窗口就会自动弹出来。鼠标离开这个窗口时，窗口又会吸附在屏幕的两边，注意：窗口宽度等于屏幕宽度的窗口是不会被吸附的。</p><p>工具箱模块</p><p>蓝牙解锁</p><p>这个模块是在需要输入系统密码时，通过检测已经配对的蓝牙设备是否能连接，能连接就自动输入密码。只有从睡眠，屏保，和关闭屏膜中恢复时需要检测蓝牙的，在其他需要系统密码时都是不经过蓝牙检测，就直接输入密码的，比如在偏好设置需要密码时。</p><p>登录时拍照，如果激活这个按钮，就是从睡眠，屏保，和关闭屏膜中恢复时一方面检测蓝牙设备，同时打开自带的摄像头进行拍照，如果最后没有检测到蓝牙设备，就把照片存储在你所选择的目录，而且你自己可以打开 icloud 同步，那样就把照片马上送到了云端了，你就能知道谁动了你的Mac。</p><p>剪切板管理</p><p>BetterAndBetter 可以记住你最近使用过的十个剪切板内容，你还可以在工具箱模块增加三个固定的剪切板内容。</p><p>有两种触发模式：</p><p>在自动跳窗里，在跳出来的窗口里点击”✄”的图标；</p><p>在快捷键模块里有一个可以自定义的快捷键。</p><p>两种模式都会弹出一个剪切板管理的窗口。</p><p>也有两种执行方式：</p><p>用鼠标点击已经跳出窗口的任意一行；</p><p>按对应的数字键，调用固定的剪切板内容需要先按住Fn键，再按相应的数字键。</p><p>更多功能…..</p><p><a href="http://i.youku.com/i/UNjIyODg4NTU4NA==?spm=a2hzp.8244740.0.0" target="_blank" rel="noopener"><strong>点击这里官方视頻教程</strong></a><br>软件兼容性：</p><p>OS X 10.12或更高版本</p><p>软件语言：</p><p>多国语言（Chinese/English）</p><p>链接: <a href="https://pan.baidu.com/s/1KH1m4WsoRcRlwf9wQIPikA" target="_blank" rel="noopener">https://pan.baidu.com/s/1KH1m4WsoRcRlwf9wQIPikA</a> 提取码: yrtn</p><h4 id="SQLPro-Studio-For-Mac数据库客户端-V2019-05-10-00"><a href="#SQLPro-Studio-For-Mac数据库客户端-V2019-05-10-00" class="headerlink" title="SQLPro Studio For Mac数据库客户端 V2019.05.10.00"></a>SQLPro Studio For Mac数据库客户端 V2019.05.10.00</h4><p>软件介绍：</p><p>SQLPro Studio Mac版是一款Mac上优秀的数据库客户端，SQLPro Studio支持Postgres，MySQL，Microsoft SQL Server，Oracle等主流数据库，可以方便易用的管理数据库，很不错！</p><p>功能介绍：</p><p>　　功能特点</p><p>　　+智能感知/ SQL自动完成。</p><p>　　+语法与定制主题突出。</p><p>　　+基于选项卡的用户界面。</p><p>　　+快速访问表和列。</p><p>　　+SQL美化/格式化。</p><p>　　+支持的NTLMv2。</p><p>　　+支持Netbios的。</p><p>　　+主密码的支持，以提高安全性。</p><p>　　SQLPro Studio支持以下数据库服务器：</p><ul><li>MySQL的＆MariaDB的</li></ul><p>　　+PostgreSQL</p><p>　　+的Microsoft SQL Server（2005及以上）</p><p>　　+甲骨文（8i和以上）</p><p>软件兼容性：<br>OS X 10.12或更高版本</p><p>软件语言：</p><p>英文语言（English）</p><p>链接: <a href="https://pan.baidu.com/s/1haEku9VhVnpGsEM6pshVLg" target="_blank" rel="noopener">https://pan.baidu.com/s/1haEku9VhVnpGsEM6pshVLg</a> 提取码: zv8q</p><h4 id="NeatDownloadManager-For-Mac一款免费好用的多线程下载工具-V1-0"><a href="#NeatDownloadManager-For-Mac一款免费好用的多线程下载工具-V1-0" class="headerlink" title="NeatDownloadManager For Mac一款免费好用的多线程下载工具 V1.0"></a>NeatDownloadManager For Mac一款免费好用的多线程下载工具 V1.0</h4><p>软件介绍：</p><p>NeatDownloadManager Mac版是Mac平台上的一款免费好用的多线程下载工具。NeatDownloadManager Mac版使用动态分段算法下载文件，支持HTTP，HTTPS和FTP协议，HTTP和代理身份验证。</p><p>功能介绍：</p><p>NeatDownloadManager Mac版支持暂停/恢复功能以及更新过期下载连接，NeatDownloadManager Mac版具有浏览器扩展，可以用于随时捕获下载链接和从在线视频网站上下载视频。</p><p>软件兼容性：</p><p>OS X 10.12或更高版本</p><p>软件语言：</p><p>英文语言（English）</p><p>链接: <a href="https://pan.baidu.com/s/1zgSoATpucEGD0dQcZW4Ilg" target="_blank" rel="noopener">https://pan.baidu.com/s/1zgSoATpucEGD0dQcZW4Ilg</a> 提取码: 7yy6</p><h4 id="Dash-For-Mac编程文档管理工具-V4-6-3"><a href="#Dash-For-Mac编程文档管理工具-V4-6-3" class="headerlink" title="Dash For Mac编程文档管理工具 V4.6.3"></a>Dash For Mac编程文档管理工具 V4.6.3</h4><p>软件介绍：</p><p>Dash for mac是使用与Mac OS平台的软件编程文档管理工具，可以浏览API文档，以及管理代码片段工具。Dash自带了丰富的API文档，涉及各种主流的编程语言和框架。</p><p>功能介绍：</p><p>可以浏览API文档，以及管理代码片段工具。Dash自带了丰富的API文档，涉及各种主流的编程语言和框架，包括:ActionScript, Android, C++, CAppuccino, Cocos2D, Cocos3D, Corona, CSS, Django, Groovy, HTML, Java, JavaFX, JavaScript, jQuery, Kobold2D, Lua, MySQL, Node.js, Man Pages, Perl, PHP, Python, Ruby, Ruby on Rails, Scala, Sparrow, SQLite, Unity 3D, WordPress, XSLT, XUL。</p><p>利用Dash的代码片段管理功能，你可以把日常使用频繁的代码保存起来，然后为其设置一个独一无二的缩写，这样一来原本需要一遍又一遍的敲击键盘重复录入的繁琐工作，就可以交给Dash来轻松搞定。</p><p>软件兼容性：</p><p>OS X 10.12或更高版本</p><p>软件语言：</p><p>英文语言（English）</p><p>链接: <a href="https://pan.baidu.com/s/1BPILqRQPln1RdKIwr1LWDw" target="_blank" rel="noopener">https://pan.baidu.com/s/1BPILqRQPln1RdKIwr1LWDw</a> 提取码: vn26</p><h4 id="One-Switch-For-Mac集合一键切换系统各项功能工具-V1-3"><a href="#One-Switch-For-Mac集合一键切换系统各项功能工具-V1-3" class="headerlink" title="One Switch For Mac集合一键切换系统各项功能工具 V1.3"></a>One Switch For Mac集合一键切换系统各项功能工具 V1.3</h4><p>软件介绍：</p><p>One Switch是一款小巧的应用程序，旨在通过快速访问一些重要的交换机来提高您的效率。它可以从菜单栏打开，只需点击几下即可切换某些系统功能。</p><p>功能介绍：</p><p>隐藏桌面图标</p><p>只需单击一下即可隐藏凌乱的桌面。</p><p>暗模式</p><p>随时切换暗模式。</p><p>保持清醒</p><p>防止Mac睡眠或显示屏幕保护程序。</p><p>屏幕保护程序</p><p>有时您需要手动打开它。</p><p>AirPods</p><p>只需一秒钟即可将AirPods与Mac连接</p><p>软件截图：</p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/1554394646_one-switch_02_aif4of.jpg" srcset="/img/loading.gif" alt="img"></p><p>软件兼容性：</p><p>OS X 10.12或更高版本</p><p>软件语言：</p><p>多国语言（Chinese/English）</p><p>链接: <a href="https://pan.baidu.com/s/1Pagw3SkhRQ6epHiBnbr1NA" target="_blank" rel="noopener">https://pan.baidu.com/s/1Pagw3SkhRQ6epHiBnbr1NA</a> 提取码: kbdr</p><h4 id="Money-Pro-For-Mac强大的个人财务管理工具-V2-1-00"><a href="#Money-Pro-For-Mac强大的个人财务管理工具-V2-1-00" class="headerlink" title="Money Pro For Mac强大的个人财务管理工具 V2.1.00"></a>Money Pro For Mac强大的个人财务管理工具 V2.1.00</h4><p>软件介绍：</p><p>Money for mac是一款Mac平台上好用的个人财务管理工具，可以轻松的处理收入和消费的记录和核算。号称Mac平台上最好的个人理财软件。</p><p>功能介绍：</p><p>Money易于使用的个人全面财务管理应用。它将您的个人财务分类清晰管理，个人收入明细以完善的图表形式来表示。它旨在帮助你控制你的财务支出，在Mac上轻松方便的记帐还可与iphone同步。</p><p>　　一个漂亮的界面。</p><p>　　管理你不同的帐户来平衡支出。</p><p>　　智能调度。</p><p>　　提供多种高级财务报告。</p><p>　　简易的预算规划。</p><p>　　投资跟踪。</p><p>软件截图：</p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/ac9085_7a0598addb9449f88af591314de6fd48_mv2_guneqx.jpg" srcset="/img/loading.gif" alt="img"></p><p>软件兼容性：</p><p>OS X 10.12或更高版本</p><p>软件语言：</p><p>多国语言（Chinese/English）</p><p>链接: <a href="https://pan.baidu.com/s/1CLzuDlVzFgfxwysv0Hjkfw" target="_blank" rel="noopener">https://pan.baidu.com/s/1CLzuDlVzFgfxwysv0Hjkfw</a> 提取码: i2wk</p><h4 id="Fantastical-For-Mac优雅的日历工具-V2-5-9"><a href="#Fantastical-For-Mac优雅的日历工具-V2-5-9" class="headerlink" title="Fantastical For Mac优雅的日历工具 V2.5.9"></a>Fantastical For Mac优雅的日历工具 V2.5.9</h4><p>软件介绍：</p><p>Fantastical的设计者Flexibits结合了Fantastical的传统优势，实现了完整的桌面体验，给用户带来了全新的Fantastical 2。</p><p>功能介绍：</p><p>Fantastical的设计者Flexibits结合了Fantastical的传统优势，实现了完整的桌面体验，给用户带来了全新的Fantastical 2。Fantastical 2与前一代的最大区别在于，Fantastical 2现在作为一个完整的App可以让用户在独立窗口中查看全天、周、月、年界面。它的界面窗口使用了智能双面板设计，左侧显示正在运行的议程，右侧显示完整的日历。且Fantastical 2还具有自定义日历这一大特色，它还同时支持Mac上已建立的iCloud、Google以及Yahoo等的日历服务。</p><p>软件截图：</p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/1508348004_fantastical_01_oqiar5.jpg" srcset="/img/loading.gif" alt="img"></p><p>软件兼容性：</p><p>OS X 10.12或更高版本</p><p>软件语言：</p><p>英文语言（English）</p><p>链接: <a href="https://pan.baidu.com/s/1sSQkDDrZDI65_EAEw5TqDw" target="_blank" rel="noopener">https://pan.baidu.com/s/1sSQkDDrZDI65_EAEw5TqDw</a> 提取码: ksjx</p><h4 id="Amadeus-Pro-For-Mac强大的音乐编辑器-V2-6-0"><a href="#Amadeus-Pro-For-Mac强大的音乐编辑器-V2-6-0" class="headerlink" title="Amadeus Pro For Mac强大的音乐编辑器 V2.6.0"></a>Amadeus Pro For Mac强大的音乐编辑器 V2.6.0</h4><p>软件介绍：</p><p>Amadeus pro for mac是Mac os平台上的一款功能非常强大的Mac音乐编辑器，Amadeus Pro Version for mac是一款强大的多轨音频编辑器，支持多种格式，如MP3, AAC, Ogg Vorbis, Apple Lossless, AIFF, Wave等。</p><p>功能介绍：</p><p>　　【１】多轨编辑</p><p>　　Amadeus Pro是一个功能齐全的多轨音频编辑器。每首曲目可以分割成多个相互独立又容易拖曳的音频剪辑。此外，音频单位可以应用于实时的个别曲目，而无需任何破坏性编辑。</p><p>　　【２】批处理</p><p>　　如果你想转换成MP3文件，让Amadeus Pro来！强大的批量处理器不仅允许你转换大量任何格式的文件，还可以处理任何序列的音效。</p><p>　　【３】维修中心</p><p>　　方便的维修中心，可让您寻找并修复裂缝，只需一次简单的鼠标点击。此外，Amadeus Pro强大的降噪功能让您轻松地摆脱恼人的嘶嘶声。</p><p>　　【4】功能介绍</p><p>　将唱片或磁带转换到CD</p><p>　　Amadeus Pro的强大的去噪和修复功能，可以轻易将您最喜爱的录音或老唱片里恼人的嘶嘶声去除</p><p>　　分割成多个音轨录制</p><p>　　只需鼠标轻轻点击就能Amadeus Pro能将您的录音刻录到CD上</p><p>　　专用均衡器可以将声音做旧处理</p><p>　　【5】强大的批处理功能</p><p>　　支持转换为以下文件格式：AIFF, WAVE, Mp3, Ogg Vorbis, Mp4, M4a (AAC和Apple原声), FLAC, Apple CAF, QuickTime, SoundDesigner II, Next, Mp2 (只读)。</p><p>　　允许您申请任意序列的音响效果集合。</p><p>　　保留元数据（艺术家，歌名，专辑封面等）</p><p>　　【6】音效</p><p>　　全力支持两个音频单元和VST音频插件。扩展和定制功能能满足您的各种特殊要求。</p><p>　　建成程序最常用的效果（多波段图形均衡器，音量正常化，淡入/淡出，回音，速度和音调的变化等）</p><p>软件截图：</p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/1600x1000bb_tuzdk9.jpg" srcset="/img/loading.gif" alt="img"></p><p>软件兼容性：</p><p>OS X 10.12或更高版本</p><p>软件语言：</p><p>英文语言（English）</p><p>链接: <a href="https://pan.baidu.com/s/1HISK5fVwuKObgsJ9AxFztw" target="_blank" rel="noopener">https://pan.baidu.com/s/1HISK5fVwuKObgsJ9AxFztw</a> 提取码: 8vyk</p><h4 id="Drive-Scope-For-Mac硬盘检测分析工具-V1-2-5"><a href="#Drive-Scope-For-Mac硬盘检测分析工具-V1-2-5" class="headerlink" title="Drive Scope For Mac硬盘检测分析工具 V1.2.5"></a>Drive Scope For Mac硬盘检测分析工具 V1.2.5</h4><p>软件介绍：</p><p>Drive Scope是由Micromat发布的新程序，它被定义为“SMART市场最完整的实用程序”。它与SSD和HDD（但不是RAID）兼容，并收集和分析Mac驱动器的状态。</p><p>功能介绍：</p><p>Drive Scope硬盘驱动器（和固态硬盘）是Mac中最易出故障的组件。出于这个原因，事实上，驱动器制造商已经在驱动器中内置了自我监控，分析和报告技术。（a.k.a.SMART）大多数实用程序几乎不会泄露这些信息的表面，只需报告基本要素：通过或失败。通常，一旦发生整体故障，就没有足够的时间从驱动器获取重要数据。使用Drive Scope，您可以了解连接到Mac的大多数驱动器的运行状况。</p><p>Drive Health</p><p>使用Drive Scope，您可以看到Drive的健康状况的完整图片。有关驱动器正在监控的每个方面的详细信息可供查看。查看有助于驱动器运行状况的每个属性 – 详细信息。查看哪些属性导致整体故障，哪些属性仅仅是信息性的。</p><p>控制测试</p><p>通常，只要方便，驱动器就会检查它的SMART属性。使用Drive Scope，您可以手动触发驱动器的内部测试，以确保SMART数据尽可能地保持最新状态。检查驱动器上次使用驱动器测试日志进行测试的时间。</p><p>信息</p><p>首次打开Drive Scope时，将显示一个信息页面，其中汇总了有关驱动器的所有重要信息。请参阅Drive Scope的高级运行状况评估，以及遇到的错误数量，以及特定于驱动器的型号和容量信息。</p><p>软件截图：</p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/1524289844_drive-scope_01_dov15u.jpg" srcset="/img/loading.gif" alt="img"></p><p>软件兼容性：</p><p>OS X 10.12或更高版本</p><p>软件语言：</p><p>英文语言（English）</p><p>链接: <a href="https://pan.baidu.com/s/1DRBX83HI7lkXEfsxaLzm7Q" target="_blank" rel="noopener">https://pan.baidu.com/s/1DRBX83HI7lkXEfsxaLzm7Q</a> 提取码: 83as</p><h4 id="Downie-For-Mac在线视频下载超级工具-V3-7-3"><a href="#Downie-For-Mac在线视频下载超级工具-V3-7-3" class="headerlink" title="Downie For Mac在线视频下载超级工具 V3.7.3"></a>Downie For Mac在线视频下载超级工具 V3.7.3</h4><p>软件介绍：<br>Downie for Mac是一个超级易于使用的视频下载工具，支持YouTube，Vimeo 等超过170个视频网站。它不会因为大量的选项而让用户困扰 - 它使用起来非常简单。最新破解版，实测支持国内的优酷，爱奇艺和土豆以及国外的Youtube，如果你对视频下载有强烈的需求，那么Downie 是一个简单易用的视频下载工具。</p><p>功能介绍：<br>Downie for mac可能看起来像一个简单的拖放和拖放应用程序。它被设计为简单易用 - 只需拖放链接到Downie，它就会下载该网站上的视频。</p><p>软件截图：</p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/ac9085_471bf0b8fdda4ce6b3d61805fe535569_mv2_u5jxdy.png" srcset="/img/loading.gif" alt="img"></p><p>软件兼容性：<br>OS X 10.12或更高版本</p><p>软件语言：<br>多国语言（Chinese/English）</p><p>链接: <a href="https://pan.baidu.com/s/1M5so-5pc-oMS6SsrlSowow" target="_blank" rel="noopener">https://pan.baidu.com/s/1M5so-5pc-oMS6SsrlSowow</a> 提取码: w9mk</p><h4 id="Squash-For-Mac小巧实用的是图片压缩工具-V2-0-4"><a href="#Squash-For-Mac小巧实用的是图片压缩工具-V2-0-4" class="headerlink" title="Squash For Mac小巧实用的是图片压缩工具 V2.0.4"></a>Squash For Mac小巧实用的是图片压缩工具 V2.0.4</h4><p>软件介绍：</p><p>Squash是一款小巧的图片压缩软件，在不影响图片质量的前提下，可以大大的减少图片的大小。可以进行动态图片压缩、jpg图片压缩、PNG图片压缩、GIF动态图片压缩，小巧实用的一款软件！</p><p>功能介绍：</p><p>Squash (was Squish) 是降低文件大小压缩您的图片一个超级简单的应用程序！不要失去质量，或最终以颗粒状或可怕的图像。把保持他们现有的分辨率和质量，只是减少文件大小！无论你的理由，挤是伟大的优化图像：</p><p>发送电子邮件附件减少文件大小。</p><p>通过优化计算机上的大型照片集节省空间。</p><p>优化网站和电子邮件活动的形象，使他们立即加载在线。</p><p>缓慢的互联网？在挤滴图像保存时间上传到脸谱网或推特！</p><p>软件兼容性：</p><p>OS X 10.12或更高版本</p><p>软件语言：</p><p>英文语言（English）</p><p>链接: <a href="https://pan.baidu.com/s/1o8RjKaEHA3PmSxvSvaADUA" target="_blank" rel="noopener">https://pan.baidu.com/s/1o8RjKaEHA3PmSxvSvaADUA</a> 提取码: 51es</p><h4 id="PDF-Squeezer-For-Mac压缩工具-V3-10-3"><a href="#PDF-Squeezer-For-Mac压缩工具-V3-10-3" class="headerlink" title="PDF Squeezer For Mac压缩工具 V3.10.3"></a>PDF Squeezer For Mac压缩工具 V3.10.3</h4><p>软件介绍：</p><p>PDF Squeezer for Mac是Mac OS平台上的一款 PDF 简易压缩工具，在PDF文件过大的时候，PDF Squeezer 可以移除不相干的信息和压缩图像的方式来缩减PDF文件的大小。可以帮助您节省带宽费用、数字存储费用以及网络传输时间。</p><p>功能介绍：</p><p>轻轻松松将 PDF 文件拖拽至应用程序窗口或图标即可</p><p>选择预设滤器，亦可以创建自定义滤器</p><p>批量压缩多个文件</p><p>支持受密码保护的 PDF 文件</p><p>一键压缩’自动压缩并存储</p><p>软件截图：</p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/ac9085_f11f8cd687e245a18d229803ac0b8557_mv2_tf2ibs.jpg" srcset="/img/loading.gif" alt="img"></p><p>测试系统语言：</p><p>macOS Sierra/macOS High Sierra简体中文</p><p>软件语言：</p><p>多国语言（Chinese/English）</p><p>链接: <a href="https://pan.baidu.com/s/1dgGOwwlxiW5GC6ftsMHuNw" target="_blank" rel="noopener">https://pan.baidu.com/s/1dgGOwwlxiW5GC6ftsMHuNw</a> 提取码: rnd3</p><h4 id="NXPowerLite-Desktop-For-Mac多格式文档压缩工具-V8-0-7"><a href="#NXPowerLite-Desktop-For-Mac多格式文档压缩工具-V8-0-7" class="headerlink" title="NXPowerLite Desktop For Mac多格式文档压缩工具 V8.0.7"></a>NXPowerLite Desktop For Mac多格式文档压缩工具 V8.0.7</h4><p>软件介绍：</p><p>NXPowerLite将压缩PDF，JPEG，Microsoft PowerPoint和Word文件，简单有效，同时很容易作为电子邮件附件。</p><p>功能介绍：</p><p>NXPowerLite Desktop for Mac是一款文档压缩工具，可以简单有效地压缩PDF，JPEG，Microsoft PowerPoint和Word文件，使它们易于以附件形式发送电子邮件。对于压缩不好的文件尤其有效。优化的文件保持相同的格式 – PDF仍然是一个PDF。它看起来和感觉与原始相同，只是小得多。您可以通过选择文件并使用Finder中的“优化和电子邮件”来优化和自动将文件附加到新电子邮件中。Mac或Windows注册密钥的一个关键用于NXPowerLite桌面将与Mac或Windows版本兼容，所以如果您切换平台，您可以继续使用NXPowerLite。 这也意味着，如果您购买多用户许可证，则无需事先指定每个平台的数量。</p><p>软件截图：</p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/nxpowerlite-mac-8-main-dialog_c3iffz.png" srcset="/img/loading.gif" alt="img"></p><p>软件兼容性：</p><p>OS X 10.12或更高版本</p><p>软件语言：</p><p>英文语言（English）</p><p>链接: <a href="https://pan.baidu.com/s/1KHvef1XlAt6RlQjrPvwwHg" target="_blank" rel="noopener">https://pan.baidu.com/s/1KHvef1XlAt6RlQjrPvwwHg</a> 提取码: 5mig</p><h4 id="UninstallPKG-For-Mac实用的PKG完全卸载工具-V1-1-6"><a href="#UninstallPKG-For-Mac实用的PKG完全卸载工具-V1-1-6" class="headerlink" title="UninstallPKG For Mac实用的PKG完全卸载工具 V1.1.6"></a>UninstallPKG For Mac实用的PKG完全卸载工具 V1.1.6</h4><p>软件介绍：</p><p>UninstallPKG是一款Mac上实用的PKG完全卸载工具，顾名思义，这是一款PKG安装包卸载工具，可以搜索扫描 Mac 上安装的所有 PKG 程序，然后完全卸载删除，节省磁盘空间，比如 Office for Mac 等软件就可以用这款软件帮助快速完全的卸载，非常的方便！</p><p>功能介绍：</p><p>UninstallPKG允许您完全删除所谓的“软件包”(文件扩展名，pkg)和所有从您的Mac上安装的内容，它可以通过删除不需要的功能，例如未使用的打印机驱动程序，或者完全删除您不再使用的应用程序来回收宝贵的磁盘空间。卸载程序还可以通过删除已经部分删除的应用程序中的遗留文件，从而保持Mac的干净。它可以一次性删除Office 2011所有37290个文件，或者完全删除Java或Flash插件之类的东西。它还可以在卸载应用程序之后，将其从Dock和LoginItems目录中删除，并删除所生成的文件(首选项等)。</p><p>软件兼容性：</p><p>OS X 10.12或更高版本</p><p>软件语言：</p><p>多国语言（Chinese/English）</p><p>下载破解版本：</p><p>链接: <a href="https://pan.baidu.com/s/1edSKHjQTQu99svPMKCtAMA" target="_blank" rel="noopener">https://pan.baidu.com/s/1edSKHjQTQu99svPMKCtAMA</a> 提取码: 17kx</p><h4 id="Navicat-Premium-For-Mac强大的数据库管理工具-V12-1-22"><a href="#Navicat-Premium-For-Mac强大的数据库管理工具-V12-1-22" class="headerlink" title="Navicat Premium For Mac强大的数据库管理工具 V12.1.22"></a>Navicat Premium For Mac强大的数据库管理工具 V12.1.22</h4><p>软件介绍：</p><p>Navicat是最优秀的数据库图形化管理客户端，支持MySQL、SQL Server、SQLite、Oracle 和 PostgreSQL 等数据库，支持数据库建模，正向和反向工程，数据同步等功能，而Premium版本是包含了Navicat所有功能的最强大版本，是首选的数据库客户端工具！</p><p>功能介绍：</p><p>Navicat Premium 结合了其他 Navicat 成员的功能。有了不同数据库类型的连接能力，Navicat Premium 支持在 MySQL、SQL Server、SQLite、Oracle 及 PostgreSQL 之间传输数据。包括存储过程，事件，触发器，函数，视图等。</p><p>Navicat Premium 适用于三种平台 - Microsoft Windows、Mac OS X 及 Linux。它可以让用户连接本机或远程服务器、提供一些实用的数据库工具如数据模型工具、数据同步、结构同步、导入、导出、备份、还原及报表以协助管理数据。</p><p>软件兼容性：</p><p>OS X 10.12或更高版本</p><p>软件语言：</p><p>英文语言（English）</p><p>链接: <a href="https://pan.baidu.com/s/1DgDwQmM9Sixmw9vlQPUPcw" target="_blank" rel="noopener">https://pan.baidu.com/s/1DgDwQmM9Sixmw9vlQPUPcw</a> 提取码: 899w</p><h4 id="Axure-RP-9-Pro-Edition-For-Mac交互式原型设计工具-V9-0-0-3650"><a href="#Axure-RP-9-Pro-Edition-For-Mac交互式原型设计工具-V9-0-0-3650" class="headerlink" title="Axure RP 9 Pro Edition For Mac交互式原型设计工具 V9.0.0.3650"></a>Axure RP 9 Pro Edition For Mac交互式原型设计工具 V9.0.0.3650</h4><p>软件介绍：</p><p>Axure RP 9 for Mac破解版是专为快速原型设计而生，它可以辅助产品经理快速设计完整的产品原型，并结合批注，说明以及流程图，框架图等元素将产品完整地表述给各方面设计人员，如UI 、UE等等，并在讨论中不断完善。</p><p>功能介绍：</p><p>强大的原型，无需编码</p><p>使用条件逻辑，动态内容，动画，数学函数和数据驱动的交互创建简单的点击图或功能强大的丰富原型，无需编写任何代码。</p><p>很容易分享单击一个按钮，axure rp将您的图表和原型发布到云端或本地的 Axure Share 。只需发送一个链接（和密码），其他人就可以在浏览器中查看您的项目。在移动设备上，使用适用于iOS和Android的浏览器或Axure Share App。</p><p>DIAGRAMMING +文档创建流程图，线框，模型，用户旅程，角色，创意板等。从内置或自定义库中快速拖放元素以创建图表。然后，使用填充，渐变，线条样式和文本格式设置样式。</p><p>注释您的图表和原型以指定功能，跟踪任务或存储项目信息。将您的笔记整理到不同的受众群体的不同字段中。选择要在HTML中或在包含屏幕截图的自动生成的Word文档中显示哪些注释。</p><p>更轻松的团队协作axure rp允许多人同时处理同一文件，使您的团队更容易协同工作。在Axure共享或SVN上创建团队项目，并使用签入和签出系统来管理更改。团队项目还会记录每次签到时的备注更改历史记录。</p><p>软件兼容性：</p><p>OS X 10.12或更高版本</p><p>软件语言：</p><p>多国语言（Chinese/English）</p><p>下载破解版本：</p><p>链接: <a href="https://pan.baidu.com/s/1dLfSxialAvRSk4tXlb-a0g" target="_blank" rel="noopener">https://pan.baidu.com/s/1dLfSxialAvRSk4tXlb-a0g</a> 提取码: d52e</p><h4 id="Polarr-Photo-Editor-Pro-For-Mac泼辣修图-V5-5-1"><a href="#Polarr-Photo-Editor-Pro-For-Mac泼辣修图-V5-5-1" class="headerlink" title="Polarr Photo Editor Pro For Mac泼辣修图 V5.5.1"></a>Polarr Photo Editor Pro For Mac泼辣修图 V5.5.1</h4><p>软件介绍：</p><p>泼辣修图Mac版是一款Mac OS平台上的修图软件，泼辣修图本身是一款非常出名的在线修图工具，现在泼辣修图继泼辣修图移动端之后，推出了泼辣修图Mac版。</p><p>功能介绍：</p><p>泼辣修图 Mac 版体积之小令人惊讶，仅有 4MB 的大小，却可并发出超高的性能表现，支持JPEG、带透明效果的PNG，以及大多数RAW图片，RAW图片最大可支持 4200 万像素，这样的表现还不会占用系统太多的硬件资源，而且耗电量也不高。</p><p>软件内核采用了 Webkit，方便用户对操作窗口进行随意调整，而且修图中支持 Trackpad 手势缩放控制。整个界面设计和功能都和 iOS 版一致，但并没有像 iOS 版那样提供滤镜内购包，如果你想使用这款客户端，就必须一次性买单，所有的滤镜包都会收入囊中，我觉得开发者能在这一点上再灵活一些，将滤镜包做成内购形式会更得用户支持！</p><p>使用泼辣修图你不必像 Pixelmator 那样费劲周转，就像妹子们用的美图秀秀一样，软件所有的功能都会修图而生，你可以在最短时间内修出一张完美的图片。</p><p>软件兼容性：<br>OS X 10.13或更高版本</p><p>软件语言：</p><p>多国语言（Chinese/English）</p><h4 id="Aimersoft-Video-Converter-Ultimate-For-Mac全能视频转换工具-V11-0-1-2"><a href="#Aimersoft-Video-Converter-Ultimate-For-Mac全能视频转换工具-V11-0-1-2" class="headerlink" title="Aimersoft Video Converter Ultimate For Mac全能视频转换工具 V11.0.1.2"></a>Aimersoft Video Converter Ultimate For Mac全能视频转换工具 V11.0.1.2</h4><p>软件介绍：<br>Aimersoft Video Converter Ultimate for Mac是一款Mac OS X下时尚、直观、非常迅速的一体化视频/音频转换器，DVD截取器，DVD刻录机，网页视频下载器和设备转化系统。</p><p>功能介绍：<br>1、轻松下载，编辑和转化任何规格和高清视频格式<br>2、在保持DVD原有质量的情况下截取，复制，编辑和刻录DVD<br>3、将您喜欢的音频从视频和DVD中截取出来并进行编辑和格式转换<br>4、将影音文件保存转移到各种可携式装置内，包括IPhone, Android等<br>5、将AVI,MP4,MOV,M4V,MKV等格式的2D视频转换为3D，打造属于自己的3D世界。</p><p>软件兼容性：<br>OS X 10.12或更高版本</p><p>软件语言：</p><p>英文语言（English）</p><p>链接: <a href="https://pan.baidu.com/s/1eb6ZoGjUrxrjVd9K1iI76Q" target="_blank" rel="noopener">https://pan.baidu.com/s/1eb6ZoGjUrxrjVd9K1iI76Q</a> 提取码: ettx</p><h4 id="Bettertouchtool-For-Mac鼠标Magic-Mouse增强工具-V3-02"><a href="#Bettertouchtool-For-Mac鼠标Magic-Mouse增强工具-V3-02" class="headerlink" title="Bettertouchtool For Mac鼠标Magic Mouse增强工具 V3.02"></a>Bettertouchtool For Mac鼠标Magic Mouse增强工具 V3.02</h4><p>软件介绍：</p><p>Bettertouchtool for mac 这是专为Mac用户开发的 Magic Mouse 鼠标功能增强制作的软件。你可以通过 bettertouchtool for mac 对你的 Magic Mouse 设置多种手势功能，还可以对单个或者全局的软件进行操作功能定制。总体来说是一款非常强大的Magic Mouse 辅助软件。</p><p>功能介绍：</p><p>1.可实现不用点击而是触摸的方式操作。</p><p>2.支持多种手势，1个，2个，3个手指的操作。</p><p>3.支持缩放操作。</p><p>4.可以实现对全局和单个软件的操作定制。</p><p>你还可以对TouchPad可以进行相同的设置。也可以调节鼠标移动缓慢的问题。实现控制之后你会发现 Magic Mouse 的功能比MouseZoom要强大的多。</p><p>软件兼容性：</p><p>OS X 10.12或更高版本</p><p>软件语言：</p><p>英文语言（English）</p><p>链接: <a href="https://pan.baidu.com/s/1RdJwPUNyk0CivSk64mHcXw" target="_blank" rel="noopener">https://pan.baidu.com/s/1RdJwPUNyk0CivSk64mHcXw</a> 提取码: xe4s</p><h4 id="CleanMyMac-X-For-Mac强大实用的系统清理工具-V4-4-2"><a href="#CleanMyMac-X-For-Mac强大实用的系统清理工具-V4-4-2" class="headerlink" title="CleanMyMac X For Mac强大实用的系统清理工具 V4.4.2"></a>CleanMyMac X For Mac强大实用的系统清理工具 V4.4.2</h4><p>软件介绍：</p><p>CleanMyMac 系列最新X测试版本，CleanMyMac应该是世界上最容易使用且最强大的Mac实用系统清理工具，CleanMyMac X是一款集所有功能于一身的先进程序卸载清理器，只需两个简单步骤就可以把系统里那些乱七八糟的无用文件统统清理掉，节省宝贵的磁盘空间。</p><p>功能介绍：</p><p>作为CleanMyMac的升级版，它可以流畅地与系统性能相结合，静默清理、记录更新、清洁缓存、快速和安全删除、卸载应用程序和清空回收站等重要功能。节省硬盘空间，提高电脑的速度，CleanMyMac 3会使您的Mac更出色</p><p>点击右下角的“Scan”按钮，CleanMyMac将对整个系统进行扫描.</p><p>Caches：系统缓存文件，清理缓存文件后应用程序加载速度将会变得很快。</p><p>Logs：系统和应用程序的日志文件.</p><p>Language Files：通过此项你可以把你应用程序里面不常用的语言全都给删除，在右下角可以选择你需要删除好的语言。</p><p>CleanMyMac为你喜欢的东西腾出空间。CleanMyMac拥有一系列巧妙的新功能，它可以让你安全、智能地扫描和清理整个系统，删除大量未使用的文件，缩小iPhoto库的大小，卸载不需要的应用程序，或者修复那些开始不正常工作的应用程序，从一个地方管理所有的扩展，并做更多的工作–所有这些都来自一个新设计的漂亮简单的界面。</p><p>链接:<a href="https://pan.baidu.com/s/1XUY3etjrfcdd0KJ-J6EMfA" target="_blank" rel="noopener">https://pan.baidu.com/s/1XUY3etjrfcdd0KJ-J6EMfA</a>  密码:avj7</p><h4 id="OnyX-For-Mac系统维护优化工具-V3-6-4"><a href="#OnyX-For-Mac系统维护优化工具-V3-6-4" class="headerlink" title="OnyX For Mac系统维护优化工具 V3.6.4"></a>OnyX For Mac系统维护优化工具 V3.6.4</h4><p>软件介绍：<br>OnyX 可以帮助你检视启动的磁盘信息和文件系统的结构信息，而且可以运行很多的系统维护子程序，比如配置Finder,Dock, Dashboard, Exposé, Safari, Login window中的一些隐藏的功能。</p><p>功能介绍：<br>OnyX 是一种多功能实用的OS X，它允许您验证启动盘的系统文件的结构，运行系统维护的相关任务，配置Finder，隐藏参数对接，聚光灯，和一些苹果自己的应用程序，删除缓存，删除一定数量文件和文件夹可能成为累赘，和更多。</p><p>软件兼容性：<br>OS X 10.13或更高版本</p><p>软件语言：<br>多国语言（Chinese/English）</p><p>链接: <a href="https://pan.baidu.com/s/1Oqam_kPoS0MJOl-JawL72w" target="_blank" rel="noopener">https://pan.baidu.com/s/1Oqam_kPoS0MJOl-JawL72w</a> 提取码: mcta</p><h4 id="macOS-Mojave-下的破解失效或崩溃的解决方法"><a href="#macOS-Mojave-下的破解失效或崩溃的解决方法" class="headerlink" title="macOS Mojave 下的破解失效或崩溃的解决方法"></a>macOS Mojave 下的破解失效或崩溃的解决方法</h4><p><strong>Mac**</strong>开启关闭<strong><strong>SIP</strong></strong>（系统完整性保护）**</p><p><strong>1. 如何查看SIP状态</strong></p><p>在终端中输入csrutil status，就可以看到是enabled还是disabled。（只要显示 disabled 说明已经禁用SIP）</p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/001_fa6bge.png" srcset="/img/loading.gif" alt=""></p><p><strong>2. 如何关闭SIP</strong></p><p>a 重启MAC，按住cmd+R直到屏幕上出现苹果的标志和进度条，进入Recovery模式</p><p>b 在屏幕最上方的工具栏找到实用工具（左数第3个），打开终端，输入：csrutil disable</p><p>c 关掉终端，重启MAC</p><p><strong>3. 如何开启SIP</strong></p><p>与关闭的步骤类似，只是在2b中输入csrutil enable 即可</p><h4 id="10个-macOS-小技巧"><a href="#10个-macOS-小技巧" class="headerlink" title="10个 macOS 小技巧"></a>10个 macOS 小技巧</h4><p><strong>1.教你打出苹果logo</strong></p><p>快捷键：option+shift+K</p><p><strong>2.如何设置网红屏保</strong></p><p>站内搜索 fliqlo,下载后双击打开即可，记得设置「开机前闲置时间」哦，如果设置为两分钟，那么你的电脑在没有任何操作的情况下，两分钟之后屏保就会自动显示了。</p><p><strong>3.快速清除废纸篓垃圾</strong></p><p>使用下面的快捷键可以让你不用打开废纸篓，也不用要求你是否确认删除，直接可将废纸篓垃圾清空。</p><p>快捷键:「⌘+Option+Shift+Delete」</p><p><strong>4.更精确的调节音量和亮度</strong></p><p>Mac上的调节音量或者亮度只有16格，精确度不够高，有时调节一个单位还是不能满足我们的需求，这时候我们就需要更高精度的调节。</p><p>快捷键：Option + Shift + 音量键（亮度键）</p><p><strong>5.更精确的复制内容</strong></p><p>如果你用 Mac 自带的预览复制 PDF 中的内容时，它会选中你鼠标开始到结束之间的所有内容，但是对于表格来说，我们有时不必要复制所有内容，这时我们可以按住「option」键再选择所需的内容。</p><p><strong>6.移动或删除菜单栏图标</strong></p><p>如果你的状态菜单栏的图标比较多的话，想要删除的话怎么办呢？这时可以按住「command」键，再拖动相应的图标，移出菜单栏即可删除。</p><p><strong>7.放大你的屏幕</strong></p><p>设置：点击左上角苹果logo「」-&gt;「系统偏好设置」-&gt;「辅助功能」-&gt;选择「缩放」-&gt;勾选「配合修饰键使用滚动手势来缩放」</p><p>使用：按住「control」键，两个手指在触摸板上向上或者向下移动即可进行放大或缩小</p><p><strong>8.你可能不知道的截屏技巧</strong></p><p>全屏截图：shift+command+3</p><p>部分截屏：shift+command+4</p><p>下面才是关键：部分截屏时配合空格还有两种截屏方式</p><p>1.shift+command+4+「空格」 选取固定窗口</p><p>2.shift+command+4后框选后按住「空格」键拖动选框 自定义选择窗口</p><p><strong>9.开启分屏显示功能</strong></p><p>有时候需要两个窗口同时打开协同工作时，这个功能就非常的有帮助了，</p><p>你只需要三指按压软件窗口的最大化按钮直到出现分屏即可。</p><p><strong>10.屏幕太小？那就多开几个窗口</strong></p><p>一个屏幕不够用的时候，我们可以再新建几个空白屏幕，这时我们只需四指在触摸板向上滑动，点击最右侧的「+号」即可。删除的话只需将鼠标移到每一个屏幕上，出现「叉号」并点击删除即可。</p><h4 id="Mac-软件安装问题解决"><a href="#Mac-软件安装问题解决" class="headerlink" title="Mac 软件安装问题解决"></a>Mac 软件安装问题解决</h4><p>在 Mac 上安装非 App Store 软件时，可能会遇到一些这样或那样的问题，这篇文章就 Mac 从 .dmg 安装软件时可能遇到的问题提一些解决方法。</p><p><strong>状况一.双击 .dmg 安装软件出现以下情况：</strong></p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/2_qc1omp.jpg" srcset="/img/loading.gif" alt="img"></p><p>解决方法：这种情况可能是 .dmg 文件在下载过程中出现了未知错误或者没有下载完全，解决方法是重新下载 .dmg 安装包。</p><p><strong>状况二.双击 .dmg 安装软件出现：打不开“XXXX”，因为它来自身份不明的开发者。</strong></p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/3_m8shm7.jpg" srcset="/img/loading.gif" alt="img"></p><p><strong>或者，“XXXX”已损坏，打不开。您应该将它移到废纸篓。</strong></p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/4_ihdffi.jpg" srcset="/img/loading.gif" alt="img"></p><p>解决方法：打开 系统偏好设置 — 安全性与隐私 — 通用</p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/5_fx56mv.jpg" srcset="/img/loading.gif" alt="img"></p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/6_c4lp6p.jpg" srcset="/img/loading.gif" alt="img"></p><p>点按锁按钮以进行更改（会要求输入密码），</p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/7_n9c1oc.jpg" srcset="/img/loading.gif" alt="img"></p><p>在 “允许从以下位置下载应用：” 选择 “任何来源” ，</p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/8_tven3i.jpg" srcset="/img/loading.gif" alt="img"></p><p>最后将锁按钮锁上。</p><p>有的 Mac 在 “允许从以下位置下载的应用” 并没有 “任何来源” 这个选项，</p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/10_gnobok.jpg" srcset="/img/loading.gif" alt="img"></p><p>这就需要多进行一个步骤：</p><p>找到“终端”这个应用并打开，将 sudo spctl –master-disable 这句命令复制并粘贴到终端，回车，输入密码（用户开机密码，密码是不显示的，输入完回车即可）。</p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/13_n4c0tv.jpg" srcset="/img/loading.gif" alt="img"></p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/11_amxk2p.jpg" srcset="/img/loading.gif" alt="img"></p><p>再打开 系统偏好设置 — 安全性与隐私 — 通用 — 允许从以下位置下载的应用 ，系统已经选择 “任何来源” 选项。</p><p>对于 “XXXX”已损坏，打不开。您应该将它移到废纸篓。 这个问题，还有一个解决方法，不过不如上面这个彻底，还是介绍一下。</p><p>将 <code>xattr -r -d com.apple.quarantine</code> 命令复制粘贴到终端，同时在一旁打开 访达（Finder），在边栏里选择应用程序，然后将出现这个问题的应用往终端里拖拽，释放鼠标，回车，问题解决。</p><p><strong>欢迎关注微信公众号 ：</strong></p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006y8mN6gy1g7d3llw1nkj30b40b4wee.jpg" srcset="/img/loading.gif" alt="欢迎关注公众号" style="width: 100px" />]]></content>
    
    
    <categories>
      
      <category>Other</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Other</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>接口文档实例</title>
    <link href="/2019/06/10/%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3%E5%AE%9E%E4%BE%8B/"/>
    <url>/2019/06/10/%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3%E5%AE%9E%E4%BE%8B/</url>
    
    <content type="html"><![CDATA[<p><strong>接口文档实例</strong></p><p><strong>简介</strong>：<p>接口文档实例</p></p><p><strong>HOST</strong>: 192.168.1.250:9527</p><p><strong>联系人</strong>: alterem</p><p><strong>Version</strong>: 1.0.1-SNAPSHOT</p><p><strong>接口路径</strong>：/quartz/v2/api-docs</p><h1 id="sys-job-controller"><a href="#sys-job-controller" class="headerlink" title="sys-job-controller"></a>sys-job-controller</h1><p>[TOC]</p><h2 id="jobSave"><a href="#jobSave" class="headerlink" title="jobSave"></a>jobSave</h2><p><strong>接口描述</strong>:新增保存调度</p><p><strong>接口地址</strong>:<code>/quartz/job/add</code></p><p><strong>请求方式</strong>：<code>POST</code></p><p><strong>consumes</strong>:<code>[&quot;application/json&quot;]</code></p><p><strong>produces</strong>:<code>[&quot;*/*&quot;]</code></p><p><strong>请求参数</strong>：</p><table><thead><tr><th>参数名称</th><th>参数说明</th><th>in</th><th>是否必须</th><th>数据类型</th><th>schema</th></tr></thead><tbody><tr><td>beginTime</td><td></td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>concurrent</td><td>并发执行：0=允许,1=禁止</td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>createBy</td><td></td><td>query</td><td>false</td><td>integer</td><td></td></tr><tr><td>createTime</td><td></td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>cronExpression</td><td>执行表达式</td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>endTime</td><td></td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>invokeTarget</td><td>调用目标字符串</td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>jobGroup</td><td>任务组名</td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>jobId</td><td>任务序号</td><td>query</td><td>false</td><td>integer</td><td></td></tr><tr><td>jobName</td><td>任务名称</td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>misfirePolicy</td><td>计划策略：0=默认,1=立即触发执行,2=触发一次执行,3=不触发立即执行</td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>nextValidTime</td><td></td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>params</td><td></td><td>query</td><td>false</td><td>object</td><td></td></tr><tr><td>remark</td><td></td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>searchValue</td><td></td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>status</td><td>任务状态：0=正常,1=暂停</td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>tenantId</td><td></td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>updateBy</td><td></td><td>query</td><td>false</td><td>integer</td><td></td></tr><tr><td>updateTime</td><td></td><td>query</td><td>false</td><td>string</td><td></td></tr></tbody></table><p><strong>响应示例</strong>:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json"><br><br></code></pre></td></tr></table></figure><p><strong>响应参数</strong>:</p><p>暂无</p><p><strong>响应状态</strong>:</p><table><thead><tr><th>状态码</th><th>说明</th><th>schema</th></tr></thead><tbody><tr><td>200</td><td>OK</td><td></td></tr><tr><td>201</td><td>Created</td><td></td></tr><tr><td>401</td><td>Unauthorized</td><td></td></tr><tr><td>403</td><td>Forbidden</td><td></td></tr><tr><td>404</td><td>Not Found</td><td></td></tr><tr><td>## jobChangeStatus</td><td></td><td></td></tr></tbody></table><p><strong>接口描述</strong>:按照id修改调度状态</p><p><strong>接口地址</strong>:<code>/quartz/job/changeStatus</code></p><p><strong>请求方式</strong>：<code>POST</code></p><p><strong>consumes</strong>:<code>[&quot;application/json&quot;]</code></p><p><strong>produces</strong>:<code>[&quot;*/*&quot;]</code></p><p><strong>请求参数</strong>：</p><table><thead><tr><th>参数名称</th><th>参数说明</th><th>in</th><th>是否必须</th><th>数据类型</th><th>schema</th></tr></thead><tbody><tr><td>beginTime</td><td></td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>concurrent</td><td>并发执行：0=允许,1=禁止</td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>createBy</td><td></td><td>query</td><td>false</td><td>integer</td><td></td></tr><tr><td>createTime</td><td></td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>cronExpression</td><td>执行表达式</td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>endTime</td><td></td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>invokeTarget</td><td>调用目标字符串</td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>jobGroup</td><td>任务组名</td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>jobId</td><td></td><td>query</td><td>true</td><td>string</td><td></td></tr><tr><td>jobName</td><td>任务名称</td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>misfirePolicy</td><td>计划策略：0=默认,1=立即触发执行,2=触发一次执行,3=不触发立即执行</td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>nextValidTime</td><td></td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>params</td><td></td><td>query</td><td>false</td><td>object</td><td></td></tr><tr><td>remark</td><td></td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>searchValue</td><td></td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>status</td><td>任务状态：0=正常,1=暂停</td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>tenantId</td><td></td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>updateBy</td><td></td><td>query</td><td>false</td><td>integer</td><td></td></tr><tr><td>updateTime</td><td></td><td>query</td><td>false</td><td>string</td><td></td></tr></tbody></table><p><strong>响应示例</strong>:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json"><br><br></code></pre></td></tr></table></figure><p><strong>响应参数</strong>:</p><p>暂无</p><p><strong>响应状态</strong>:</p><table><thead><tr><th>状态码</th><th>说明</th><th>schema</th></tr></thead><tbody><tr><td>200</td><td>OK</td><td></td></tr><tr><td>201</td><td>Created</td><td></td></tr><tr><td>401</td><td>Unauthorized</td><td></td></tr><tr><td>403</td><td>Forbidden</td><td></td></tr><tr><td>404</td><td>Not Found</td><td></td></tr><tr><td>## jobCheckCronExpressionIsValid</td><td></td><td></td></tr></tbody></table><p><strong>接口描述</strong>:校验cron表达式是否有效</p><p><strong>接口地址</strong>:<code>/quartz/job/checkCronExpressionIsValid</code></p><p><strong>请求方式</strong>：<code>POST</code></p><p><strong>consumes</strong>:<code>[&quot;application/json&quot;]</code></p><p><strong>produces</strong>:<code>[&quot;*/*&quot;]</code></p><p><strong>请求示例</strong>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br><span class="hljs-attr">"beginTime"</span>: <span class="hljs-string">""</span>,<br><span class="hljs-attr">"concurrent"</span>: <span class="hljs-string">""</span>,<br><span class="hljs-attr">"createBy"</span>: <span class="hljs-number">0</span>,<br><span class="hljs-attr">"createTime"</span>: <span class="hljs-string">""</span>,<br><span class="hljs-attr">"cronExpression"</span>: <span class="hljs-string">""</span>,<br><span class="hljs-attr">"endTime"</span>: <span class="hljs-string">""</span>,<br><span class="hljs-attr">"invokeTarget"</span>: <span class="hljs-string">""</span>,<br><span class="hljs-attr">"jobGroup"</span>: <span class="hljs-string">""</span>,<br><span class="hljs-attr">"jobId"</span>: <span class="hljs-number">0</span>,<br><span class="hljs-attr">"jobName"</span>: <span class="hljs-string">""</span>,<br><span class="hljs-attr">"misfirePolicy"</span>: <span class="hljs-string">""</span>,<br><span class="hljs-attr">"nextValidTime"</span>: <span class="hljs-string">""</span>,<br><span class="hljs-attr">"params"</span>: &#123;&#125;,<br><span class="hljs-attr">"remark"</span>: <span class="hljs-string">""</span>,<br><span class="hljs-attr">"searchValue"</span>: <span class="hljs-string">""</span>,<br><span class="hljs-attr">"status"</span>: <span class="hljs-string">""</span>,<br><span class="hljs-attr">"tenantId"</span>: <span class="hljs-string">""</span>,<br><span class="hljs-attr">"updateBy"</span>: <span class="hljs-number">0</span>,<br><span class="hljs-attr">"updateTime"</span>: <span class="hljs-string">""</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>请求参数</strong>：</p><table><thead><tr><th>参数名称</th><th>参数说明</th><th>in</th><th>是否必须</th><th>数据类型</th><th>schema</th></tr></thead><tbody><tr><td>job</td><td>job</td><td>body</td><td>true</td><td>SysJob</td><td>SysJob</td></tr></tbody></table><p><strong>schema属性说明</strong></p><p><strong>SysJob</strong></p><table><thead><tr><th>参数名称</th><th>参数说明</th><th>in</th><th>是否必须</th><th>数据类型</th><th>schema</th></tr></thead><tbody><tr><td>beginTime</td><td></td><td>body</td><td>false</td><td>string</td><td></td></tr><tr><td>concurrent</td><td></td><td>body</td><td>false</td><td>string</td><td></td></tr><tr><td>createBy</td><td></td><td>body</td><td>false</td><td>integer(int64)</td><td></td></tr><tr><td>createTime</td><td></td><td>body</td><td>false</td><td>string(date-time)</td><td></td></tr><tr><td>cronExpression</td><td></td><td>body</td><td>false</td><td>string</td><td></td></tr><tr><td>endTime</td><td></td><td>body</td><td>false</td><td>string</td><td></td></tr><tr><td>invokeTarget</td><td></td><td>body</td><td>false</td><td>string</td><td></td></tr><tr><td>jobGroup</td><td></td><td>body</td><td>false</td><td>string</td><td></td></tr><tr><td>jobId</td><td></td><td>body</td><td>false</td><td>integer(int64)</td><td></td></tr><tr><td>jobName</td><td></td><td>body</td><td>false</td><td>string</td><td></td></tr><tr><td>misfirePolicy</td><td></td><td>body</td><td>false</td><td>string</td><td></td></tr><tr><td>nextValidTime</td><td></td><td>body</td><td>false</td><td>string(date-time)</td><td></td></tr><tr><td>params</td><td></td><td>body</td><td>false</td><td>object</td><td></td></tr><tr><td>remark</td><td></td><td>body</td><td>false</td><td>string</td><td></td></tr><tr><td>searchValue</td><td></td><td>body</td><td>false</td><td>string</td><td></td></tr><tr><td>status</td><td></td><td>body</td><td>false</td><td>string</td><td></td></tr><tr><td>tenantId</td><td></td><td>body</td><td>false</td><td>string</td><td></td></tr><tr><td>updateBy</td><td></td><td>body</td><td>false</td><td>integer(int64)</td><td></td></tr><tr><td>updateTime</td><td></td><td>body</td><td>false</td><td>string(date-time)</td><td></td></tr></tbody></table><p><strong>响应示例</strong>:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json"><br><br></code></pre></td></tr></table></figure><p><strong>响应参数</strong>:</p><p>暂无</p><p><strong>响应状态</strong>:</p><table><thead><tr><th>状态码</th><th>说明</th><th>schema</th></tr></thead><tbody><tr><td>200</td><td>OK</td><td></td></tr><tr><td>201</td><td>Created</td><td></td></tr><tr><td>401</td><td>Unauthorized</td><td></td></tr><tr><td>403</td><td>Forbidden</td><td></td></tr><tr><td>404</td><td>Not Found</td><td></td></tr><tr><td>## jobEdit</td><td></td><td></td></tr></tbody></table><p><strong>接口描述</strong>:修改保存调度</p><p><strong>接口地址</strong>:<code>/quartz/job/edit</code></p><p><strong>请求方式</strong>：<code>POST</code></p><p><strong>consumes</strong>:<code>[&quot;application/json&quot;]</code></p><p><strong>produces</strong>:<code>[&quot;*/*&quot;]</code></p><p><strong>请求参数</strong>：</p><table><thead><tr><th>参数名称</th><th>参数说明</th><th>in</th><th>是否必须</th><th>数据类型</th><th>schema</th></tr></thead><tbody><tr><td>beginTime</td><td></td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>concurrent</td><td>并发执行：0=允许,1=禁止</td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>createBy</td><td></td><td>query</td><td>false</td><td>integer</td><td></td></tr><tr><td>createTime</td><td></td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>cronExpression</td><td>执行表达式</td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>endTime</td><td></td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>invokeTarget</td><td>调用目标字符串</td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>jobGroup</td><td>任务组名</td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>jobId</td><td>任务序号</td><td>query</td><td>false</td><td>integer</td><td></td></tr><tr><td>jobName</td><td>任务名称</td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>misfirePolicy</td><td>计划策略：0=默认,1=立即触发执行,2=触发一次执行,3=不触发立即执行</td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>nextValidTime</td><td></td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>params</td><td></td><td>query</td><td>false</td><td>object</td><td></td></tr><tr><td>remark</td><td></td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>searchValue</td><td></td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>status</td><td>任务状态：0=正常,1=暂停</td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>tenantId</td><td></td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>updateBy</td><td></td><td>query</td><td>false</td><td>integer</td><td></td></tr><tr><td>updateTime</td><td></td><td>query</td><td>false</td><td>string</td><td></td></tr></tbody></table><p><strong>响应示例</strong>:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json"><br><br></code></pre></td></tr></table></figure><p><strong>响应参数</strong>:</p><p>暂无</p><p><strong>响应状态</strong>:</p><table><thead><tr><th>状态码</th><th>说明</th><th>schema</th></tr></thead><tbody><tr><td>200</td><td>OK</td><td></td></tr><tr><td>201</td><td>Created</td><td></td></tr><tr><td>401</td><td>Unauthorized</td><td></td></tr><tr><td>403</td><td>Forbidden</td><td></td></tr><tr><td>404</td><td>Not Found</td><td></td></tr><tr><td>## jobExport</td><td></td><td></td></tr></tbody></table><p><strong>接口描述</strong>:导出定时任务列表到Excel</p><p><strong>接口地址</strong>:<code>/quartz/job/export</code></p><p><strong>请求方式</strong>：<code>POST</code></p><p><strong>consumes</strong>:<code>[&quot;application/json&quot;]</code></p><p><strong>produces</strong>:<code>[&quot;*/*&quot;]</code></p><p><strong>请求参数</strong>：</p><table><thead><tr><th>参数名称</th><th>参数说明</th><th>in</th><th>是否必须</th><th>数据类型</th><th>schema</th></tr></thead><tbody><tr><td>beginTime</td><td></td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>concurrent</td><td>并发执行：0=允许,1=禁止</td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>createBy</td><td></td><td>query</td><td>false</td><td>integer</td><td></td></tr><tr><td>createTime</td><td></td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>cronExpression</td><td>执行表达式</td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>endTime</td><td></td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>invokeTarget</td><td>调用目标字符串</td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>jobGroup</td><td>任务组名</td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>jobId</td><td>任务序号</td><td>query</td><td>false</td><td>integer</td><td></td></tr><tr><td>jobName</td><td>任务名称</td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>misfirePolicy</td><td>计划策略：0=默认,1=立即触发执行,2=触发一次执行,3=不触发立即执行</td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>nextValidTime</td><td></td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>params</td><td></td><td>query</td><td>false</td><td>object</td><td></td></tr><tr><td>remark</td><td></td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>searchValue</td><td></td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>status</td><td>任务状态：0=正常,1=暂停</td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>tenantId</td><td></td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>updateBy</td><td></td><td>query</td><td>false</td><td>integer</td><td></td></tr><tr><td>updateTime</td><td></td><td>query</td><td>false</td><td>string</td><td></td></tr></tbody></table><p><strong>响应示例</strong>:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json"><br><br></code></pre></td></tr></table></figure><p><strong>响应参数</strong>:</p><p>暂无</p><p><strong>响应状态</strong>:</p><table><thead><tr><th>状态码</th><th>说明</th><th>schema</th></tr></thead><tbody><tr><td>200</td><td>OK</td><td></td></tr><tr><td>201</td><td>Created</td><td></td></tr><tr><td>401</td><td>Unauthorized</td><td></td></tr><tr><td>403</td><td>Forbidden</td><td></td></tr><tr><td>404</td><td>Not Found</td><td></td></tr><tr><td>## jobList</td><td></td><td></td></tr></tbody></table><p><strong>接口描述</strong>:获取调度任务列表</p><p><strong>接口地址</strong>:<code>/quartz/job/list</code></p><p><strong>请求方式</strong>：<code>POST</code></p><p><strong>consumes</strong>:<code>[&quot;application/json&quot;]</code></p><p><strong>produces</strong>:<code>[&quot;*/*&quot;]</code></p><p><strong>请求参数</strong>：</p><table><thead><tr><th>参数名称</th><th>参数说明</th><th>in</th><th>是否必须</th><th>数据类型</th><th>schema</th></tr></thead><tbody><tr><td>beginTime</td><td></td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>concurrent</td><td>并发执行：0=允许,1=禁止</td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>createBy</td><td></td><td>query</td><td>false</td><td>integer</td><td></td></tr><tr><td>createTime</td><td></td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>cronExpression</td><td>执行表达式</td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>endTime</td><td></td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>invokeTarget</td><td>调用目标字符串</td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>jobGroup</td><td>任务组名</td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>jobId</td><td>任务序号</td><td>query</td><td>false</td><td>integer</td><td></td></tr><tr><td>jobName</td><td>任务名称</td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>misfirePolicy</td><td>计划策略：0=默认,1=立即触发执行,2=触发一次执行,3=不触发立即执行</td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>nextValidTime</td><td></td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>params</td><td></td><td>query</td><td>false</td><td>object</td><td></td></tr><tr><td>remark</td><td></td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>searchValue</td><td></td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>status</td><td>任务状态：0=正常,1=暂停</td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>tenantId</td><td></td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>updateBy</td><td></td><td>query</td><td>false</td><td>integer</td><td></td></tr><tr><td>updateTime</td><td></td><td>query</td><td>false</td><td>string</td><td></td></tr></tbody></table><p><strong>响应示例</strong>:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br><span class="hljs-attr">"code"</span>: <span class="hljs-number">0</span>,<br><span class="hljs-attr">"rows"</span>: [],<br><span class="hljs-attr">"total"</span>: <span class="hljs-number">0</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>响应参数</strong>:</p><table><thead><tr><th>参数名称</th><th>参数说明</th><th>类型</th><th>schema</th></tr></thead><tbody><tr><td>code</td><td></td><td>integer(int32)</td><td>integer(int32)</td></tr><tr><td>rows</td><td></td><td>array</td><td></td></tr><tr><td>total</td><td></td><td>integer(int64)</td><td>integer(int64)</td></tr></tbody></table><p><strong>响应状态</strong>:</p><table><thead><tr><th>状态码</th><th>说明</th><th>schema</th></tr></thead><tbody><tr><td>200</td><td>OK</td><td>TableDataInfo</td></tr><tr><td>201</td><td>Created</td><td></td></tr><tr><td>401</td><td>Unauthorized</td><td></td></tr><tr><td>403</td><td>Forbidden</td><td></td></tr><tr><td>404</td><td>Not Found</td><td></td></tr><tr><td>## jobRemove</td><td></td><td></td></tr></tbody></table><p><strong>接口描述</strong>:按照id批量删除调度信息</p><p><strong>接口地址</strong>:<code>/quartz/job/remove</code></p><p><strong>请求方式</strong>：<code>POST</code></p><p><strong>consumes</strong>:<code>[&quot;application/json&quot;]</code></p><p><strong>produces</strong>:<code>[&quot;*/*&quot;]</code></p><p><strong>请求参数</strong>：</p><table><thead><tr><th>参数名称</th><th>参数说明</th><th>in</th><th>是否必须</th><th>数据类型</th><th>schema</th></tr></thead><tbody><tr><td>ids</td><td>ids</td><td>query</td><td>false</td><td>string</td><td></td></tr></tbody></table><p><strong>响应示例</strong>:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json"><br><br></code></pre></td></tr></table></figure><p><strong>响应参数</strong>:</p><p>暂无</p><p><strong>响应状态</strong>:</p><table><thead><tr><th>状态码</th><th>说明</th><th>schema</th></tr></thead><tbody><tr><td>200</td><td>OK</td><td></td></tr><tr><td>201</td><td>Created</td><td></td></tr><tr><td>401</td><td>Unauthorized</td><td></td></tr><tr><td>403</td><td>Forbidden</td><td></td></tr><tr><td>404</td><td>Not Found</td><td></td></tr><tr><td>## jobRun</td><td></td><td></td></tr></tbody></table><p><strong>接口描述</strong>:任务调度立即执行一次</p><p><strong>接口地址</strong>:<code>/quartz/job/run</code></p><p><strong>请求方式</strong>：<code>POST</code></p><p><strong>consumes</strong>:<code>[&quot;application/json&quot;]</code></p><p><strong>produces</strong>:<code>[&quot;*/*&quot;]</code></p><p><strong>请求参数</strong>：</p><table><thead><tr><th>参数名称</th><th>参数说明</th><th>in</th><th>是否必须</th><th>数据类型</th><th>schema</th></tr></thead><tbody><tr><td>beginTime</td><td></td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>concurrent</td><td>并发执行：0=允许,1=禁止</td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>createBy</td><td></td><td>query</td><td>false</td><td>integer</td><td></td></tr><tr><td>createTime</td><td></td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>cronExpression</td><td>执行表达式</td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>endTime</td><td></td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>invokeTarget</td><td>调用目标字符串</td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>jobGroup</td><td>任务组名</td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>jobId</td><td>任务序号</td><td>query</td><td>false</td><td>integer</td><td></td></tr><tr><td>jobName</td><td>任务名称</td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>misfirePolicy</td><td>计划策略：0=默认,1=立即触发执行,2=触发一次执行,3=不触发立即执行</td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>nextValidTime</td><td></td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>params</td><td></td><td>query</td><td>false</td><td>object</td><td></td></tr><tr><td>remark</td><td></td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>searchValue</td><td></td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>status</td><td>任务状态：0=正常,1=暂停</td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>tenantId</td><td></td><td>query</td><td>false</td><td>string</td><td></td></tr><tr><td>updateBy</td><td></td><td>query</td><td>false</td><td>integer</td><td></td></tr><tr><td>updateTime</td><td></td><td>query</td><td>false</td><td>string</td><td></td></tr></tbody></table><p><strong>响应示例</strong>:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json"><br><br></code></pre></td></tr></table></figure><p><strong>响应参数</strong>:</p><p>暂无</p><p><strong>响应状态</strong>:</p><table><thead><tr><th>状态码</th><th>说明</th><th>schema</th></tr></thead><tbody><tr><td>200</td><td>OK</td><td></td></tr><tr><td>201</td><td>Created</td><td></td></tr><tr><td>401</td><td>Unauthorized</td><td></td></tr><tr><td>403</td><td>Forbidden</td><td></td></tr><tr><td>404</td><td>Not Found</td><td></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>API</category>
      
    </categories>
    
    
    <tags>
      
      <tag>API</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>随谈2</title>
    <link href="/2019/03/27/%E9%9A%8F%E8%B0%882/"/>
    <url>/2019/03/27/%E9%9A%8F%E8%B0%882/</url>
    
    <content type="html"><![CDATA[<p>年轻时总是逢人就说自己的理想 </p><p>那个时候没有顾忌 </p><p>随心所欲的可以高谈阔论 </p><p>没有任何束缚 </p><p>总觉得凭借自己的一腔热血 </p><p>梦想这东西并不是遥不可及 </p><a id="more"></a><p>后来只和几个要好的朋友谈谈未来 </p><p>开始有所保留 </p><p>总觉得未来这事情不需要太多人知道 </p><p>只要默默努力就好 </p><p>总是相信只要努力 </p><p>未来并不是那么遥遥无期 </p><p>现在再也不和任何人讨论生活 </p><p>才开始明白 </p><p>其实生活是自己的 </p><p>和他人无关 </p><p>只会在夜深人静的时候仍然敲打这键盘 </p><p>把这一天未完成的事情做完 </p><p>原来生活就是每天重复做着一些琐碎的事情 </p><p>从年少无知到成人的世界 </p><p>从闹腾任性的个性到成熟冷静 </p><p>我们终究还是变了 </p><p>唯愿初心不变 </p><p>年轻时候的梦依旧在心中</p>]]></content>
    
    
    <categories>
      
      <category>Other</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Other</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>随谈</title>
    <link href="/2019/03/27/%E9%9A%8F%E8%B0%88/"/>
    <url>/2019/03/27/%E9%9A%8F%E8%B0%88/</url>
    
    <content type="html"><![CDATA[<p>曾经我也坐在工位笑别人， </p><p>那个人那么傻， 不就是被辞职了么，为什么要跳楼？</p><p>笑他傻，笑他看不懂，笑他想不开， 笑他不配做一个合格的丈夫， 不配为人之父…</p><a id="more"></a><p>但是今天我才发现，</p><p>是的，被离职是一件简简单单的事情，</p><p>家里的妻儿，未出生的花蕾，年迈的父母，</p><p>我也想不出能用什么面容来面对他们，</p><p>我担心我沮丧的心情会带给妻子压力，</p><p>我担心我失落的表情让父母有压力， </p><p>我担心我没办法照顾好妻儿。</p><p>一份好的工作对我来说是多么的幸福？</p><p>一份我喜欢的工作是对我的生活以及家庭的生活多大的保障？</p><p>但是现在呢？ </p><p>我几乎一无所有，不对我还有我爱的和爱我的家人…</p><p>如果不是他们，哪里还有这么幸福的我呢？ </p><p>但是我怎么能保障他们的生活呢… </p><p>或许我开始慢慢懂了，慢慢懂了那跳下去的一瞬间是多么的轻松，</p><p>或许下一秒就已经后悔了， 我还有我的家人们啊，</p><p>但是已经晚了， 我没有办法选择我现在就停止在半空中等待大家救援我， </p><p>但是那一瞬间真的很轻松，</p><p> 前所未有的放松，</p><p>让我很享受跳下来的这个过程， </p><p>甚至在跳下来的途中，</p><p>我能看到10楼的夫妻在争吵，</p><p>我能看到9楼的那个小伙子正在拼命的提升自己…</p><p>在下落的过程中我很享受， </p><p>享受的每一秒甚至每一毫秒…</p><p>慢慢的， </p><p>我的泪落从双眼涌出， </p><p>我爱的妻子，将承担这我遗留下的一切，</p><p>我完美的家庭就此破灭，</p><p>妻子将一辈子沉浸在悲伤中…</p><p>还有我的孩子…</p><p>我的年迈的父母亲， </p><p>我不能倒下，</p><p>我是一个七尺男儿，</p><p>我要为自己的家庭奋斗，</p><p>我要努力的照顾好这个世界上一直默默为我支持打气的他们…</p><p>我还有很多事没有做…</p><p>我不能就此倒下…</p><p>但是又有什么用呢…</p><p>我还在努力的往下掉…</p><p>直到下一刻…</p><p>我彻底摆脱了这个属于我的而且只属于我的世界…</p><p>我彻底摆脱了这个不属于我而且不属于任何人的世界…</p>]]></content>
    
    
    <categories>
      
      <category>Other</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Other</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CentOS下安装FreeTDS</title>
    <link href="/2019/03/15/CentOS%E4%B8%8B%E5%AE%89%E8%A3%85FreeTDS/"/>
    <url>/2019/03/15/CentOS%E4%B8%8B%E5%AE%89%E8%A3%85FreeTDS/</url>
    
    <content type="html"><![CDATA[<h5 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h5><blockquote><p>官方网站：<a href="http://www.freetds.org" target="_blank" rel="noopener">http://www.freetds.org</a></p><p>下载地址：<a href="http://ibiblio.org/pub/Linux/ALPHA/freetds/stable/freetds-stable.tgz" target="_blank" rel="noopener">http://ibiblio.org/pub/Linux/ALPHA/freetds/stable/freetds-stable.tgz</a></p><p>这个软件能够用Linux和Unix连接MS SQLServer和Sybase数据库</p></blockquote><h5 id="安装与配置"><a href="#安装与配置" class="headerlink" title="安装与配置"></a>安装与配置</h5><ol><li><p>首先下载FreeTDS安装包到服务器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget -c http://ibiblio.org/pub/Linux/ALPHA/freetds/stable/freetds-stable.tgz<br></code></pre></td></tr></table></figure><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymrluiwrj319s08mdjy.jpg" srcset="/img/loading.gif" alt="1"></p><a id="more"></a></li><li><p>解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar -zxvf freetds-stable.tgz<br></code></pre></td></tr></table></figure><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymrmqhzqj30xf0k2435.jpg" srcset="/img/loading.gif" alt="2"></p></li><li><p>编译安装</p><ol><li><p>因为是编译安装所以确保机器有安装gcc（可使用yum进行安装）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install gcc-c++<br>yum install ncurses-devel<br></code></pre></td></tr></table></figure></li><li><p>开始安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd freetds-0.91/<br>./configure --prefix=/usr/local/freetds --with-tdsver=8.0 --enable-msdblib<br>make &amp;&amp; makeinstall<br></code></pre></td></tr></table></figure><p>`解释：</p><pre><code>安装freetds到目录/usr/local/freetds：--prefix=/usr/local/freetds支持MSSQL2000：--with-tdsver=8.0 --enable-msdblib`</code></pre></li></ol><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymrnq2tqj318f02ydgf.jpg" srcset="/img/loading.gif" alt="3"></p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymrp4l6oj30o40pm10k.jpg" srcset="/img/loading.gif" alt="4"></p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymrri8e3j31a30pbe34.jpg" srcset="/img/loading.gif" alt="5"></p></li><li><p>FreeTDS默认安装在/usr/local/freetds目录当中，库文件在相应的lib目录下。</p><p><code>vim /etc/ld.so.conf</code>加入一行 <code>/usr/local/freetds/lib</code></p></li><li><p>然后运行以下指令使更改生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ldconfig<br></code></pre></td></tr></table></figure></li><li><p>测试连接</p><p><code>tsql -H MSSQL服务器服务IP -p 1433 -U MSSQL服务器登陆帐号 －P MSSQL服务器登陆密码</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash">  tsql -H XXXXXX-p 1433 -U sa -P XXXXXX -D <span class="hljs-built_in">test</span>  </span><br>locale is "zh_CN.utf8"  <br>locale charset is "UTF-8"  <br>Default database being set to test  <br><span class="hljs-meta">1&gt;</span><span class="bash"> select @@version  </span><br><span class="hljs-meta">2&gt;</span><span class="bash"> go  </span><br>  <br>Microsoft SQL Server 2008 R2 (RTM) - 10.50.1600.1 (Intel X86)  <br>        Apr  2 2010 15:53:02  <br>        Copyright (c) Microsoft Corporation  <br>        Data Center Edition on Windows NT 5.1 &lt;X86&gt; (Build 2600: Service Pack 3)  <br>  <br>(1 row affected)<br></code></pre></td></tr></table></figure><h5 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h5><p> <strong>Adaptive Server connection failed</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">locale is "en_US.UTF-8"<br>locale charset is "UTF-8"<br>using default charset "UTF-8"<br>Error 20017 (severity 9):<br>        Unexpected EOF from the server<br>        OS error 115, "Operation now in progress"<br>Error 20002 (severity 9):<br>        Adaptive Server connection failed<br>There was a problem connecting to the server<br></code></pre></td></tr></table></figure><p>执行<code>tsql -C</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@thinkpa freetds-0.91]# tsql -C<br>Compile-time settings (established with the "configure" script)<br>                            Version: freetds v0.91<br>             freetds.conf directory: /usr/local/etc<br>     MS db-lib source compatibility: no<br>        Sybase binary compatibility: no<br>                      Thread safety: yes<br>                      iconv library: yes<br>                        TDS version: 5.0<br>                              iODBC: no<br>                           unixodbc: no<br>              SSPI "trusted" logins: no<br>                           Kerberos: no<br></code></pre></td></tr></table></figure><p>发现freetds的版本是5.0，考虑到可能是freetds版本的问题</p><p>两种解决方式：</p><ol><li><p>修改全局TDS 版本号</p><p>找到<code>/usr/local/etc/freetds.conf</code>修改<code>[global]</code>下面的<code>tds version</code>为<code>8.0</code></p></li><li><p>连接时修改tds版本号</p><p><code>TDSVER=7.0 tsql -H</code></p><p>整个连接命令则变为：</p><p><code>tsql -H MSSQL服务器服务IP -p 1433 -U MSSQL服务器登陆帐号 －P MSSQL服务器登陆密码</code></p><p><strong>Adaptive Server connection failed</strong></p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">"Cannot open server 'xxxxxxx' requested by the login. Client with IP    address 'xxxxxxxxx' is not allowed to access the server.  To enable       access, use the Windows Azure Management Portal or run                   sp_set_firewall_rule on the master database to create a firewall       rule for this IP address or address range.  It may take up to five       minutes for this change to take effect."<br>Error 20002 (severity 9):<br>        Adaptive Server connection failed<br></code></pre></td></tr></table></figure><p>这个毋庸置疑了，找管理员开通白名单再访问吧！</p></li></ol><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006y8mN6gy1g7d3llw1nkj30b40b4wee.jpg" srcset="/img/loading.gif" alt="欢迎关注公众号" style="width: 100px" />]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>FreeTDS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kotlin-基本数据类型</title>
    <link href="/2019/03/15/Kotlin-%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <url>/2019/03/15/Kotlin-%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h5 id="Kotlin-基本数据类型"><a href="#Kotlin-基本数据类型" class="headerlink" title="Kotlin 基本数据类型"></a>Kotlin 基本数据类型</h5><blockquote><p>Kotlin 的基本数值类型包括 Byte、Short、Int、Long、Float、Double 等。不同于Java的是，字符不属于数值类型，是一个独立的数据类型。</p></blockquote><table><thead><tr><th>类型</th><th>位宽度</th></tr></thead><tbody><tr><td>Double</td><td>64</td></tr><tr><td>Float</td><td>32</td></tr><tr><td>Long</td><td>64</td></tr><tr><td>Int</td><td>32</td></tr><tr><td>Short</td><td>16</td></tr><tr><td>Byte</td><td>8</td></tr></tbody></table><a id="more"></a><h5 id="字面常量"><a href="#字面常量" class="headerlink" title="字面常量"></a>字面常量</h5><p>下面是所有类型的字面常量：</p><ul><li>十进制：123</li><li>长整型以大写的 L 结尾：123L</li><li>16 进制以 0x 开头：0x0F</li><li>2 进制以 0b 开头：0b00001011</li><li>注意：8进制不支持</li></ul><p>Kotlin 同时也支持传统符号表示的浮点数值：</p><ul><li>Doubles 默认写法: <code>123.5</code>, <code>123.5e10</code></li><li>Floats 使用 f 或者 F 后缀：<code>123.5f</code></li></ul><p>你可以使用下划线使数字常量更易读：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> oneMillion = <span class="hljs-number">1_000_000</span><br><span class="hljs-keyword">val</span> creditCardNumber = <span class="hljs-number">1234_5678_9012_3456L</span><br><span class="hljs-keyword">val</span> socialSecurityNumber = <span class="hljs-number">999_99_9999L</span><br><span class="hljs-keyword">val</span> hexBytes = <span class="hljs-number">0xFF_EC_DE_5E</span><br><span class="hljs-keyword">val</span> bytes = <span class="hljs-number">0b11010010_01101001_10010100_10010010</span><br></code></pre></td></tr></table></figure><h5 id="比较两个数字"><a href="#比较两个数字" class="headerlink" title="比较两个数字"></a>比较两个数字</h5><p>Kotlin 中没有基础数据类型，只有封装的数字类型，你每定义的一个变量，其实 Kotlin 帮你封装了一个对象，这样可以保证不会出现空指针。数字类型也一样，所有在比较两个数字的时候，就有比较数据大小和比较两个对象是否相同的区别了。</p><p>在 Kotlin 中，三个等号 === 表示比较对象地址，两个 == 表示比较两个值大小。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">(args: <span class="hljs-type">Array</span>&lt;<span class="hljs-type">String</span>&gt;)</span></span> &#123;<br>    <span class="hljs-keyword">val</span> a: <span class="hljs-built_in">Int</span> = <span class="hljs-number">10000</span><br>    println(a === a) <span class="hljs-comment">// true，值相等，对象地址相等</span><br><br>    <span class="hljs-comment">//经过了装箱，创建了两个不同的对象</span><br>    <span class="hljs-keyword">val</span> boxedA: <span class="hljs-built_in">Int</span>? = a<br>    <span class="hljs-keyword">val</span> anotherBoxedA: <span class="hljs-built_in">Int</span>? = a<br><br>    <span class="hljs-comment">//虽然经过了装箱，但是值是相等的，都是10000</span><br>    println(boxedA === anotherBoxedA) <span class="hljs-comment">//  false，值相等，对象地址不一样</span><br>    println(boxedA == anotherBoxedA) <span class="hljs-comment">// true，值相等</span><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h5><p>由于不同的表示方式，较小类型并不是较大类型的子类型，较小的类型不能隐式转换为较大的类型。 这意味着在不进行显式转换的情况下我们不能把 Byte 型值赋给一个 Int 变量。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> b: <span class="hljs-built_in">Byte</span> = <span class="hljs-number">1</span> <span class="hljs-comment">// OK, 字面值是静态检测的</span><br><span class="hljs-keyword">val</span> i: <span class="hljs-built_in">Int</span> = b <span class="hljs-comment">// 错误</span><br></code></pre></td></tr></table></figure><p>我们可以代用其toInt()方法。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> b: <span class="hljs-built_in">Byte</span> = <span class="hljs-number">1</span> <span class="hljs-comment">// OK, 字面值是静态检测的</span><br><span class="hljs-keyword">val</span> i: <span class="hljs-built_in">Int</span> = b.toInt() <span class="hljs-comment">// OK</span><br></code></pre></td></tr></table></figure><p>每种数据类型都有下面的这些方法，可以转化为其它的类型：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">toByte(): <span class="hljs-built_in">Byte</span><br>toShort(): <span class="hljs-built_in">Short</span><br>toInt(): <span class="hljs-built_in">Int</span><br>toLong(): <span class="hljs-built_in">Long</span><br>toFloat(): <span class="hljs-built_in">Float</span><br>toDouble(): <span class="hljs-built_in">Double</span><br>toChar(): <span class="hljs-built_in">Char</span><br></code></pre></td></tr></table></figure><p>有些情况下也是可以使用自动类型转化的，前提是可以根据上下文环境推断出正确的数据类型而且数学操作符会做相应的重载。例如下面是正确的：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> l = <span class="hljs-number">1L</span> + <span class="hljs-number">3</span> <span class="hljs-comment">// Long + Int =&gt; Long</span><br></code></pre></td></tr></table></figure><h5 id="位操作符"><a href="#位操作符" class="headerlink" title="位操作符"></a>位操作符</h5><p>对于Int和Long类型，还有一系列的位操作符可以使用，分别是：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">shl(bits) – 左移位 (Java’s &lt;&lt;)<br>shr(bits) – 右移位 (Java’s &gt;&gt;)<br>ushr(bits) – 无符号右移位 (Java’s &gt;&gt;&gt;)<br>and(bits) – 与<br>or(bits) – 或<br>xor(bits) – 异或<br>inv() – 反向<br></code></pre></td></tr></table></figure><h5 id="字符"><a href="#字符" class="headerlink" title="字符"></a>字符</h5><p>和 Java 不一样，Kotlin 中的 Char 不能直接和数字操作，Char 必需是单引号 <strong>‘</strong> 包含起来的。比如普通字符 ‘0’，’a’。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">check</span><span class="hljs-params">(c: <span class="hljs-type">Char</span>)</span></span> &#123;<br>    <span class="hljs-keyword">if</span> (c == <span class="hljs-number">1</span>) &#123; <span class="hljs-comment">// 错误：类型不兼容</span><br>        <span class="hljs-comment">// ……</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>字符字面值用单引号括起来: ‘1’。 特殊字符可以用反斜杠转义。 支持这几个转义序列：\t、 \b、\n、\r、&#39;、&quot;、\ 和 $。 编码其他字符要用 Unicode 转义序列语法：’\uFF00’。</p><p>我们可以显式把字符转换为 Int 数字：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">decimalDigitValue</span><span class="hljs-params">(c: <span class="hljs-type">Char</span>)</span></span>: <span class="hljs-built_in">Int</span> &#123;<br>    <span class="hljs-keyword">if</span> (c !<span class="hljs-keyword">in</span> <span class="hljs-string">'0'</span>..<span class="hljs-string">'9'</span>)<br>        <span class="hljs-keyword">throw</span> IllegalArgumentException(<span class="hljs-string">"Out of range"</span>)<br>    <span class="hljs-keyword">return</span> c.toInt() - <span class="hljs-string">'0'</span>.toInt() <span class="hljs-comment">// 显式转换为数字</span><br>&#125;<br></code></pre></td></tr></table></figure><p>当需要可空引用时，像数字、字符会被装箱。装箱操作不会保留同一性。</p><h5 id="布尔"><a href="#布尔" class="headerlink" title="布尔"></a>布尔</h5><p>布尔用 Boolean 类型表示，它有两个值：true 和 false。</p><p>若需要可空引用布尔会被装箱。</p><p>内置的布尔运算有：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">|| – 短路逻辑或<br>&amp;&amp; – 短路逻辑与<br>! - 逻辑非<br></code></pre></td></tr></table></figure><h5 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h5><p>数组用类 Array 实现，并且还有一个 size 属性及 get 和 set 方法，由于使用 [] 重载了 get 和 set 方法，所以我们可以通过下标很方便的获取或者设置数组对应位置的值。</p><p>数组的创建两种方式：一种是使用函数arrayOf()；另外一种是使用工厂函数。如下所示，我们分别是两种方式创建了两个数组：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">(args: <span class="hljs-type">Array</span>&lt;<span class="hljs-type">String</span>&gt;)</span></span> &#123;<br>    <span class="hljs-comment">//[1,2,3]</span><br>    <span class="hljs-keyword">val</span> a = arrayOf(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br>    <span class="hljs-comment">//[0,2,4]</span><br>    <span class="hljs-keyword">val</span> b = Array(<span class="hljs-number">3</span>, &#123; i -&gt; (i * <span class="hljs-number">2</span>) &#125;)<br><br>    <span class="hljs-comment">//读取数组内容</span><br>    println(a[<span class="hljs-number">0</span>])    <span class="hljs-comment">// 输出结果：1</span><br>    println(b[<span class="hljs-number">1</span>])    <span class="hljs-comment">// 输出结果：2</span><br>&#125;<br></code></pre></td></tr></table></figure><p>如上所述，[] 运算符代表调用成员函数 get() 和 set()。</p><p>注意: 与 Java 不同的是，Kotlin 中数组是不型变的（invariant）。</p><p>除了类Array，还有ByteArray, ShortArray, IntArray，用来表示各个类型的数组，省去了装箱操作，因此效率更高，其用法同Array一样：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> x: IntArray = intArrayOf(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br>x[<span class="hljs-number">0</span>] = x[<span class="hljs-number">1</span>] + x[<span class="hljs-number">2</span>]<br></code></pre></td></tr></table></figure><h5 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h5><p>和 Java 一样，String 是不可变的。方括号 [] 语法可以很方便的获取字符串中的某个字符，也可以通过 for 循环来遍历：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">for</span> (c <span class="hljs-keyword">in</span> str) &#123;<br>    println(c)<br>&#125;<br></code></pre></td></tr></table></figure><p>Kotlin 支持三个引号 “”” 扩起来的字符串，支持多行字符串，比如：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">(args: <span class="hljs-type">Array</span>&lt;<span class="hljs-type">String</span>&gt;)</span></span> &#123;<br>    <span class="hljs-keyword">val</span> text = <span class="hljs-string">"""</span><br><span class="hljs-string">    多行字符串</span><br><span class="hljs-string">    多行字符串</span><br><span class="hljs-string">    """</span><br><span class="hljs-string">    println(text)   // 输出有一些前置空格</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><p>String 可以通过 trimMargin() 方法来删除多余的空白。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">(args: <span class="hljs-type">Array</span>&lt;<span class="hljs-type">String</span>&gt;)</span></span> &#123;<br>    <span class="hljs-keyword">val</span> text = <span class="hljs-string">"""</span><br><span class="hljs-string">    |多行字符串</span><br><span class="hljs-string">    |Kotlin教程</span><br><span class="hljs-string">    |多行字符串</span><br><span class="hljs-string">    |Kotlin</span><br><span class="hljs-string">    """</span>.trimMargin()<br>    println(text)    <span class="hljs-comment">// 前置空格删除了</span><br>&#125;<br></code></pre></td></tr></table></figure><p>默认 | 用作边界前缀，但你可以选择其他字符并作为参数传入，比如 trimMargin(“&gt;”)。</p><h5 id="字符串模板"><a href="#字符串模板" class="headerlink" title="字符串模板"></a>字符串模板</h5><p>字符串可以包含模板表达式 ，即一些小段代码，会求值并把结果合并到字符串中。 模板表达式以美元符（$）开头，由一个简单的名字构成:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">(args: <span class="hljs-type">Array</span>&lt;<span class="hljs-type">String</span>&gt;)</span></span> &#123;<br>    <span class="hljs-keyword">val</span> i = <span class="hljs-number">10</span><br>    <span class="hljs-keyword">val</span> s = <span class="hljs-string">"i = <span class="hljs-variable">$i</span>"</span> <span class="hljs-comment">// 求值结果为 "i = 10"</span><br>    println(s)<br>&#125;<br></code></pre></td></tr></table></figure><p>或者用花括号扩起来的任意表达式:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">(args: <span class="hljs-type">Array</span>&lt;<span class="hljs-type">String</span>&gt;)</span></span> &#123;<br>    <span class="hljs-keyword">val</span> s = <span class="hljs-string">"kotlin"</span><br>    <span class="hljs-keyword">val</span> str = <span class="hljs-string">"<span class="hljs-variable">$s</span>.length is <span class="hljs-subst">$&#123;s.length&#125;</span>"</span> <span class="hljs-comment">// 求值结果为 "kotlin.length is 6"</span><br>    println(str)<br>&#125;<br></code></pre></td></tr></table></figure><p>原生字符串和转义字符串内部都支持模板。 如果你需要在原生字符串中表示字面值 $ 字符（它不支持反斜杠转义），你可以用下列语法：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">(args: <span class="hljs-type">Array</span>&lt;<span class="hljs-type">String</span>&gt;)</span></span> &#123;<br>    <span class="hljs-keyword">val</span> price = <span class="hljs-string">"""</span><br><span class="hljs-string">    <span class="hljs-subst">$&#123;<span class="hljs-string">'$'</span>&#125;</span>9.99</span><br><span class="hljs-string">    """</span><br><span class="hljs-string">    println(price)  // 求值结果为 $9.99</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><p><strong>欢迎关注微信公众号​：</strong></p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006y8mN6gy1g7d3llw1nkj30b40b4wee.jpg" srcset="/img/loading.gif" alt="欢迎关注公众号" style="width: 100px" />]]></content>
    
    
    <categories>
      
      <category>Kotlin</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kotlin</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kotlin-基础语法</title>
    <link href="/2019/03/14/Kotlin-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    <url>/2019/03/14/Kotlin-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h5 id="Kotlin基础语法"><a href="#Kotlin基础语法" class="headerlink" title="Kotlin基础语法"></a>Kotlin基础语法</h5><p>Kotlin文件以.kt为后缀</p><h5 id="Kotlin包声明"><a href="#Kotlin包声明" class="headerlink" title="Kotlin包声明"></a>Kotlin包声明</h5><p>代码文件的开头一般为包的声明</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">package</span> com.kotlin01.main<br><br><span class="hljs-keyword">import</span> java.util.*<br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span> &#123;&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Kotlin01</span> </span>&#123;&#125;<br></code></pre></td></tr></table></figure><p>kotlin源文件不需要相匹配的目录和包，源文件可以放在任何文件目录。</p><a id="more"></a><p>以上例中 test() 的全名是 com.kotlin01.main.test、Kotlin01的全名是 com.kotlin01.main.Kotlin01。</p><p>如果没有指定包，默认为 <strong>default</strong> 包。</p><h6 id="默认导入"><a href="#默认导入" class="headerlink" title="默认导入"></a>默认导入</h6><p>有多个包会默认导入到每个 Kotlin 文件中：</p><ul><li><p>kotlin.*</p></li><li><p>kotlin.annotation.*</p></li><li><p>kotlin.collections.*</p></li><li><p>kotlin.comparisons.*</p></li><li><p>kotlin.io.*</p></li><li><p>kotlin.ranges.*</p></li><li><p>kotlin.sequences.*</p></li><li><p>kotlin.text.*</p></li></ul><h5 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h5><p>函数定义使用关键字 fun，参数格式为：参数 : 类型</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">sum</span><span class="hljs-params">(a: <span class="hljs-type">Int</span>, b: <span class="hljs-type">Int</span>)</span></span>: <span class="hljs-built_in">Int</span> &#123;   <span class="hljs-comment">// Int 参数，返回值 Int</span><br>    <span class="hljs-keyword">return</span> a + b<br>&#125;<br></code></pre></td></tr></table></figure><p>表达式作为函数体，返回类型自动推断：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">sum</span><span class="hljs-params">(a: <span class="hljs-type">Int</span>, b: <span class="hljs-type">Int</span>)</span></span> = a + b<br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">sum</span><span class="hljs-params">(a: <span class="hljs-type">Int</span>, b: <span class="hljs-type">Int</span>)</span></span>: <span class="hljs-built_in">Int</span> = a + b   <span class="hljs-comment">// public 方法则必须明确写出返回类型</span><br></code></pre></td></tr></table></figure><p>无返回值的函数(Java中的void)：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">printSum</span><span class="hljs-params">(a: <span class="hljs-type">Int</span>, b: <span class="hljs-type">Int</span>)</span></span>: <span class="hljs-built_in">Unit</span> &#123; <br>    print(a + b)<br>&#125;<br><br><span class="hljs-comment">// 如果是返回 Unit类型，则可以省略(对于public方法也是这样)：</span><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">printSum</span><span class="hljs-params">(a: <span class="hljs-type">Int</span>, b: <span class="hljs-type">Int</span>)</span></span> &#123; <br>    print(a + b)<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="可变长参数函数"><a href="#可变长参数函数" class="headerlink" title="可变长参数函数"></a>可变长参数函数</h6><p>函数的变长参数可以用 <strong>vararg</strong> 关键字进行标识：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">vars</span><span class="hljs-params">(<span class="hljs-keyword">vararg</span> v:<span class="hljs-type">Int</span>)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(vt <span class="hljs-keyword">in</span> v)&#123;<br>        print(vt)<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 测试</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">(args: <span class="hljs-type">Array</span>&lt;<span class="hljs-type">String</span>&gt;)</span></span> &#123;<br>    vars(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>)  <span class="hljs-comment">// 输出12345</span><br>&#125;<br></code></pre></td></tr></table></figure><h6 id="lambda-匿名函数"><a href="#lambda-匿名函数" class="headerlink" title="lambda(匿名函数)"></a>lambda(匿名函数)</h6><p>lambda表达式使用实例：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">// 测试</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">(args: <span class="hljs-type">Array</span>&lt;<span class="hljs-type">String</span>&gt;)</span></span> &#123;<br>    <span class="hljs-keyword">val</span> sumLambda: (<span class="hljs-built_in">Int</span>, <span class="hljs-built_in">Int</span>) -&gt; <span class="hljs-built_in">Int</span> = &#123;x,y -&gt; x+y&#125;<br>    println(sumLambda(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>))  <span class="hljs-comment">// 输出 3</span><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="定义常量与变量"><a href="#定义常量与变量" class="headerlink" title="定义常量与变量"></a>定义常量与变量</h5><p>可变变量定义：var 关键字</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">var</span> &lt;标识符&gt; : &lt;类型&gt; = &lt;初始化值&gt;<br></code></pre></td></tr></table></figure><p>不可变变量定义：val 关键字，只能赋值一次的变量(类似Java中final修饰的变量)</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> &lt;标识符&gt; : &lt;类型&gt; = &lt;初始化值&gt;<br></code></pre></td></tr></table></figure><p>常量与变量都可以没有初始化值,但是在引用前必须初始化</p><p>编译器支持自动类型判断,即声明时可以不指定类型,由编译器判断。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> a: <span class="hljs-built_in">Int</span> = <span class="hljs-number">1</span><br><span class="hljs-keyword">val</span> b = <span class="hljs-number">1</span>       <span class="hljs-comment">// 系统自动推断变量类型为Int</span><br><span class="hljs-keyword">val</span> c: <span class="hljs-built_in">Int</span>      <span class="hljs-comment">// 如果不在声明时初始化则必须提供变量类型</span><br>c = <span class="hljs-number">1</span>           <span class="hljs-comment">// 明确赋值</span><br><br><span class="hljs-keyword">var</span> x = <span class="hljs-number">5</span>        <span class="hljs-comment">// 系统自动推断变量类型为Int</span><br>x += <span class="hljs-number">1</span>           <span class="hljs-comment">// 变量可修改</span><br></code></pre></td></tr></table></figure><h5 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h5><p>Kotlin 支持单行和多行注释，实例如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">// 这是一个单行注释</span><br><br><span class="hljs-comment">/* 这是一个多行的</span><br><span class="hljs-comment">   块注释。 */</span><br></code></pre></td></tr></table></figure><p>与 Java 不同, <strong>Kotlin 中的块注释允许嵌套</strong>。</p><h5 id="字符串模板"><a href="#字符串模板" class="headerlink" title="字符串模板"></a>字符串模板</h5><p>$ 表示一个变量名或者变量值</p><p>$varName 表示变量值</p><p>${varName.fun()} 表示变量的方法返回值:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span><br><span class="hljs-comment">// 模板中的简单名称：</span><br><span class="hljs-keyword">val</span> s1 = <span class="hljs-string">"a is <span class="hljs-variable">$a</span>"</span> <br><br>a = <span class="hljs-number">2</span><br><span class="hljs-comment">// 模板中的任意表达式：</span><br><span class="hljs-keyword">val</span> s2 = <span class="hljs-string">"<span class="hljs-subst">$&#123;s1.replace(<span class="hljs-string">"is"</span>, <span class="hljs-string">"was"</span>)&#125;</span>, but now is <span class="hljs-variable">$a</span>"</span><br></code></pre></td></tr></table></figure><h5 id="NULL检查机制"><a href="#NULL检查机制" class="headerlink" title="NULL检查机制"></a>NULL检查机制</h5><p>Kotlin的空安全设计对于声明可为空的参数，在使用时要进行空判断处理，有两种处理方式，字段后加!!像Java一样抛出空异常，另一种字段后加?可不做处理返回值为 null或配合?:做空判断处理</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">//类型后面加?表示可为空</span><br><span class="hljs-keyword">var</span> age: String? = <span class="hljs-string">"23"</span> <br><span class="hljs-comment">//抛出空指针异常</span><br><span class="hljs-keyword">val</span> ages = age!!.toInt()<br><span class="hljs-comment">//不做处理返回 null</span><br><span class="hljs-keyword">val</span> ages1 = age?.toInt()<br><span class="hljs-comment">//age为空返回-1</span><br><span class="hljs-keyword">val</span> ages2 = age?.toInt() ?: -<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>当一个引用可能为 null 值时, 对应的类型声明必须明确地标记为可为 null。</p><p>当 str 中的字符串内容不是一个整数时, 返回 null:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">parseInt</span><span class="hljs-params">(str: <span class="hljs-type">String</span>)</span></span>: <span class="hljs-built_in">Int</span>? &#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>以下实例演示如何使用一个返回值可为 null 的函数:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">(args: <span class="hljs-type">Array</span>&lt;<span class="hljs-type">String</span>&gt;)</span></span> &#123;<br>  <span class="hljs-keyword">if</span> (args.size &lt; <span class="hljs-number">2</span>) &#123;<br>    print(<span class="hljs-string">"Two integers expected"</span>)<br>    <span class="hljs-keyword">return</span><br>  &#125;<br>  <span class="hljs-keyword">val</span> x = parseInt(args[<span class="hljs-number">0</span>])<br>  <span class="hljs-keyword">val</span> y = parseInt(args[<span class="hljs-number">1</span>])<br>  <span class="hljs-comment">// 直接使用 `x * y` 会导致错误, 因为它们可能为 null.</span><br>  <span class="hljs-keyword">if</span> (x != <span class="hljs-literal">null</span> &amp;&amp; y != <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-comment">// 在进行过 null 值检查之后, x 和 y 的类型会被自动转换为非 null 变量</span><br>    print(x * y)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="类型检测及自动类型转换"><a href="#类型检测及自动类型转换" class="headerlink" title="类型检测及自动类型转换"></a>类型检测及自动类型转换</h5><p>我们可以使用 is 运算符检测一个表达式是否某类型的一个实例(类似于Java中的<strong>instanceof</strong>关键字)。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">getStringLength</span><span class="hljs-params">(obj: <span class="hljs-type">Any</span>)</span></span>: <span class="hljs-built_in">Int</span>? &#123;<br>  <span class="hljs-keyword">if</span> (obj <span class="hljs-keyword">is</span> String) &#123;<br>    <span class="hljs-comment">// 做过类型判断以后，obj会被系统自动转换为String类型</span><br>    <span class="hljs-keyword">return</span> obj.length <br>  &#125;<br><br>  <span class="hljs-comment">//在这里还有一种方法，与Java中instanceof不同，使用!is</span><br>  <span class="hljs-comment">// if (obj !is String)&#123;</span><br>  <span class="hljs-comment">//   // XXX</span><br>  <span class="hljs-comment">// &#125;</span><br><br>  <span class="hljs-comment">// 这里的obj仍然是Any类型的引用</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span><br>&#125;<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">getStringLength</span><span class="hljs-params">(obj: <span class="hljs-type">Any</span>)</span></span>: <span class="hljs-built_in">Int</span>? &#123;<br>  <span class="hljs-keyword">if</span> (obj !<span class="hljs-keyword">is</span> String)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span><br>  <span class="hljs-comment">// 在这个分支中, `obj` 的类型会被自动转换为 `String`</span><br>  <span class="hljs-keyword">return</span> obj.length<br>&#125;<br></code></pre></td></tr></table></figure><p>甚至还可以</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">getStringLength</span><span class="hljs-params">(obj: <span class="hljs-type">Any</span>)</span></span>: <span class="hljs-built_in">Int</span>? &#123;<br>  <span class="hljs-comment">// 在 `&amp;&amp;` 运算符的右侧, `obj` 的类型会被自动转换为 `String`</span><br>  <span class="hljs-keyword">if</span> (obj <span class="hljs-keyword">is</span> String &amp;&amp; obj.length &gt; <span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">return</span> obj.length<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="区间"><a href="#区间" class="headerlink" title="区间"></a>区间</h5><p>区间表达式由具有操作符形式 <strong>..</strong> 的 rangeTo 函数辅以 in 和 !in 形成。</p><p>区间是为任何可比较类型定义的，但对于整型原生类型，它有一个优化的实现。以下是使用区间的一些示例:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">for</span> (i <span class="hljs-keyword">in</span> <span class="hljs-number">1</span>..<span class="hljs-number">4</span>) print(i) <span class="hljs-comment">// 输出“1234”</span><br><br><span class="hljs-keyword">for</span> (i <span class="hljs-keyword">in</span> <span class="hljs-number">4</span>..<span class="hljs-number">1</span>) print(i) <span class="hljs-comment">// 什么都不输出</span><br><br><span class="hljs-keyword">if</span> (i <span class="hljs-keyword">in</span> <span class="hljs-number">1</span>..<span class="hljs-number">10</span>) &#123; <span class="hljs-comment">// 等同于 1 &lt;= i &amp;&amp; i &lt;= 10</span><br>    println(i)<br>&#125;<br><br><span class="hljs-comment">// 使用 step 指定步长</span><br><span class="hljs-keyword">for</span> (i <span class="hljs-keyword">in</span> <span class="hljs-number">1</span>..<span class="hljs-number">4</span> step <span class="hljs-number">2</span>) print(i) <span class="hljs-comment">// 输出“13”</span><br><br><span class="hljs-keyword">for</span> (i <span class="hljs-keyword">in</span> <span class="hljs-number">4</span> downTo <span class="hljs-number">1</span> step <span class="hljs-number">2</span>) print(i) <span class="hljs-comment">// 输出“42”</span><br><br><span class="hljs-comment">// 使用 until 函数排除结束元素</span><br><span class="hljs-keyword">for</span> (i <span class="hljs-keyword">in</span> <span class="hljs-number">1</span> until <span class="hljs-number">10</span>) &#123;   <span class="hljs-comment">// i in [1, 10) 排除了 10</span><br>     println(i)<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="实例测试"><a href="#实例测试" class="headerlink" title="实例测试"></a>实例测试</h5><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">(args: <span class="hljs-type">Array</span>&lt;<span class="hljs-type">String</span>&gt;)</span></span> &#123;<br>print(<span class="hljs-string">"循环输出："</span>)<br><span class="hljs-keyword">for</span> (i <span class="hljs-keyword">in</span> <span class="hljs-number">1</span>..<span class="hljs-number">4</span>) print(i) <span class="hljs-comment">// 输出“1234”</span><br>println(<span class="hljs-string">"\n----------------"</span>)<br>print(<span class="hljs-string">"设置步长："</span>)<br><span class="hljs-keyword">for</span> (i <span class="hljs-keyword">in</span> <span class="hljs-number">1</span>..<span class="hljs-number">4</span> step <span class="hljs-number">2</span>) print(i) <span class="hljs-comment">// 输出“13”</span><br>println(<span class="hljs-string">"\n----------------"</span>)<br>print(<span class="hljs-string">"使用 downTo："</span>)<br><span class="hljs-keyword">for</span> (i <span class="hljs-keyword">in</span> <span class="hljs-number">4</span> downTo <span class="hljs-number">1</span> step <span class="hljs-number">2</span>) print(i) <span class="hljs-comment">// 输出“42”</span><br>println(<span class="hljs-string">"\n----------------"</span>)<br>print(<span class="hljs-string">"使用 until："</span>)<br><span class="hljs-comment">// 使用 until 函数排除结束元素</span><br><span class="hljs-keyword">for</span> (i <span class="hljs-keyword">in</span> <span class="hljs-number">1</span> until <span class="hljs-number">4</span>) &#123;   <span class="hljs-comment">// i in [1, 4) 排除了 4</span><br>print(i)<br>&#125;<br>println(<span class="hljs-string">"\n----------------"</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">循环输出：<span class="hljs-number">1234</span><br>----------------<br>设置步长：<span class="hljs-number">13</span><br>----------------<br>使用 downTo：<span class="hljs-number">42</span><br>----------------<br>使用 until：<span class="hljs-number">123</span><br>----------------<br></code></pre></td></tr></table></figure><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ympc3t20j314k0m7qb1.jpg" srcset="/img/loading.gif" alt="result"></p><p><strong>欢迎关注微信公众号​：</strong></p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006y8mN6gy1g7d3llw1nkj30b40b4wee.jpg" srcset="/img/loading.gif" alt="欢迎关注公众号" style="width: 100px" />]]></content>
    
    
    <categories>
      
      <category>Kotlin</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kotlin</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kotlin-环境安装</title>
    <link href="/2019/03/14/Kotlin-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <url>/2019/03/14/Kotlin-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h5 id="Kotlin是什么？"><a href="#Kotlin是什么？" class="headerlink" title="Kotlin是什么？"></a>Kotlin是什么？</h5><blockquote><p>Kotlin 是一个用于现代多平台应用的静态编程语言，由 <a href="https://baike.baidu.com/item/JetBrains" target="_blank" rel="noopener">JetBrains</a> 开发。</p><p>Kotlin可以编译成Java字节码，也可以编译成JavaScript，方便在没有JVM的设备上运行。</p><p>Kotlin已正式成为Android官方支持开发语言。</p></blockquote><a id="more"></a><blockquote><p>Kotlin 是一种在 Java 虚拟机上运行的静态类型编程语言，被称之为 Android 世界的Swift，由 JetBrains 设计开发并开源。</p><p>Kotlin 可以编译成Java字节码，也可以编译成 JavaScript，方便在没有 JVM 的设备上运行。</p><p>在Google I/O 2017中，Google 宣布 Kotlin 成为 Android 官方开发语言。</p></blockquote><p>答案来自网络😂</p><h5 id="Kotlin开发环境搭建"><a href="#Kotlin开发环境搭建" class="headerlink" title="Kotlin开发环境搭建"></a>Kotlin开发环境搭建</h5><p>首先您能进来读这篇文章，就说明您已经在了解或者已经了解了Kotlin了，那更不用我来介绍怎么下载安装IntelliJ IDEA、Eclipse这类软件了。</p><p>由于我们经常使用的IntelliJ IDEA或者是Android Studio都已经自带，所以不做阐述。</p><p>当然也可以<a href="https://www.kotlincn.net/docs/tutorials/command-line.html" target="_blank" rel="noopener">下载独立的编译器</a>。</p><p>因为我在项目中用到比较多的还是Eclipse，所以在这里主要描述Eclipse安装Kotlin。</p><p>1、打开Eclipse，在菜单栏找到 <em>Help -&gt; Eclipse Marketplace…</em> 在search选项卡输入Kotlin进行搜索，然后选中第一条记录点击<em>install</em>安装</p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymmjcs1xj30tr0l4gs6.jpg" srcset="/img/loading.gif" alt="install"></p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymmlf0i0j30tr0l4k05.jpg" srcset="/img/loading.gif" alt="licenses"></p><p>或者使用老套一点的方式用site来安装：找到Eclipse的<em>help -&gt; Install New SoftWare…</em> 在<em>work with</em>输入 <a href="https://dl.bintray.com/jetbrains/kotlin/eclipse-plugin/last/" target="_blank" rel="noopener">https://dl.bintray.com/jetbrains/kotlin/eclipse-plugin/last/</a> 回车选中安装</p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymmmqud0j31600kbgs6.jpg" srcset="/img/loading.gif" alt="site"></p><p>重启Eclipse完成安装。</p><h5 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h5><p>1、首先创建一个新的Kotlin工程：选择Eclipse的 <em>File -&gt; New -&gt; Kotlin Project</em> </p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymmpurylj31740ntgpk.jpg" srcset="/img/loading.gif" alt="main"><br><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymmr66epj314k0oswir.jpg" srcset="/img/loading.gif" alt="println"><br><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymms9h96j31480rfdns.jpg" srcset="/img/loading.gif" alt="run"><br><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymmvdzavj313g0p4aen.jpg" srcset="/img/loading.gif" alt="hello Kotlin"></p><p>完成！！！</p><p><strong>欢迎关注微信公众号​：</strong></p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006y8mN6gy1g7d3llw1nkj30b40b4wee.jpg" srcset="/img/loading.gif" alt="欢迎关注公众号" style="width: 100px" />]]></content>
    
    
    <categories>
      
      <category>Kotlin</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kotlin</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>成人漫画</title>
    <link href="/2019/01/14/%E6%88%90%E4%BA%BA%E6%BC%AB%E7%94%BB/"/>
    <url>/2019/01/14/%E6%88%90%E4%BA%BA%E6%BC%AB%E7%94%BB/</url>
    
    <content type="html"><![CDATA[<h5 id="欢迎来到-成人世界"><a href="#欢迎来到-成人世界" class="headerlink" title="欢迎来到 成人世界"></a><strong>欢迎来到</strong> <strong>成人世界</strong></h5><p><strong>一份</strong></p><p><strong>成年人生存指南</strong></p><p><strong>送给你</strong></p><a id="more"></a><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymsgr86mj30rs1ccn0c.jpg" srcset="/img/loading.gif" alt="img"></p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymsj58d0j30rs1cc790.jpg" srcset="/img/loading.gif" alt="img"></p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymsk4c7oj30rs1ccju4.jpg" srcset="/img/loading.gif" alt="img"></p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymsmxx78j30rs1cc419.jpg" srcset="/img/loading.gif" alt="img"></p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymsqlg04j30rs1cc0x3.jpg" srcset="/img/loading.gif" alt="img"></p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymstq3n6j30rs1oyn22.jpg" srcset="/img/loading.gif" alt="img"></p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymsvqg86j30rs1ly795.jpg" srcset="/img/loading.gif" alt="img"></p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymswoim8j30rs1cc0vw.jpg" srcset="/img/loading.gif" alt="img"></p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymsxjlvij30rs1nqq6r.jpg" srcset="/img/loading.gif" alt="img"></p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymsy15gzj30rs1ccn0z.jpg" srcset="/img/loading.gif" alt="img"></p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymszhptrj30rs1cctch.jpg" srcset="/img/loading.gif" alt="img"></p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymt0cvjlj30rs1cctb0.jpg" srcset="/img/loading.gif" alt="img"></p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymt1b3f4j30rs1fcn05.jpg" srcset="/img/loading.gif" alt="img"></p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymt2a5cwj30rs1g5aeb.jpg" srcset="/img/loading.gif" alt="img"></p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymt365tvj30rs1bx429.jpg" srcset="/img/loading.gif" alt="img"></p><p>成年人的世界总是复杂的</p><p>人与人之间充斥着各种潜规则</p><p>希望这些道理</p><p>你现在知道还不算晚</p>]]></content>
    
    
    <categories>
      
      <category>Other</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Other</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ColaUi的使用</title>
    <link href="/2019/01/11/ColaUi%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2019/01/11/ColaUi%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="cola-ui"><a href="#cola-ui" class="headerlink" title="cola-ui"></a>cola-ui</h1><blockquote><p>官方：<a href="http://www.cola-ui.com" target="_blank" rel="noopener">http://www.cola-ui.com</a></p><p>教程位置：<a href="http://www.cola-ui.com/guide/model" target="_blank" rel="noopener">http://www.cola-ui.com/guide/model</a></p><p>API: <a href="http://www.cola-ui.com/api/cola.html" target="_blank" rel="noopener">http://www.cola-ui.com/api/cola.html</a> , <a href="http://legacy.cola-ui.com" target="_blank" rel="noopener">http://legacy.cola-ui.com</a></p><p>组件地址：<a href="http://www.cola-ui.com/docs/button" target="_blank" rel="noopener">http://www.cola-ui.com/docs/button</a></p><p>源码地址：<a href="https://github.com/Cola-Org/cola-ui" target="_blank" rel="noopener">https://github.com/Cola-Org/cola-ui</a></p></blockquote><h2 id="文档修订相关"><a href="#文档修订相关" class="headerlink" title="文档修订相关"></a>文档修订相关</h2><table><thead><tr><th align="center">版本</th><th align="center">内容</th><th align="center">修改人</th><th align="center">修改时间</th></tr></thead><tbody><tr><td align="center">V1.0</td><td align="center">初版</td><td align="center">Alterem</td><td align="center">2018-12-24</td></tr></tbody></table><h2 id="产品简介"><a href="#产品简介" class="headerlink" title="产品简介"></a>产品简介</h2><ul><li>Cola UI是支持双向数据绑定的一站式前端UI框架。采用了精简的MVVM架构，在确保灵活性的同时尽可能降低对开发者的技术要求。</li><li>Cola UI遵循Mobile First的策略，特别适合于移动设备应用开发。</li><li>Cola UI整合了jQuery和Semantic UI，同时提供更多常用的List、Table、Tree等高级控件。</li></ul><a id="more"></a><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>以上内容都是通过cola-ui官网获得的资料，绝大多数的开发内容可以参考cola-ui官网提供的API进行查阅</p><p><strong>本文档主要针对于camsi工程中用到的功能或特性，且可能不存在于cola-ui官网提供的API进行整理和说明</strong></p><h3 id="组成结构"><a href="#组成结构" class="headerlink" title="组成结构"></a>组成结构</h3><p>通常要基于camsi工程在浏览器渲染出来的页面由三个部分组成，例如：simple01.jade、M.js、simple01Model.js</p><h4 id="Jade"><a href="#Jade" class="headerlink" title="Jade"></a>Jade</h4><p>Jade 是一个高性能的模板引擎，它深受 Haml影响，它是用 JavaScript 实现的，并且可以供 <a href="http://nodejs.org/" target="_blank" rel="noopener">Node</a> 使用，你也可以<a href="http://naltatis.github.io/jade-syntax-docs/" target="_blank" rel="noopener">在此试用</a>，这里推荐<a href="http://www.nooong.com/docs/jade_chinese.htm" target="_blank" rel="noopener">Jade入门中文文档</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jade">extends &#x2F;_page<br>block body<br>v-box<br>flex-box<br>.content(style&#x3D;&quot;overflow: auto&quot;)<br>c-table(bind&#x3D;&quot;simple01s&quot; dataType&#x3D;&quot;Simple01&quot;)<br>column(property&#x3D;&quot;name&quot;)<br>append scripts<br>script(src&#x3D;&quot;simple01Model.js&quot;)<br>script(src&#x3D;&quot;simple01.js&quot;)<br></code></pre></td></tr></table></figure><p>dataType的值应该与Js中定义的dataType的值以及Model.js中定义的dataType的值相等</p><h4 id="Js"><a href="#Js" class="headerlink" title="Js"></a>Js</h4><p>不做描述</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript">cola(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">model</span>) </span>&#123;<br>model.dataType($DataType.Simple01);<br>model.describe(<span class="hljs-string">"simple01s"</span>, &#123;<br>dataType : <span class="hljs-string">"Simple01"</span>,<br>provider : &#123;<br>url : <span class="hljs-string">"controller/simple01Service/findPagination?from=&#123;&#123;$from&#125;&#125;&amp;limit=&#123;&#123;$limit&#125;&#125;"</span>,<br>pageSize : <span class="hljs-number">10</span>,<br>sendJson : <span class="hljs-literal">true</span>,<br>loadMode: <span class="hljs-string">'manual'</span><br>&#125;<br>&#125;);<br>model.set(<span class="hljs-string">"title"</span>, <span class="hljs-string">"[(#&#123;simple01&#125;)]"</span>);<br>model.action(&#123;<br>test : <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>cola.alert(<span class="hljs-string">'test'</span>)<br>&#125;<br>&#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><p>所有正规的操作包括事件都应该编写在cola(function(model) { })中，其中首先需要使用dataType定义当前Js中所有用到的DataType，使用model.describe交互后台数据到当前指定model，使用model.set(“”, “”)向model交互数据，页面所有用到的事件方法应该存在于model.action({})中。</p><h4 id="Model-js"><a href="#Model-js" class="headerlink" title="Model.js"></a>Model.js</h4><p>由cola-ui定义的前端模型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> $DataType = &#123;<br>Simple01: &#123;<br>name: <span class="hljs-string">"Simple01"</span>,<br>properties : &#123;<br>name : &#123;<br>caption : <span class="hljs-string">"[(#&#123;name&#125;)]"</span>,<br>dataType : <span class="hljs-string">"string"</span><br>&#125;<br>&#125;<br>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>caption用来标志当前字段的前端显示文本，使用[(#{ })]取到当前字段对应的当前语言的国际化翻译。</p><h3 id="表单相关"><a href="#表单相关" class="headerlink" title="表单相关"></a>表单相关</h3><h4 id="表单对国际化的处理"><a href="#表单对国际化的处理" class="headerlink" title="表单对国际化的处理"></a>表单对国际化的处理</h4><blockquote><p>在正常情况下，dataType可能会被公用，然后每个字段在每个不同的地方显示的文本标识不一样，这时候可以使用caption属性进行操作，例如：caption=ll.l(“name”)<strong>前面提到在Js中国际化使用的是[(#{ })]</strong></p></blockquote><h4 id="表单对日期格式的处理"><a href="#表单对日期格式的处理" class="headerlink" title="表单对日期格式的处理"></a>表单对日期格式的处理</h4><blockquote><p>通常需要将当前日期字段进行格式化只需要下面代码即可：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jade">field(property&#x3D;&quot;birthday&quot;)<br>label<br>c-datepicker(displayFormat&#x3D;&quot;yyyy-MM-dd&quot; inputFormat&#x3D;&quot;yyyy-MM-dd&quot;)<br></code></pre></td></tr></table></figure><p>将datatype类型为Date的birthday字段的文本显示和选择的日期格式调整为”yyyy-MM-dd”</p><h4 id="表单对枚举值的处理"><a href="#表单对枚举值的处理" class="headerlink" title="表单对枚举值的处理"></a>表单对枚举值的处理</h4><blockquote><p>我们经常会把一些常规的数据做成枚举值存放在数据库，并把页面的文本输入框改变成为下拉项</p></blockquote><p>页面元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jade">field(property&#x3D;&quot;status&quot;)<br>    label<br>    c-dropdown(c-items&#x3D;&quot;dictionary(&#39;10000&#39;)&quot;)<br></code></pre></td></tr></table></figure><p>引入Js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jade">script(src&#x3D;basecodeCP + &quot;controller&#x2F;basecode&#x2F;codeDetail&#x2F;findCodeDetails?baseCodeIds&#x3D;10000&quot;)<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jade">script(src&#x3D;&quot;controller&#x2F;basecode&#x2F;codeDetail&#x2F;findCodeDetails?baseCodeIds&#x3D;10000&quot;)<br></code></pre></td></tr></table></figure><p>这样页面会去加载枚举值代码为10000的对应status存放的id对应的文本显示到当前字段，并为当前字段提供下拉项</p><h4 id="表单对文本域的处理"><a href="#表单对文本域的处理" class="headerlink" title="表单对文本域的处理"></a>表单对文本域的处理</h4><blockquote><p>类似于备注，通常都是用文本框来显示</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jade">fields.cols-1<br>    field(property&#x3D;&quot;remark&quot;)<br>        label<br>        c-textarea(rows&#x3D;&quot;3&quot;)<br></code></pre></td></tr></table></figure><p>首先定义当前字段独占一列，使用c-textarea(rows=”3”)表名当前字段独占三列</p><h4 id="表单对只读的处理"><a href="#表单对只读的处理" class="headerlink" title="表单对只读的处理"></a>表单对只读的处理</h4><blockquote><p>正常场景并不是表单中列出的所有的字段都是手动输入的，比如ID，我们可以使用readOnly=”true”对每个field进行只读控制，也可以将readOnly=”true”放在c-form属性里面来控制整个表单只读</p></blockquote><h4 id="表单对省市县级联的处理"><a href="#表单对省市县级联的处理" class="headerlink" title="表单对省市县级联的处理"></a>表单对省市县级联的处理</h4><p>Jade</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jade">field(property&#x3D;&quot;country&quot;<br>    label<br>    c-dropdown(c-items&#x3D;&quot;dictionary(&#39;CountryCode&#39;)&quot; onSelectData&#x3D;&quot;onCountrySelect&quot;)<br>(property&#x3D;&quot;province&quot; caption&#x3D;ll.l(&quot;province&quot;) c-readOnly&#x3D;&quot;queryCondition.country !&#x3D; &#39;CHN&#39;&quot;)<br>    label<br>    c-dropdown(c-items&#x3D;&quot;provinces&quot; textProperty&#x3D;&quot;name&quot; assignment&#x3D;&quot;province&#x3D;kind&quot; onSelectData&#x3D;&quot;onProvinceSel&quot;)<br>field(property&#x3D;&quot;city&quot; caption&#x3D;ll.l(&quot;city&quot;) c-readOnly&#x3D;&quot;queryCondition.country !&#x3D; &#39;CHN&#39;&quot;)<br>    label<br>    c-dropdown(c-items&#x3D;&quot;cities&quot; textProperty&#x3D;&quot;name&quot; assignment&#x3D;&quot;city&#x3D;kind&quot; beforeOpen&#x3D;&quot;beforeCityOpen&quot; onSelectData&#x3D;&quot;onCitySel&quot;)<br>field(property&#x3D;&quot;county&quot; caption&#x3D;ll.l(&quot;county&quot;) c-readOnly&#x3D;&quot;queryCondition.country !&#x3D; &#39;CHN&#39;&quot;)<br>    label<br>    c-dropdown(c-items&#x3D;&quot;counties&quot; textProperty&#x3D;&quot;name&quot; assignment&#x3D;&quot;county&#x3D;kind&quot; beforeOpen&#x3D;&quot;beforeCountyOpen&quot;)<br></code></pre></td></tr></table></figure><p>引入数据字典</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jade">script(src&#x3D;&quot;controller&#x2F;basecode&#x2F;codeDetail&#x2F;findCodeDetails?baseCodeIds&#x3D;CountryCode&quot;)<br></code></pre></td></tr></table></figure><p>Js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs javascript">cola(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">model</span>) </span>&#123;<br>model.describe(<span class="hljs-string">"provinces"</span>, &#123;<br>provider: &#123;<br>url: <span class="hljs-string">"controller/basecode/codeDetail/findCachedCodeDetails"</span>,<br>parameter: &#123;<br>baseCodeId: <span class="hljs-string">"Address"</span>,<br>parentId: <span class="hljs-string">"NULL"</span><br>&#125;<br>&#125;<br>&#125;);<br>model.set(<span class="hljs-string">"title"</span>, <span class="hljs-string">"[(#&#123;simple01&#125;)]"</span>);<br>model.set(<span class="hljs-string">"queryCondition"</span>, &#123;<span class="hljs-string">"country"</span>:<span class="hljs-string">"CHN"</span>&#125;);<br>model.action(&#123;<br>beforeCityOpen: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-keyword">var</span> province = model.get(<span class="hljs-string">"queryCondition.province"</span>);<br>$.ajax(<span class="hljs-string">"controller/basecode/codeDetail/findCachedCodeDetails?baseCodeId=Address&amp;parentId="</span> + province, &#123;<br>type: <span class="hljs-string">"get"</span>, <span class="hljs-attr">async</span>: <span class="hljs-literal">false</span><br>&#125;).done(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">result</span>) </span>&#123;<br><span class="hljs-keyword">if</span> (result) &#123;<br>model.set(<span class="hljs-string">"cities"</span>, result);<br>&#125;<br>&#125;);<br>&#125;,<br>beforeCountyOpen: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-keyword">var</span> city = model.get(<span class="hljs-string">"queryCondition.city"</span>);<br>$.ajax(<span class="hljs-string">"controller/basecode/codeDetail/findCachedCodeDetails?baseCodeId=Address&amp;parentId="</span> + city, &#123;<br>type: <span class="hljs-string">"get"</span>, <span class="hljs-attr">async</span>: <span class="hljs-literal">false</span><br>&#125;).done(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">result</span>) </span>&#123;<br><span class="hljs-keyword">if</span> (result) &#123;<br>model.set(<span class="hljs-string">"counties"</span>, result);<br>&#125;<br>&#125;);<br>&#125;,<br>onProvinceSel: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">self, arg</span>) </span>&#123;<br><span class="hljs-keyword">var</span> queryCondition = model.get(<span class="hljs-string">"queryCondition"</span>);<br><span class="hljs-keyword">if</span>(queryCondition.get(<span class="hljs-string">"province"</span>) != arg.data.get(<span class="hljs-string">"kind"</span>))&#123;<br>queryCondition.set(<span class="hljs-string">"city"</span>, <span class="hljs-string">""</span>);<br>queryCondition.set(<span class="hljs-string">"county"</span>, <span class="hljs-string">""</span>);<br>&#125;<br>&#125;,<br>onCitySel: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">self, arg</span>) </span>&#123;<br><span class="hljs-keyword">var</span> queryCondition = model.get(<span class="hljs-string">"queryCondition"</span>);<br><span class="hljs-keyword">if</span>(queryCondition.get(<span class="hljs-string">"city"</span>) != arg.data.get(<span class="hljs-string">"kind"</span>))&#123;<br>queryCondition.set(<span class="hljs-string">"county"</span>, <span class="hljs-string">""</span>);<br>&#125;<br>&#125;,<br>onCountrySelect: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">self, arg</span>) </span>&#123;<br><span class="hljs-keyword">var</span> selectedItem = arg.data;<br><span class="hljs-keyword">if</span>(<span class="hljs-string">"CHN"</span> != selectedItem.key) &#123;<br>model.get(<span class="hljs-string">"queryCondition"</span>).set(<span class="hljs-string">"province"</span>, <span class="hljs-string">""</span>);<br>model.get(<span class="hljs-string">"queryCondition"</span>).set(<span class="hljs-string">"city"</span>, <span class="hljs-string">""</span>);<br>model.get(<span class="hljs-string">"queryCondition"</span>).set(<span class="hljs-string">"county"</span>, <span class="hljs-string">""</span>);<br>&#125;<br>&#125;<br>&#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="表格相关"><a href="#表格相关" class="headerlink" title="表格相关"></a>表格相关</h3><h4 id="表格对枚举值的处理"><a href="#表格对枚举值的处理" class="headerlink" title="表格对枚举值的处理"></a>表格对枚举值的处理</h4><blockquote><p>通常我们都是在表单录入数据，在表格中进行简约展示，所以在表单中录入的下拉枚举值我们需要在表格中使用的时候必须使用获取到的枚举值进行翻译</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jade">column(property&#x3D;&quot;status&quot;)<br>    template<br>    div(c-bind&#x3D;&quot;translate(&#39;10000&#39;,$default)&quot;)<br></code></pre></td></tr></table></figure><h4 id="表格对行内编辑的处理"><a href="#表格对行内编辑的处理" class="headerlink" title="表格对行内编辑的处理"></a>表格对行内编辑的处理</h4><blockquote><p>在对于处理一些简单数据的时候我们可以不需要弹出一个复杂的编辑框对当前行的数据进行编辑处理，可以直接在表格进行行内编辑</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jade">c-table(bind&#x3D;&quot;simple01s&quot; dataType&#x3D;&quot;Simple01&quot; readOnly&#x3D;&quot;false&quot;)<br></code></pre></td></tr></table></figure><h5 id="表格行编辑对下拉项的处理"><a href="#表格行编辑对下拉项的处理" class="headerlink" title="表格行编辑对下拉项的处理"></a>表格行编辑对下拉项的处理</h5><blockquote><p>在表单编辑我们可以去选择一个下拉项做为数据值，当然在表格行编辑也可以</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jade">column(property&#x3D;&quot;status&quot;)<br>    template(name&#x3D;&quot;edit&quot;)<br>        c-dropdown(bind&#x3D;&quot;$default&quot; c-items&#x3D;&quot;dictionary(&#39;10000&#39;)&quot;)<br></code></pre></td></tr></table></figure><p>最后代码整理为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jade">column(property&#x3D;&quot;status&quot;)<br>    template(name&#x3D;&quot;edit&quot;)<br>    c-dropdown(bind&#x3D;&quot;$default&quot; c-items&#x3D;&quot;dictionary(&#39;10000&#39;)&quot;)<br>    template<br>    div(c-bind&#x3D;&quot;translate(&#39;10000&#39;,$default)&quot;)<br></code></pre></td></tr></table></figure><h4 id="表格添加操作列的处理"><a href="#表格添加操作列的处理" class="headerlink" title="表格添加操作列的处理"></a>表格添加操作列的处理</h4><blockquote><p>通常我们需要在表格的最后一列添加一行操作列来处理当前行的数据</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jade">c-table(bind&#x3D;&quot;simple in simple01s&quot; dataType&#x3D;&quot;Simple01&quot;)<br>    column(caption&#x3D;ll.l(&quot;operation&quot;))<br>        template<br>            div<br>                a.cell-link(c-onclick&#x3D;&quot;view(simple)&quot;)&#x3D;ll.l(&quot;view&quot;)<br></code></pre></td></tr></table></figure><h4 id="表格联动的处理"><a href="#表格联动的处理" class="headerlink" title="表格联动的处理"></a>表格联动的处理</h4><blockquote><p>很多场景下，我们的数据和数据都是有关联关系，比如一本书对应书籍的出版社的详细信息，这时候针对不同的书本信息联动到出版社的详细信息</p></blockquote><p>因为此处是两个表的关联，所以需要定义两个dataType</p><p>cModel.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> $DataType = &#123;<br>A: &#123;<br>name: <span class="hljs-string">"A"</span>,<br>properties : &#123;<br>name : &#123;<br>caption : <span class="hljs-string">"[(#&#123;name&#125;)]"</span>,<br>dataType : <span class="hljs-string">"string"</span>,<br>&#125;<br>&#125;<br>&#125;,<br>B : &#123;<br>name : <span class="hljs-string">"B"</span>,<br>properties : &#123;<br>name : &#123;<br>caption : <span class="hljs-string">"[(#&#123;name&#125;)]"</span>,<br>dataType : <span class="hljs-string">"string"</span><br>&#125;<br>&#125;<br>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>c.jade</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jade">c-table(bind&#x3D;&quot;as&quot; dataType&#x3D;&quot;a&quot;)<br>column(property&#x3D;&quot;name&quot;)<br>c-table(bind&#x3D;&quot;as#.bs&quot; dataType&#x3D;&quot;b&quot;)<br>column(property&#x3D;&quot;name&quot;)<br></code></pre></td></tr></table></figure><p>c.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js">cola(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">model</span>) </span>&#123;<br>model.dataType($DataType.B);<br>$DataType.A.properties.bs = &#123;<br>dataType: <span class="hljs-string">"B"</span>,<br>aggregated: <span class="hljs-literal">true</span>,<br>provider: &#123;<br>url: <span class="hljs-string">"controller/B/find"</span>,<br>sendJson: <span class="hljs-literal">true</span>,<br>parameter: &#123;<br><span class="hljs-string">"name"</span>: <span class="hljs-string">"&#123;&#123;@name&#125;&#125;"</span><br>&#125;<br>&#125;<br>&#125;<br>model.dataType($DataType.A);<br>model.describe(<span class="hljs-string">"as"</span>, &#123;<br>dataType : <span class="hljs-string">"A"</span>,<br>provider : &#123;<br>url : <span class="hljs-string">"controller/C/findPagination?from=&#123;&#123;$from&#125;&#125;&amp;limit=&#123;&#123;$limit&#125;&#125;"</span>,<br>pageSize : <span class="hljs-number">10</span>,<br>sendJson : <span class="hljs-literal">true</span>,<br>loadMode: <span class="hljs-string">'manual'</span><br>&#125;<br>&#125;);<br>model.set(<span class="hljs-string">"title"</span>, <span class="hljs-string">"[(#&#123;C&#125;)]"</span>);<br>model.action(&#123;<br>&#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><p>在关联中可以使用parameter:{“name”:”{{@name}}“}方式拿到父表中当前选中行的name的值</p><h4 id="表格数据加载的处理"><a href="#表格数据加载的处理" class="headerlink" title="表格数据加载的处理"></a>表格数据加载的处理</h4><blockquote><p>在某些场景下我们可以让表格数据直接加载到页面，也可以使用事件来触发加载数据</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">loadMode: <span class="hljs-string">'manual'</span><br></code></pre></td></tr></table></figure><p>可以通过loadMode来控制表单是否在页面加载的时候加载数据到页面：manual手工加载，注释掉loadMode缺省自动加载数据</p><h3 id="面板Panel-相关"><a href="#面板Panel-相关" class="headerlink" title="面板Panel 相关"></a>面板Panel 相关</h3><h4 id="在panel头位置添加按钮"><a href="#在panel头位置添加按钮" class="headerlink" title="在panel头位置添加按钮"></a>在panel头位置添加按钮</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jade">c-panel#panelDemo(caption&#x3D;ll.l(&quot;panel&quot;))<br>    template(name&#x3D;&quot;tools&quot;)<br>       div<br>          c-button.primary(caption&#x3D;ll.l(&quot;add&quot;) click&#x3D;&quot;add&quot;)<br></code></pre></td></tr></table></figure><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><h4 id="预加载处理"><a href="#预加载处理" class="headerlink" title="预加载处理"></a>预加载处理</h4><blockquote><p>通常我们会在页面加载完成的时候自动触发一部分方法或者set一部分数据值到指定属性</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javas">cola.ready(function() &#123;<br>cola.widget(&quot;panelDemo&quot;).collapse(); &#x2F;&#x2F; 在加载完页面之后 折叠id为panelDemo的面板<br>&#125;);<br></code></pre></td></tr></table></figure><p>代码应该放在cola(function (model) { })</p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006y8mN6gy1g7d3llw1nkj30b40b4wee.jpg" srcset="/img/loading.gif" alt="欢迎关注公众号" style="width: 100px" />]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ColaUi</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>幂等</title>
    <link href="/2018/10/09/%E5%B9%82%E7%AD%89/"/>
    <url>/2018/10/09/%E5%B9%82%E7%AD%89/</url>
    
    <content type="html"><![CDATA[<p>幂等（idempotent、idempotence）是一个数学与计算机学概念，常见于抽象代数中。</p><p>在编程中一个幂等操作的特点是其任意多次执行所产生的影响均与一次执行的影响相同。幂等函数，或幂等方法，是指可以使用相同参数重复执行，并能获得相同结果的函数。这些<a href="https://baike.baidu.com/item/%E5%87%BD%E6%95%B0/301912" target="_blank" rel="noopener">函数</a>不会影响系统状态，也不用担心重复执行会对系统造成改变。例如，“setTrue()”函数就是一个幂等函数,无论多次执行，其结果都是一样的.更复杂的操作幂等保证是利用唯一交易号(流水号)实现.</p><a id="more"></a><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>在数学里，<strong>幂等</strong>有两种主要的定义。</p><p>在某二元运算下，<strong>幂等元素</strong>是指被自己重复运算(或对于函数是为复合)的结果等于它自己的元素。例如，乘法下唯一两个幂等实数为0和1。</p><p>某一元运算为<strong>幂等</strong>的时，其作用在任一元素两次后会和其作用一次的结果相同。例如，高斯符号便是幂等的。</p><p>一元运算的定义是二元运算定义的特例</p><h3 id="二元运算"><a href="#二元运算" class="headerlink" title="二元运算"></a>二元运算</h3><p>设<em>S</em>为一具有作用于其自身的二元运算的集合，则<em>S</em>的元素<em>s</em>称为幂等的(相对于*)当</p><p><em>s</em> <em>*s</em> = <em>s</em>.</p><p>特别的是，任一单位元都是幂等的。若<em>S</em>的所有元素都是幂等的话，则其二元运算*被称做是幂等的。例如，联集和交集的运算便都是幂等的。</p><h3 id="一元运算"><a href="#一元运算" class="headerlink" title="一元运算"></a>一元运算</h3><p>设<em>f</em>为一由<em>X</em>映射至<em>X</em>的一元运算，则<em>f</em>为幂等的，当对于所有在<em>X</em>内的<em>x</em>，</p><p><em>f</em>(<em>f</em>(<em>x</em>)) = <em>f</em>(<em>x</em>).</p><p>特别的是，恒等函数一定是幂等的，且任一<a href="https://baike.baidu.com/item/%E5%B8%B8%E6%95%B0%E5%87%BD%E6%95%B0" target="_blank" rel="noopener">常数函数</a>也都是幂等的。</p><p>注意当考虑一由<em>X</em>至<em>X</em>的所有函数所组成的集合<em>S</em>时。在<em>f</em>在一元运算下为幂等的若且唯若在二元运算下，<em>f</em>相对于其复合运算(标记为<em>o</em>)会是幂等的。这可以写成<em>f</em> o <em>f</em> = <em>f</em>。</p><h2 id="一般例子"><a href="#一般例子" class="headerlink" title="一般例子"></a>一般例子</h2><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>如上述所说，恒等函数和常数函数总会是幂等的。较不当然的例子有实数或复数引数的绝对值函数，以及实数引数的高斯符号。</p><p>将一拓扑空间<em>X</em>内各子集<em>U</em>映射至<em>U</em>闭包的函数在<em>X</em>的幂集上是幂等的。这是闭包运算元的一个例子；所有个闭包运算元都会是幂等函数。</p><h3 id="环的幂等元素"><a href="#环的幂等元素" class="headerlink" title="环的幂等元素"></a>环的幂等元素</h3><p>定义上，环的幂等元素为一相对于环乘法为幂等的元素。可以定义一于环幂等上的偏序：若e和f为幂等的，当ef= fe= e时，标记为e≤ f。依其顺序，0会是最小幂等元素，而1为最大幂等元素。</p><p>若<em>e</em>在环<em>R</em>内为幂等的，则<em>eRe</em>一样会是个乘法单位元为<em>e</em>的环。</p><p>两个幂等元素<em>e</em>和<em>f</em>被称为<em>正交的<em>当</em>ef</em>=<em>fe</em>=0。在此一情形下，<em>e</em>+<em>f</em>也是幂等的，且有<em>e</em> ≤ <em>e</em> + <em>f</em>和<em>f</em> ≤ <em>e</em> + <em>f</em>。</p><p>若<em>e</em>在环<em>R</em>内为幂等的，则<em>f</em> = 1 − <em>e</em>也会是幂等的，且<em>e</em>和<em>f</em>正交。</p><p>一在<em>R</em>内的幂等元素<em>e</em>称为<em>核心的<em>，若对所有在</em>R<em>内的</em>x<em>，</em>ex</em>=<em>xe<em>。在此情形之下，</em>Re<em>会是个乘法单位元为</em>e<em>的环。</em>R<em>的核心幂等元素和</em>R<em>的分解为环的直和有很直接的关接。若</em>R<em>为环</em>R<em>1、…、</em>R<strong>n<em>的直和，则环</em>R</strong>i<em>的单位元在</em>R<em>内为核心幂等的，相互正交，且其总和为1。相反地，给出</em>R<em>内给相互正交且总和为1的核心幂等元素</em>e<em>1、…、</em>e<strong>n<em>，则</em>R<em>会是环</em>Re<em>1、…、</em>Re</strong>n<em>的直和。所有较有趣的是，每一于</em>R<em>内的核心幂等</em>e<em>都会给出一</em>R<em>的分解－</em>Re<em>和</em>R</em>(1 − <em>e</em>)的直和。</p><p>任一不等于0和1的幂等元素都是零因子(因为<em>e</em>(1 − <em>e</em>) = 0)。这表示了整环及除环都不会存在此种幂等元素。局部环也没有此种幂等元素，但理由有点不同。唯一包含于一环的雅各布森根内的幂等元素只有0。共四元数环内会有一幂等元素组成的悬链曲面。</p><p><em>所有</em>元素都幂等的环称做布尔环。可证明在每一此类环内，乘法都是可交换的，且每一元素都有其各自的加法逆元。</p><h3 id="其他例子"><a href="#其他例子" class="headerlink" title="其他例子"></a>其他例子</h3><p>幂等运算也可以在布林代数内找到。逻辑和与<a href="https://baike.baidu.com/item/%E9%80%BB%E8%BE%91%E6%88%96" target="_blank" rel="noopener">逻辑或</a>便都是幂等运算。</p><p>在<a href="https://baike.baidu.com/item/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0" target="_blank" rel="noopener">线性代数</a>里，<a href="https://baike.baidu.com/item/%E6%8A%95%E5%B0%84" target="_blank" rel="noopener">投射</a>是幂等的。亦即，每一将向量投射至一子空间V(不需正交)上的<a href="https://baike.baidu.com/item/%E7%BA%BF%E6%80%A7%E7%AE%97%E5%AD%90" target="_blank" rel="noopener">线性算子</a>，都是幂等的。</p><p>一幂等半环为其<em>加法</em>(非乘法)为幂等的<a href="https://baike.baidu.com/item/%E5%8D%8A%E7%8E%AF" target="_blank" rel="noopener">半环</a>。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>API</tag>
      
      <tag>幂等</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>10招强化Linux安全的技能</title>
    <link href="/2018/09/14/10%E6%8B%9B%E5%BC%BA%E5%8C%96Linux%E5%AE%89%E5%85%A8%E7%9A%84%E6%8A%80%E8%83%BD/"/>
    <url>/2018/09/14/10%E6%8B%9B%E5%BC%BA%E5%8C%96Linux%E5%AE%89%E5%85%A8%E7%9A%84%E6%8A%80%E8%83%BD/</url>
    
    <content type="html"><![CDATA[<h3 id="1-找出不必要的服务"><a href="#1-找出不必要的服务" class="headerlink" title="1.找出不必要的服务"></a>1.找出不必要的服务</h3><p>很明显，服务器上跑的服务，并不是每个都有用的。强烈建议检查并关掉不需要的服务，从而减少风险（多跑一个服务，就可能多几个漏洞）。</p><p>查询运行在<strong>runlevel 3</strong>的服务列表：</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas">[<span class="hljs-meta">alter</span>@<span class="hljs-meta">alter</span> ~]# /sbin/chkconfig --<span class="hljs-meta">list</span> |grep <span class="hljs-string">'3:on'</span><br></code></pre></td></tr></table></figure><a id="more"></a><p>关闭指定的服务：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[<span class="hljs-keyword">alter</span>@<span class="hljs-keyword">alter</span> ~]# chkconfig ip6tables <span class="hljs-keyword">off</span><br></code></pre></td></tr></table></figure><hr><p>疑问：为什么查询<strong>runlevel 3</strong>的服务？<br>Linux系统有7个运行级别(runlevel)，分别如下：<br>runlevel 0：系统停机状态，系统默认运行级别不能设为0，否则不能正常启动；<br>runlevel 1：单用户工作状态，root权限，用于系统维护，禁止远程登陆；<br>runlevel 2：多用户状态(没有NFS)；<br>runlevel 3：完全的多用户状态(有NFS)，登陆后进入控制台命令行模式。这个运行级别的服务会启动httpd，系统提供web server服务，所以主要查看这个运行级别的服务；<br>runlevel 4：系统未使用，保留；<br>runlevel 5：X11控制台，登陆后进入图形GUI模式；<br>runlevel 6：系统正常关闭并重启，默认运行级别不能设为6，否则不能正常启动；</p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymrkisisj30eq0q6ajx.jpg" srcset="/img/loading.gif" alt="img"></p><h3 id="2-检查监听的网络端口"><a href="#2-检查监听的网络端口" class="headerlink" title="2.检查监听的网络端口"></a>2.检查监听的网络端口</h3><p>通过netstat命名能够看到所有已经打开的端口，并且可以看到是哪些程序打开的。如果发现某些是必须要的，建议关掉：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">[<span class="hljs-symbol">alter@</span>alter~]# netstat -tulpn<br>Active Internet connections (only servers)<br>Proto Recv-Q Send-Q Local Address  Foreign Address  State   PID/Program name   <br>tcp        <span class="hljs-number">0</span>      <span class="hljs-number">0</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>:<span class="hljs-number">2181</span>   <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>:*        LISTEN  <span class="hljs-number">48983</span>/java          <br>tcp        <span class="hljs-number">0</span>      <span class="hljs-number">0</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>:<span class="hljs-number">2182</span>   <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>:*        LISTEN  <span class="hljs-number">49051</span>/java<br></code></pre></td></tr></table></figure><h3 id="3-优化CRON任务"><a href="#3-优化CRON任务" class="headerlink" title="3.优化CRON任务"></a>3.优化CRON任务</h3><p>linux的cron可以执行一些定时任务。并且还可以通过/etc/cron.allow 和 /etc/cron.deny 控制哪些用户可以运行JOB，哪位用户禁止运行JOB。例如:<br>允许用户alter允许JOB，执行如下命令：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">echo</span> alter &gt;&gt; <span class="hljs-string">/etc/cron.allow</span><br></code></pre></td></tr></table></figure><p>禁止所有用户访问JOB，执行如下命令：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">echo</span> ALL &gt;&gt;<span class="hljs-string">/etc/cron.deny</span><br></code></pre></td></tr></table></figure><h3 id="4-限制用户使用旧密码"><a href="#4-限制用户使用旧密码" class="headerlink" title="4.限制用户使用旧密码"></a>4.限制用户使用旧密码</h3><p>linux用户的旧密码保存在文件/etc/security/opasswd中：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@LAPP</span>-V1159 ~]<span class="hljs-meta"># cat /etc/security/opasswd</span><br>alter:<span class="hljs-number">504</span>:<span class="hljs-number">4</span>:$1$MVAi/EpJ$iXXkV5r3Hjc8AaK2b5KyQ/,$1$AbpFPYaD$ZKj12lK6qaYUqgQnEdocd0,$1$POabjmzY$F4Cp6aTwN6RRk1KjZWm8A/,$1$LoHe5GHY$QjkLGqABANpLmlQsRB4WE.<br></code></pre></td></tr></table></figure><p>检查是否有开启限制使用旧密码，在RHEL / CentOS / Fedora系统中，查看文件：/etc/pam.d/system-auth。在Ubuntu/Debian/Linux Mint系统中，查看文件：/etc/pam.d/common-password，需要下面两行关键内容，其中remember=4，表示不能使用最后4次密码，否则会报错：Password has been already used. Choose another.：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">auth        sufficient    pam_unix.so <span class="hljs-literal">null</span>ok try_first_pass<br>password    sufficient    pam_unix.so sha512 shadow <span class="hljs-literal">null</span>ok try_first_pass use_authtok remember=<span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><h3 id="5-检查密码过期"><a href="#5-检查密码过期" class="headerlink" title="5.检查密码过期"></a>5.检查密码过期</h3><p>密码的过期属性可以通过如下命令查看：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">[root@root ~]<span class="hljs-comment"># chage -l alter</span><br>Last password <span class="hljs-keyword">change</span>                    : Sep <span class="hljs-number">14</span>, <span class="hljs-number">2018</span><br><span class="hljs-keyword">Password</span> expires                    : Nov <span class="hljs-number">13</span>, <span class="hljs-number">2018</span><br><span class="hljs-keyword">Password</span> inactive                    : <span class="hljs-keyword">never</span><br><span class="hljs-keyword">Account</span> expires                        : <span class="hljs-keyword">never</span><br><span class="hljs-keyword">Minimum</span> <span class="hljs-built_in">number</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">days</span> <span class="hljs-keyword">between</span> <span class="hljs-keyword">password</span> <span class="hljs-keyword">change</span>        : <span class="hljs-number">0</span><br>Maximum <span class="hljs-built_in">number</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">days</span> <span class="hljs-keyword">between</span> <span class="hljs-keyword">password</span> <span class="hljs-keyword">change</span>        : <span class="hljs-number">60</span><br><span class="hljs-built_in">Number</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">days</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">warning</span> <span class="hljs-keyword">before</span> <span class="hljs-keyword">password</span> expires    : <span class="hljs-number">7</span><br></code></pre></td></tr></table></figure><p>修改密码的过期属性可以执行如下命令：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">chage -M <span class="hljs-number">60</span> -W <span class="hljs-number">7</span>  alter<br>说明：<br>-M <span class="hljs-number">60</span>表示密码最大有效期是<span class="hljs-number">60</span>天。<br>-W <span class="hljs-number">7</span> 表示密码还有<span class="hljs-number">7</span>天过期时给出告警提醒。<br></code></pre></td></tr></table></figure><h3 id="6-检查密码为空的用户"><a href="#6-检查密码为空的用户" class="headerlink" title="6.检查密码为空的用户"></a>6.检查密码为空的用户</h3><p>密码为空意味着只要知道用户名就能访问，这非常危险。因为用户与密码信息保存在文件/etc/shadow中，且格式如下：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">admin:$<span class="hljs-number">6</span>$YTSkre3DLd4SAZ$Jy9piv/gPezhLrLzMMeUleV8F5DNjP:<span class="hljs-number">17765</span>:<span class="hljs-number">0</span>:<span class="hljs-number">99</span>:<span class="hljs-number">5</span>:::<br>alter:$<span class="hljs-number">6</span>$.vMcyE9ss96$YNk2Q5qiS/SAeGCcyEFsmspkC5dr3OXfnN:<span class="hljs-number">17788</span>:<span class="hljs-number">0</span>:<span class="hljs-number">60</span>:<span class="hljs-number">7</span>:::<br></code></pre></td></tr></table></figure><blockquote><p>后面的几个数字是密码过期等属性信息，上面已经提及。</p></blockquote><p>所以，检查密码为空的用户，只需要执行如下命令即可，如果发现有这样的用户，通过root用户执行<code>passwd username</code>强行修改它的密码：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">cat</span> /etc/shadow | awk -F: '(<span class="hljs-variable">$2</span>==<span class="hljs-string">""</span>)&#123;<span class="hljs-keyword">print</span> <span class="hljs-variable">$1&#125;</span>'<br></code></pre></td></tr></table></figure><h3 id="7-锁定-amp-解锁用户"><a href="#7-锁定-amp-解锁用户" class="headerlink" title="7.锁定&amp;解锁用户"></a>7.锁定&amp;解锁用户</h3><p>和删除用户账户不一样，这个只是限制用户登录。只需要执行如下密码即可锁定&amp;解锁用户：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros">[root@root ~]# passwd -l alter<br>Locking password <span class="hljs-keyword">for</span><span class="hljs-built_in"> user </span>alter.<br>passwd: Success<br>[root@root ~]# passwd -u alter<br>Unlocking password <span class="hljs-keyword">for</span><span class="hljs-built_in"> user </span>alter.<br>passwd: Success<br></code></pre></td></tr></table></figure><p>说明：</p><ul><li>参数l表示lock，即锁定用户密码；</li><li>参数u表示unlock，即解锁用户密码；</li></ul><h3 id="8-关闭IPv6"><a href="#8-关闭IPv6" class="headerlink" title="8.关闭IPv6"></a>8.关闭IPv6</h3><p>现在IPv6基本上没有实际使用，所以我们可以关掉它，在文件/etc/sysconfig/network中增加如下两行内容即可：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">NETWORKING_IPV6</span>=<span class="hljs-literal">no</span><br><span class="hljs-attr">IPV6INIT</span>=<span class="hljs-literal">no</span><br></code></pre></td></tr></table></figure><h3 id="9-复查日志"><a href="#9-复查日志" class="headerlink" title="9.复查日志"></a>9.复查日志</h3><p>Linux服务器上很多的行为都会有记录相应的日志，简单列举一些如下，如果有一些非法操作，就能从这些日志中造成蛛丝马迹，例如非法登陆，非法定时任务等：</p><ul><li>/var/log/message – Where whole system logs or current activity logs are available.</li><li>/var/log/auth.log – Authentication logs.</li><li>/var/log/kern.log – Kernel logs.</li><li>/var/log/cron.log – Crond logs (cron job).</li><li>/var/log/maillog – Mail server logs.</li><li>/var/log/boot.log – System boot log.</li><li>/var/log/mysqld.log – MySQL database server log file.</li><li>/var/log/secure – Authentication log.</li><li>/var/log/utmp or /var/log/wtmp : Login records file.</li><li>/var/log/yum.log: Yum log files.</li></ul><h3 id="10-保持系统更新"><a href="#10-保持系统更新" class="headerlink" title="10.保持系统更新"></a>10.保持系统更新</h3><p>总是让系统更新最新发行的补丁包，因为这些补丁包会修复一些BUG：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-builtin-name">get</span> upgrade<br><br>yum check-update<br>yum upgrade<br></code></pre></td></tr></table></figure><p><strong>欢迎关注微信公众号​：</strong></p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006y8mN6gy1g7d3llw1nkj30b40b4wee.jpg" srcset="/img/loading.gif" alt="欢迎关注公众号" style="width: 100px" />]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringCloud的版本</title>
    <link href="/2018/09/14/SpringCloud%E7%9A%84%E7%89%88%E6%9C%AC/"/>
    <url>/2018/09/14/SpringCloud%E7%9A%84%E7%89%88%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<p>Spring Cloud 项目目前仍然是快速迭代期，版本变化很快。这里整理一下版本相关的东西，备忘一下。</p><h2 id="大版本"><a href="#大版本" class="headerlink" title="大版本"></a>大版本</h2><h3 id="版本号规则"><a href="#版本号规则" class="headerlink" title="版本号规则"></a>版本号规则</h3><p>Spring Cloud并没有熟悉的数字版本号，而是对应一个开发代号。</p><a id="more"></a><table><thead><tr><th>Cloud代号</th><th>Boot版本(train)</th><th>Boot版本(tested)</th><th>lifecycle</th></tr></thead><tbody><tr><td>Angle</td><td>1.2.x</td><td>incompatible with 1.3</td><td>EOL in July 2017</td></tr><tr><td>Brixton</td><td>1.3.x</td><td>1.4.x</td><td>2017-07卒</td></tr><tr><td>Camden</td><td>1.4.x</td><td>1.5.x</td><td>-</td></tr><tr><td>Dalston</td><td>1.5.x</td><td>not expected 2.x</td><td>-</td></tr><tr><td>Edgware</td><td>1.5.x</td><td>not expected 2.x</td><td>-</td></tr><tr><td>Finchley</td><td>2.x</td><td>not expected 1.5.x</td><td>-</td></tr></tbody></table><p>开发代号看似没有什么规律，但实际上首字母是有顺序的，比如：Dalston版本，我们可以简称 D 版本，对应的 Edgware 版本我们可以简称 E 版本。</p><h3 id="D版本和E版本的区别"><a href="#D版本和E版本的区别" class="headerlink" title="D版本和E版本的区别"></a>D版本和E版本的区别</h3><p>二者均基于SpringBoot的1.5.x版本。但支持其他组件的版本不同，如以 Dalston.SR4 和 Edgware.RELEASE 来对比：</p><p>spring-cloud-config 分别对应 1.3.3和 1.4.0;<br>spring-cloud-netflix 分别对应 1.3.5和 1.4.0;<br>spring-cloud-consul 分别对应 1.2.1和 1.3.0;<br>spring-cloud-gateway 前者不支持，后者 1.0.0。</p><p>每个小版本的不同，会有细微差别。</p><h3 id="F版本"><a href="#F版本" class="headerlink" title="F版本"></a>F版本</h3><p>F版本是个绝对的大版本，几乎所有组件，全部同步变更版本号为2.x。</p><h2 id="小版本"><a href="#小版本" class="headerlink" title="小版本"></a>小版本</h2><p>Spring Cloud 小版本分为:</p><p>SNAPSHOT： 快照版本，随时可能修改</p><p>M： MileStone，M1表示第1个里程碑版本，一般同时标注PRE，表示预览版版。</p><p>SR： Service Release，SR1表示第1个正式版本，一般同时标注GA：(GenerallyAvailable),表示稳定版本。</p><h2 id="选择版本"><a href="#选择版本" class="headerlink" title="选择版本"></a>选择版本</h2><h3 id="大版本-1"><a href="#大版本-1" class="headerlink" title="大版本"></a>大版本</h3><ul><li>首先说明，各个版本之间组件变化不大，但细节略有不同，比如配置项名称、或者新版本增加新的配置方式。</li></ul><p>从这一点来看，选择哪个版本都不是大问题，但提醒一下，遇到坑时，最好根据版本进行查询，否则你会发现你找到的办法不行。实际上是版本不匹配。</p><ul><li>如果你项目需要和其他老项目交叉，以兼容为第一要务。</li><li>如果全新项目，可以考虑较新版本，如E版。如果你爱好踩坑，F拿去。</li></ul><h3 id="小版本-1"><a href="#小版本-1" class="headerlink" title="小版本"></a>小版本</h3><p>小版本没啥可说的，尝鲜：SNAPSHOT，生产：GA。</p><p>Release train contents:</p><table><thead><tr><th>Component</th><th>Edgware.SR4</th><th>Finchley.SR1</th><th>Finchley.BUILD-SNAPSHOT</th></tr></thead><tbody><tr><td>spring-cloud-aws</td><td>1.2.3.RELEASE</td><td>2.0.0.RELEASE</td><td>2.0.1.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-bus</td><td>1.3.3.RELEASE</td><td>2.0.0.RELEASE</td><td>2.0.1.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-cli</td><td>1.4.1.RELEASE</td><td>2.0.0.RELEASE</td><td>2.0.1.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-commons</td><td>1.3.4.RELEASE</td><td>2.0.1.RELEASE</td><td>2.0.2.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-contract</td><td>1.2.5.RELEASE</td><td>2.0.1.RELEASE</td><td>2.0.2.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-config</td><td>1.4.4.RELEASE</td><td>2.0.1.RELEASE</td><td>2.0.2.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-netflix</td><td>1.4.5.RELEASE</td><td>2.0.1.RELEASE</td><td>2.0.2.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-security</td><td>1.2.3.RELEASE</td><td>2.0.0.RELEASE</td><td>2.0.1.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-cloudfoundry</td><td>1.1.2.RELEASE</td><td>2.0.0.RELEASE</td><td>2.0.1.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-consul</td><td>1.3.4.RELEASE</td><td>2.0.1.RELEASE</td><td>2.0.2.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-sleuth</td><td>1.3.4.RELEASE</td><td>2.0.1.RELEASE</td><td>2.0.2.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-stream</td><td>Ditmars.SR4</td><td>Elmhurst.SR1</td><td>Elmhurst.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-zookeeper</td><td>1.2.2.RELEASE</td><td>2.0.0.RELEASE</td><td>2.0.1.BUILD-SNAPSHOT</td></tr><tr><td>spring-boot</td><td>1.5.14.RELEASE</td><td>2.0.4.RELEASE</td><td>2.0.4.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-task</td><td>1.2.3.RELEASE</td><td>2.0.0.RELEASE</td><td>2.0.1.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-vault</td><td>1.1.1.RELEASE</td><td>2.0.1.RELEASE</td><td>2.0.2.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-gateway</td><td>1.0.2.RELEASE</td><td>2.0.1.RELEASE</td><td>2.0.2.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-openfeign</td><td></td><td>2.0.1.RELEASE</td><td>2.0.2.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-function</td><td>1.0.0.RELEASE</td><td>1.0.0.RELEASE</td><td>1.0.1.BUILD-SNAPSHOT</td></tr></tbody></table><p><strong>欢迎关注微信公众号​：</strong></p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006y8mN6gy1g7d3llw1nkj30b40b4wee.jpg" srcset="/img/loading.gif" alt="欢迎关注公众号" style="width: 100px" />]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>SpringCloud</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>SpringCloud</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JAVA中通过Hibernate-Validation进行参数验证</title>
    <link href="/2018/09/13/JAVA%E4%B8%AD%E9%80%9A%E8%BF%87Hibernate-Validation%E8%BF%9B%E8%A1%8C%E5%8F%82%E6%95%B0%E9%AA%8C%E8%AF%81/"/>
    <url>/2018/09/13/JAVA%E4%B8%AD%E9%80%9A%E8%BF%87Hibernate-Validation%E8%BF%9B%E8%A1%8C%E5%8F%82%E6%95%B0%E9%AA%8C%E8%AF%81/</url>
    
    <content type="html"><![CDATA[<p>在开发JAVA服务器端代码时，我们会遇到对外部传来的参数合法性进行验证，而hibernate-validator提供了一些常用的参数校验注解，我们可以拿来使用。<br><strong>1.maven中引入hibernate-validator对应的jar：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.hibernate<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hibernate-validator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.3.1.Final<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><a id="more"></a><p>2.在Model中定义要校验的字段（即该字段不能为空，并且最大长度为14）：**</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.validation.constraints.Pattern;<br><span class="hljs-keyword">import</span> javax.validation.constraints.Size;<br><span class="hljs-keyword">import</span> org.hibernate.validator.constraints.NotEmpty;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PayRequestDto</span> </span>&#123;<br>     <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 支付完成时间</span><br><span class="hljs-comment">     **/</span><br>    <span class="hljs-meta">@NotEmpty</span>(message=<span class="hljs-string">"支付完成时间不能空"</span>)<br>    <span class="hljs-meta">@Size</span>(max=<span class="hljs-number">14</span>,message=<span class="hljs-string">"支付完成时间长度不能超过&#123;max&#125;位"</span>)<br>    <span class="hljs-keyword">private</span> String payTime;<br>     <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 状态</span><br><span class="hljs-comment">     **/</span><br>    <span class="hljs-meta">@Pattern</span>(regexp = <span class="hljs-string">"0[0123]"</span>, message = <span class="hljs-string">"状态只能为00或01或02或03"</span>)<br>    <span class="hljs-keyword">private</span> String status;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getPayTime</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> payTime;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPayTime</span><span class="hljs-params">(String payTime)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.payTime = payTime;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getStatus</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> status;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setStatus</span><span class="hljs-params">(String status)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.status = status;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>3.定义Validation工具类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-keyword">import</span> javax.validation.ConstraintViolation;<br><span class="hljs-keyword">import</span> javax.validation.Validation;<br><span class="hljs-keyword">import</span> javax.validation.Validator;<br><br><span class="hljs-keyword">import</span> org.hibernate.validator.HibernateValidator;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ValidationUtils</span> </span>&#123;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 使用hibernate的注解来进行验证</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Validator validator = Validation<br>            .byProvider(HibernateValidator<span class="hljs-class">.<span class="hljs-keyword">class</span>).<span class="hljs-title">configure</span>().<span class="hljs-title">failFast</span>(<span class="hljs-title">true</span>).<span class="hljs-title">buildValidatorFactory</span>().<span class="hljs-title">getValidator</span>()</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 功能描述: &lt;br&gt;</span><br><span class="hljs-comment">     * 〈注解验证参数〉</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> obj</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@see</span> [相关类/方法](可选)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@since</span> [产品/模块版本](可选)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">validate</span><span class="hljs-params">(T obj)</span> </span>&#123;<br>        Set&lt;ConstraintViolation&lt;T&gt;&gt; constraintViolations = validator.validate(obj);<br>        <span class="hljs-comment">// 抛出检验异常</span><br>        <span class="hljs-keyword">if</span> (constraintViolations.size() &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(String.format(<span class="hljs-string">"参数校验失败:%s"</span>, constraintViolations.iterator().next().getMessage()));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>4.在代码中调用工具类进行参数校验：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">ValidationUtils.validate(requestDto);<br></code></pre></td></tr></table></figure><p><strong>以下是对hibernate-validator中部分注解进行描述：</strong></p><table><thead><tr><th>注解</th><th>描述</th></tr></thead><tbody><tr><td>@AssertTrue</td><td>用于boolean字段，该字段只能为true</td></tr><tr><td>@AssertFalse</td><td>该字段的值只能为false</td></tr><tr><td>@CreditCardNumber</td><td>对信用卡号进行一个大致的验证</td></tr><tr><td>@DecimalMax</td><td>只能小于或等于该值</td></tr><tr><td>@DecimalMin</td><td>只能大于或等于该值</td></tr><tr><td>@Digits(integer=,fraction=)</td><td>检查是否是一种数字的整数、分数,小数位数的数字</td></tr><tr><td>@Email</td><td>检查是否是一个有效的email地址</td></tr><tr><td>@Future</td><td>检查该字段的日期是否是属于将来的日期</td></tr><tr><td>@Length(min=,max=)</td><td>检查所属的字段的长度是否在min和max之间,只能用于字符串</td></tr><tr><td>@Max</td><td>该字段的值只能小于或等于该值</td></tr><tr><td>@Min</td><td>该字段的值只能大于或等于该值</td></tr><tr><td>@NotNull</td><td>不能为null</td></tr><tr><td>@NotBlank</td><td>不能为空，检查时会将空格忽略</td></tr><tr><td>@NotEmpty</td><td>不能为空，这里的空是指空字符串</td></tr><tr><td>@Null</td><td>检查该字段为空</td></tr><tr><td>@Past</td><td>检查该字段的日期是在过去</td></tr><tr><td>@Pattern(regex=,flag=)</td><td>被注释的元素必须符合指定的正则表达式</td></tr><tr><td>@Range(min=,max=,message=)</td><td>被注释的元素必须在合适的范围内</td></tr><tr><td>@Size(min=, max=)</td><td>检查该字段的size是否在min和max之间，可以是字符串、数组、集合、Map等</td></tr><tr><td>@URL(protocol=,host,port)</td><td>检查是否是一个有效的URL，如果提供了protocol，host等，则该URL还需满足提供的条件</td></tr><tr><td>@Valid</td><td>该注解主要用于字段为一个包含其他对象的集合或map或数组的字段，或该字段直接为一个其他对象的引用，这样在检查当前对象的同时也会检查该字段所引用的对象</td></tr></tbody></table><p><strong>欢迎关注微信公众号​：</strong></p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006y8mN6gy1g7d3llw1nkj30b40b4wee.jpg" srcset="/img/loading.gif" alt="欢迎关注公众号" style="width: 100px" />]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Hibernate</tag>
      
      <tag>validation</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用JAVA写一个简易图片防篡改</title>
    <link href="/2018/09/11/%E7%94%A8JAVA%E5%86%99%E4%B8%80%E4%B8%AA%E7%AE%80%E6%98%93%E5%9B%BE%E7%89%87%E9%98%B2%E7%AF%A1%E6%94%B9/"/>
    <url>/2018/09/11/%E7%94%A8JAVA%E5%86%99%E4%B8%80%E4%B8%AA%E7%AE%80%E6%98%93%E5%9B%BE%E7%89%87%E9%98%B2%E7%AF%A1%E6%94%B9/</url>
    
    <content type="html"><![CDATA[<h2 id="图片防止篡改部分"><a href="#图片防止篡改部分" class="headerlink" title="图片防止篡改部分"></a>图片防止篡改部分</h2><p>第一步，获取图片的md5字符串，并转为字节数组</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//将图片使用md5加密</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">byte</span>[] img2Md5Bytes(File file,String salt) <span class="hljs-keyword">throws</span> Exception&#123;<br>       FileInputStream inputStream=<span class="hljs-keyword">new</span> FileInputStream(file);<br>       StringBuilder builder=<span class="hljs-keyword">new</span> StringBuilder();<br>       <span class="hljs-keyword">byte</span>[] bytes=<span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>       <span class="hljs-keyword">int</span> bytesRead;<br>       <span class="hljs-keyword">while</span> ((bytesRead=inputStream.read(bytes))!=-<span class="hljs-number">1</span>)&#123;<br>           builder.append(<span class="hljs-keyword">new</span> String(bytes,<span class="hljs-number">0</span>,bytesRead));<br>       &#125;<br>       inputStream.close();<br>       builder.append(salt);<br>       String md5=md5(builder.toString());<br>       <span class="hljs-keyword">return</span> hexStringToBytes(md5);<br>   &#125;<br><br>   <span class="hljs-comment">//16进制转字节数组</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span>   <span class="hljs-keyword">byte</span>[] hexStringToBytes(String hexString) &#123;<br>       <span class="hljs-keyword">if</span> (hexString == <span class="hljs-keyword">null</span> || hexString.equals(<span class="hljs-string">""</span>)) &#123;<br>           <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>       &#125;<br>       hexString = hexString.toUpperCase();<br>       <span class="hljs-keyword">int</span> length = hexString.length() / <span class="hljs-number">2</span>;<br>       <span class="hljs-keyword">char</span>[] hexChars = hexString.toCharArray();<br>       <span class="hljs-keyword">byte</span>[] d = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[length];<br>       <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; length; i++) &#123;<br>           <span class="hljs-keyword">int</span> pos = i * <span class="hljs-number">2</span>;<br>           d[i] = (<span class="hljs-keyword">byte</span>) (charToByte(hexChars[pos]) &lt;&lt; <span class="hljs-number">6</span> | charToByte(hexChars[pos + <span class="hljs-number">1</span>]));<br>       &#125;<br>       <span class="hljs-keyword">return</span> d;<br>   &#125;<br>   <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">byte</span> <span class="hljs-title">charToByte</span><span class="hljs-params">(<span class="hljs-keyword">char</span> c)</span> </span>&#123;<br>       <span class="hljs-keyword">return</span> (<span class="hljs-keyword">byte</span>) <span class="hljs-string">"0123456789ABCDEF"</span>.indexOf(c);<br>   &#125;<br><br><br>   <span class="hljs-comment">//md5加密字符串</span><br>   <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">md5</span><span class="hljs-params">(String str)</span> </span>&#123;<br>       <span class="hljs-keyword">try</span> &#123;<br>           MessageDigest md = MessageDigest.getInstance(<span class="hljs-string">"MD5"</span>);<br>           md.update(str.getBytes());<br>           <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> BigInteger(<span class="hljs-number">1</span>, md.digest()).toString(<span class="hljs-number">16</span>);<br>       &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>           <span class="hljs-keyword">return</span> <span class="hljs-string">""</span>;<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><p>第二步，图片末尾加md5字节数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//图片末尾加md5字节数组</span><br>   <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">imgAppendMd5Bytes</span><span class="hljs-params">(File file,<span class="hljs-keyword">byte</span>[] md5Bytes)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>       RandomAccessFile accessFile=<span class="hljs-keyword">new</span> RandomAccessFile(file,<span class="hljs-string">"rw"</span>);<br>       <span class="hljs-keyword">long</span> length=accessFile.length();<br>       accessFile.seek(length);<br>       accessFile.write(md5Bytes);<br>       accessFile.close();<br>   &#125;<br></code></pre></td></tr></table></figure><p>第三步，封装一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//防止图片被篡改</span><br>  <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">preventTamper</span><span class="hljs-params">(File file,String salt)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>      <span class="hljs-keyword">byte</span>[] md5bytes=img2Md5Bytes(file,salt);<br>      imgAppendMd5Bytes(file,md5bytes);<br>  &#125;<br></code></pre></td></tr></table></figure><h2 id="图片验证部分"><a href="#图片验证部分" class="headerlink" title="图片验证部分"></a>图片验证部分</h2><p>第一步，获取图片的末尾存储的md5字节数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//获取存储在图片末尾的16个md5字节</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">byte</span>[] popMd5Bytes(File file) <span class="hljs-keyword">throws</span> Exception&#123;<br>       RandomAccessFile accessFile=<span class="hljs-keyword">new</span> RandomAccessFile(file,<span class="hljs-string">"rw"</span>);<br>       <span class="hljs-keyword">byte</span>[] bytes=<span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">16</span>];<br>       <span class="hljs-keyword">long</span> length=accessFile.length();<br>       accessFile.seek(length-<span class="hljs-number">16</span>);<br>       <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">16</span>;i++)&#123;<br>           bytes[i]=accessFile.readByte();<br>       &#125;<br>       accessFile.close();<br>       <span class="hljs-keyword">return</span> bytes;<br>   &#125;<br></code></pre></td></tr></table></figure><p>第二步，去除图片末尾的16个md5字节后，重新计算图片的md5值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//去除图片末尾的16个md5字节</span><br>   <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">imgDelEndMd5Bytes</span><span class="hljs-params">(File file)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>       RandomAccessFile accessFile=<span class="hljs-keyword">new</span> RandomAccessFile(file,<span class="hljs-string">"rw"</span>);<br>       FileChannel fc = accessFile.getChannel();<br>       fc.truncate(accessFile.length()-<span class="hljs-number">16</span>);<br>       fc.close();<br>       accessFile.close();<br>   &#125;<br><span class="hljs-keyword">byte</span>[] imgMd5=img2Md5Bytes(file,salt);<br></code></pre></td></tr></table></figure><p>第三步，封装为方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//验证图片是否被篡改</span><br>   <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">notTamper</span><span class="hljs-params">(File file,String salt)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>       <span class="hljs-keyword">byte</span>[] storageMd5=popMd5Bytes(file);<span class="hljs-comment">//获取存储在图片末尾的16个md5字节</span><br>       imgDelEndMd5Bytes(file);<span class="hljs-comment">//删除末尾md5字节数组</span><br>       <span class="hljs-keyword">byte</span>[] imgMd5=img2Md5Bytes(file,salt);<br>       <span class="hljs-keyword">return</span> Arrays.equals(storageMd5,imgMd5);<br>   &#125;<br></code></pre></td></tr></table></figure><p>简单实现，没有进行调优</p><h3 id="欢迎关注微信公众号"><a href="#欢迎关注微信公众号" class="headerlink" title="欢迎关注微信公众号"></a>欢迎关注微信公众号</h3><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006y8mN6gy1g7d3llw1nkj30b40b4wee.jpg" srcset="/img/loading.gif" alt="欢迎关注公众号" style="width: 100px" />]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CentOS下安装环境文档</title>
    <link href="/2018/09/11/CentOS%E4%B8%8B%E5%AE%89%E8%A3%85%E7%8E%AF%E5%A2%83%E6%96%87%E6%A1%A3/"/>
    <url>/2018/09/11/CentOS%E4%B8%8B%E5%AE%89%E8%A3%85%E7%8E%AF%E5%A2%83%E6%96%87%E6%A1%A3/</url>
    
    <content type="html"><![CDATA[<hr><p>【JDK1.7安装】</p><hr><p>1)登录Sun的JDK官方下载网 址:<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html" target="_blank" rel="noopener">http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html</a></p><p>2)下载jdk-7u67-linux-x64.rpm文件</p><p>》删除系统自带OpenJDK</p><p>CentOs6.5 默认会安装OpenOffice之类，需要JAVA支持，系统默认安装了一个openjdk1.7版本</p><a id="more"></a><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># java -version</span><br><br>java version <span class="hljs-string">"1.7.0"</span><br><br>OpenJDK  Runtime Environment (build 1.7.0-b09)<br><br>OpenJDK<span class="hljs-built_in"> Client </span>VM (build 1.7.0-b09, mixed mode)<br></code></pre></td></tr></table></figure><blockquote><p>备注：</p><p>无须删除原有的openjdk;否则，与之相关的openoffice等软件，也会自动随之删除；</p></blockquote><p>如果直接”应用程序-添加/删除软件–基本系统–java“删除其他相关软件也会自动删除，所以删除前，最好安装配置好新的JDK环境</p><p> 1) 删除原有的JDK：</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta"># rpm -qa|grep jdk</span><br></code></pre></td></tr></table></figure><p>查看安装的JDK，会显示多个java-1.7.0-openjdk-1.7.0相关的程序，在以下一一卸载。直到删完为止，如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"># <span class="hljs-selector-tag">rpm</span> <span class="hljs-selector-tag">-e</span> <span class="hljs-selector-tag">--nodeps</span> <span class="hljs-selector-tag">java-1</span><span class="hljs-selector-class">.7</span><span class="hljs-selector-class">.0-openjdk-1</span><span class="hljs-selector-class">.7</span><span class="hljs-selector-class">.0</span><span class="hljs-selector-class">.65-2</span><span class="hljs-selector-class">.5</span><span class="hljs-selector-class">.1</span><span class="hljs-selector-class">.2</span><span class="hljs-selector-class">.el6_5</span><span class="hljs-selector-class">.x86_64</span><br># <span class="hljs-selector-tag">rpm</span> <span class="hljs-selector-tag">-e</span> <span class="hljs-selector-tag">--nodeps</span> <span class="hljs-selector-tag">java-1</span><span class="hljs-selector-class">.7</span><span class="hljs-selector-class">.0-openjdk-devel-1</span><span class="hljs-selector-class">.7</span><span class="hljs-selector-class">.0</span><span class="hljs-selector-class">.65-2</span><span class="hljs-selector-class">.5</span><span class="hljs-selector-class">.1</span><span class="hljs-selector-class">.2</span><span class="hljs-selector-class">.el6_5</span><span class="hljs-selector-class">.x86_64</span><br># <span class="hljs-selector-tag">rpm</span> <span class="hljs-selector-tag">-e</span> <span class="hljs-selector-tag">--nodeps</span> <span class="hljs-selector-tag">java-1</span><span class="hljs-selector-class">.7</span><span class="hljs-selector-class">.0-openjdk-demo-1</span><span class="hljs-selector-class">.7</span><span class="hljs-selector-class">.0</span><span class="hljs-selector-class">.65-2</span><span class="hljs-selector-class">.5</span><span class="hljs-selector-class">.1</span><span class="hljs-selector-class">.2</span><span class="hljs-selector-class">.el6_5</span><span class="hljs-selector-class">.x86_64</span><br></code></pre></td></tr></table></figure><p>……</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta"># rpm -qa|grep java</span><br></code></pre></td></tr></table></figure><p>查看安装的JAVA关联程序，在以下一一卸载。直到删完为止，如下：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"># rpm -e --nodeps tzdata-java<span class="hljs-number">-2014</span>h<span class="hljs-number">-1.</span>el6.noarch<br></code></pre></td></tr></table></figure><p>……</p><p>》配置新的JDK环境</p><p>1）把安装文件文件保存在/usr/java/tools下 ,并切换到root用户</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta"># mkdir /usr/java  //创建/urs/java目录</span><br><span class="hljs-meta"># cd /usr/java/</span><br><span class="hljs-meta"># rpm -ivh ./tools/jdk-7u67-linux-x64.rpm</span><br></code></pre></td></tr></table></figure><p>》配置jdk1.6.0_22环境变量</p> <figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-comment"># vi /etc/profile</span><br><br>JAVA_HOME=<span class="hljs-regexp">/usr/java</span><span class="hljs-regexp">/jdk1.7.0_79</span><br><span class="hljs-regexp">JRE_HOME=/usr</span><span class="hljs-regexp">/java/jdk</span>1.<span class="hljs-number">7.0_79</span>/jre<br>PATH=<span class="hljs-symbol">PATH:</span>JAVA_HOME/<span class="hljs-symbol">bin:</span>$JRE_HOME/bin<br>CLASSPATH=:JAVA_HOME/<span class="hljs-class"><span class="hljs-keyword">lib</span>/<span class="hljs-title">dt</span>.<span class="hljs-title">jar</span>:<span class="hljs-title">JAVA_HOME</span>/<span class="hljs-title">lib</span>/<span class="hljs-title">tools</span>.<span class="hljs-title">jar</span>:$<span class="hljs-title">JRE_HOME</span>/<span class="hljs-title">lib</span></span><br>export JAVA_HOME JRE_HOME PATH CLASSPATH<br></code></pre></td></tr></table></figure><p>》使环境变量生效：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">#<span class="hljs-keyword">source</span> <span class="hljs-regexp">/etc/</span>profile<br></code></pre></td></tr></table></figure><p>》测试安装</p><p>   1)查看版本号</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># java -version</span><br><br>java version <span class="hljs-string">"1.7.0_67"</span><br>Java(TM) SE Runtime Environment (build 1.7.0_67-b01)<br>Java HotSpot(TM) 64-Bit<span class="hljs-built_in"> Server </span>VM (build 24.65-b04, mixed mode)<br>Java HotSpot(TM)<span class="hljs-built_in"> Client </span>VM (build 17.1-b03, mixed mode, sharing)<br></code></pre></td></tr></table></figure><p>说明成功了。</p><hr><p>【MYSQL5.5的安装】</p><hr><p>安装方式分为rpm和源码编译安装两种，本文是采用mysql源码编译方式，编译器使用Cmake。软件需要mysql-5.5.40.tar.gz和cmake-2.8.10.2.tar.gz，请自行下载。</p><p>》下载地址：</p><p><a href="http://dev.mysql.com/get/Downloads/MySQL-5.5/mysql-5.5.40.tar.gz" target="_blank" rel="noopener">http://dev.mysql.com/get/Downloads/MySQL-5.5/mysql-5.5.40.tar.gz</a></p><p><a href="http://www.cmake.org/files/v2.8/cmake-2.8.10.2.tar.gz" target="_blank" rel="noopener">http://www.cmake.org/files/v2.8/cmake-2.8.10.2.tar.gz</a></p><p>其中mysql使用最新的稳定版本，即最新试用版的上一个版本，且非rc或者alpha的版本，Cmake直接用的最新版。</p><p> 》上传mysql-5.5.40.tar.gz和cmake-2.8.10.2.tar.gz到/usr/java/tools文件夹下。</p><p> 》CentOS安装g++和ncurses-devel</p> <figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta"># yum install gcc-c++</span><br><span class="hljs-meta"># yum install ncurses-devel</span><br></code></pre></td></tr></table></figure><p>》cmake的安装</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta"># mkdir -p /usr/java/make</span><br><span class="hljs-meta"># cd /usr/java/make</span><br><span class="hljs-meta"># mv ../tools/cmake-2.8.10.2.tar.gz ./</span><br><span class="hljs-meta"># tar -zxv -f cmake-2.8.10.2.tar.gz</span><br><span class="hljs-meta"># cd cmake-2.8.10.2</span><br><span class="hljs-meta"># ./configure</span><br><span class="hljs-meta"># make</span><br><span class="hljs-meta"># make install</span><br></code></pre></td></tr></table></figure><p>》将cmake永久加入系统环境变量</p><p>》用vi在文件/etc/profile文件中增加变量，使其永久有效，</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta"># vi /etc/profile</span><br></code></pre></td></tr></table></figure><p>》在文件PATH中加入MAKE_PATH环境变量：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs crystal">JAVA_HOME=<span class="hljs-regexp">/usr/java</span><span class="hljs-regexp">/jdk1.7.0_67</span><br><span class="hljs-regexp">JRE_HOME=/usr</span><span class="hljs-regexp">/java/jdk</span>1.<span class="hljs-number">7.0_67</span>/jre<br>MAKE_PATH=<span class="hljs-regexp">/usr/java</span><span class="hljs-regexp">/cmake/cmake</span>-<span class="hljs-number">2.8</span>.<span class="hljs-number">10.2</span>/bin<br>PATH=<span class="hljs-symbol">MAKE_PATH:</span><span class="hljs-symbol">PATH:</span>JAVA_HOME/<span class="hljs-symbol">bin:</span>JRE_HOME/bin<br>CLASSPATH=:JAVA_HOME/<span class="hljs-class"><span class="hljs-keyword">lib</span>/<span class="hljs-title">dt</span>.<span class="hljs-title">jar</span>:<span class="hljs-title">JAVA_HOME</span>/<span class="hljs-title">lib</span>/<span class="hljs-title">tools</span>.<span class="hljs-title">jar</span>:$<span class="hljs-title">JRE_HOME</span>/<span class="hljs-title">lib</span></span><br>export JAVA_HOME JRE_HOME PATH CLASSPATH<br></code></pre></td></tr></table></figure><p>》执行以下代码使刚才的修改生效：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"># <span class="hljs-keyword">source</span> <span class="hljs-regexp">/etc/</span>profile<br></code></pre></td></tr></table></figure><p>》用 export 命令查看PATH值</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-built_in">echo</span> <span class="hljs-variable">$PATH</span></span><br></code></pre></td></tr></table></figure><p>》创建mysql的安装目录及数据库存放目录</p> <figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta"># mkdir -p /usr/java/mysql <span class="hljs-comment">//安装mysql</span></span><br><span class="hljs-meta"># mkdir -p /usr/java/mysql/data <span class="hljs-comment">//存放数据库</span></span><br></code></pre></td></tr></table></figure><p>》创建mysql用户及用户组</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta"># groupadd mysql</span><br><span class="hljs-meta"># useradd -r -g mysql mysql</span><br></code></pre></td></tr></table></figure><p>》编译安装mysql</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># cd /usr/java/mysql</span><br><span class="hljs-comment"># tar zxvf ../tools/mysql-5.5.40.tar.gz</span><br><span class="hljs-comment"># cd mysql-5.5.40/</span><br><span class="hljs-comment"># cmake -DCMAKE_INSTALL_PREFIX=/usr/java/mysql \</span><br><span class="hljs-attr">-DMYSQL_UNIX_ADDR</span>=/usr/java/mysql/mysql.sock \<br><span class="hljs-attr">-DDEFAULT_CHARSET</span>=utf8 \<br><span class="hljs-attr">-DDEFAULT_COLLATION</span>=utf8_general_ci \<br><span class="hljs-attr">-DWITH_MYISAM_STORAGE_ENGINE</span>=<span class="hljs-number">1</span> \<br><span class="hljs-attr">-DWITH_INNOBASE_STORAGE_ENGINE</span>=<span class="hljs-number">1</span> \<br><span class="hljs-attr">-DWITH_MEMORY_STORAGE_ENGINE</span>=<span class="hljs-number">1</span> \<br><span class="hljs-attr">-DWITH_READLINE</span>=<span class="hljs-number">1</span> \<br><span class="hljs-attr">-DENABLED_LOCAL_INFILE</span>=<span class="hljs-number">1</span> \<br><span class="hljs-attr">-DMYSQL_DATADIR</span>=/usr/java/mysql/data \<br><span class="hljs-attr">-DMYSQL_USER</span>=mysql \<br><span class="hljs-attr">-DMYSQL_TCP_PORT</span>=<span class="hljs-number">6666</span><br><span class="hljs-comment"># make</span><br><span class="hljs-comment"># make install</span><br></code></pre></td></tr></table></figure><p>》检验是否安装成功</p> <figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-comment"># cd  /usr/java/mysql</span><br>[root@fiona mysql]<span class="hljs-comment"># ls</span><br>bin      data  <span class="hljs-keyword">include</span>         <span class="hljs-class"><span class="hljs-keyword">lib</span>  <span class="hljs-title">mysql</span>-5.5.40  <span class="hljs-title">mysql</span>-<span class="hljs-title">test</span>  <span class="hljs-title">scripts</span>  <span class="hljs-title">sql</span>-<span class="hljs-title">bench</span></span><br>COPYING  docs  INSTALL-BINARY  man  mysql.sock    README      share    support-files<br></code></pre></td></tr></table></figure><p> 有bin等以上文件的话，恭喜你已经成功安装了mysql。</p><p> 》配置mysql</p><p> 》设置mysql目录权限</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta"># cd /usr/java/mysql //把当前目录中所有文件的所有者设为root，所属组为mysql</span><br><span class="hljs-meta"># chown -R root:mysql .</span><br><span class="hljs-meta"># chown -R mysql:mysql data</span><br></code></pre></td></tr></table></figure><p>》将mysql的启动服务添加到系统服务中</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim"># <span class="hljs-keyword">cp</span> support-<span class="hljs-keyword">files</span>/my-medium.<span class="hljs-keyword">cnf</span> /etc/my.<span class="hljs-keyword">cnf</span><br><span class="hljs-keyword">cp</span>：是否覆盖<span class="hljs-string">"/etc/my.cnf"</span>？ <span class="hljs-keyword">y</span><br></code></pre></td></tr></table></figure><p>》创建系统数据库的表</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta"># cd /usr/java/mysql</span><br><span class="hljs-meta"># scripts/mysql_install_db --user=mysql</span><br></code></pre></td></tr></table></figure><p>》设置环境变量</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta"># vi /root/.bash_profile</span><br></code></pre></td></tr></table></figure><p>在修改PATH=$PATH:$HOME/bin为：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crystal">PATH=<span class="hljs-symbol">PATH:</span>HOME/<span class="hljs-symbol">bin:</span>/usr/java/mysql/<span class="hljs-symbol">bin:</span>/usr/java/mysql/<span class="hljs-class"><span class="hljs-keyword">lib</span></span><br><span class="hljs-comment"># source /root/.bash_profile //使刚才的修改生效</span><br></code></pre></td></tr></table></figure><p>》手动启动mysql</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta"># ./bin/mysqld_safe --user=mysql &amp; <span class="hljs-comment">//启动MySQL，但不能停止</span></span><br>mysqladmin -u root -p shutdown <span class="hljs-comment">//此时root还没密码，所以为空值，提示输入密码时，直接回车即可。</span><br></code></pre></td></tr></table></figure><p>》将mysql的启动服务添加到系统服务中</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elm"># cp sup<span class="hljs-keyword">port</span>-files/mysql.server /etc/init.d/mysql<br></code></pre></td></tr></table></figure><p>》启动mysql</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># service mysql start</span><br>Starting MySQL<span class="hljs-built_in">..</span>. ERROR! The<span class="hljs-built_in"> server </span>quit without updating PID file (/usr/java/mysql/data/localhost.localdomain.pid).<br></code></pre></td></tr></table></figure><p>》启动失败：</p><p>》我这里是权限问题，先改变权限</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta"># chown -R mysql:mysql /usr/java/mysql</span><br></code></pre></td></tr></table></figure><p>》接着启动服务器</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta"># /etc/init.d/mysql start</span><br></code></pre></td></tr></table></figure><p>》修改MySQL的root用户的密码以及打开远程连接</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"># mysql -u root mysql<br>mysql&gt; use mysql;<br>mysql&gt; <span class="hljs-keyword">desc</span> <span class="hljs-keyword">user</span>;<br>mysql&gt; <span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">ALL</span> <span class="hljs-keyword">PRIVILEGES</span> <span class="hljs-keyword">ON</span> . <span class="hljs-keyword">TO</span> root@"%" IDENTIFIED <span class="hljs-keyword">BY</span> "root"; //为root添加远程连接的能力<br>mysql&gt; <span class="hljs-keyword">update</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">set</span> <span class="hljs-keyword">Password</span> = <span class="hljs-keyword">password</span>(<span class="hljs-string">'x123456.'</span>) <span class="hljs-keyword">where</span> <span class="hljs-keyword">User</span>=<span class="hljs-string">'root'</span>; //设置root用户密码<br>mysql&gt; <span class="hljs-keyword">select</span> Host,<span class="hljs-keyword">User</span>,<span class="hljs-keyword">Password</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> <span class="hljs-keyword">User</span>=<span class="hljs-string">'root'</span>;<br>mysql&gt; flush <span class="hljs-keyword">privileges</span>;<br>mysql&gt; <span class="hljs-keyword">exit</span><br></code></pre></td></tr></table></figure><p>》重新登录</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># mysql -u root -p</span><br><span class="hljs-attribute">enter</span> password:x123456.<span class="hljs-number">000</span><br></code></pre></td></tr></table></figure><p>》若还不能进行远程连接，关闭防火墙</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost]</span><span class="hljs-meta"># /etc/rc.d/init.d/iptables stop</span><br></code></pre></td></tr></table></figure><p>用远程工具连接上了表示成功了。</p><hr><p>【TOMCAT7.0的安装】</p><hr><p>》先下载apache-tomcat-7.0.56.tar.gz</p><p>》下载地下：<a href="http://mirrors.hust.edu.cn/apache/tomcat/tomcat-7/v7.0.56/bin/apache-tomcat-7.0.56.tar.gz" target="_blank" rel="noopener">http://mirrors.hust.edu.cn/apache/tomcat/tomcat-7/v7.0.56/bin/apache-tomcat-7.0.56.tar.gz</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br><span class="hljs-comment"># cd /usr/java</span><br><span class="hljs-comment"># tar -zxvf ./tools/apache-tomcat-7.0.56.tar.gz</span><br><span class="hljs-comment"># cd /etc/rc.d/init.d</span><br><span class="hljs-comment"># vi tomcat</span><br><span class="hljs-comment">#----------输入以下信息---------------------</span><br><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># chkconfig: 345 80 15</span><br><span class="hljs-comment"># description: Tomcat is a Servlet+JSP Engine.</span><br><span class="hljs-comment"># Enter the jdk installation directory</span><br>jdk_File=/usr/java/jdk1.7.0_67<br><span class="hljs-comment"># Enter the tomcat installation directory</span><br>tomcat_File=/usr/java/apache-tomcat-7.0.56<br><span class="hljs-built_in">export</span> JAVA_HOME=<span class="hljs-variable">$jdk_File</span><br><span class="hljs-comment"># Source function library.</span><br>. /etc/rc.d/init.d/<span class="hljs-built_in">functions</span><br><span class="hljs-function"><span class="hljs-title">start</span></span>()&#123;<br><span class="hljs-keyword">if</span> [ -z $(/sbin/pidof java) ]; <span class="hljs-keyword">then</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">"Starting tomcat"</span><br><span class="hljs-variable">$tomcat_File</span>/bin/startup.sh<br>touch /var/lock/subsys/tomcat<br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">"tomcat allready running"</span><br><span class="hljs-keyword">fi</span><br>&#125;<br><span class="hljs-function"><span class="hljs-title">stop</span></span>()&#123;<br><span class="hljs-keyword">if</span> [ ! -z $(/sbin/pidof java) ]; <span class="hljs-keyword">then</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">"Shutting down tomcat"</span><br><span class="hljs-variable">$tomcat_File</span>/bin/shutdown.sh<br>until [ -z $(/sbin/pidof java) ]; <span class="hljs-keyword">do</span> :; <span class="hljs-keyword">done</span><br>rm -f /var/lock/subsys/tomcat<br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">"tomcat not running"</span><br><span class="hljs-keyword">fi</span><br>&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-string">"<span class="hljs-variable">$1</span>"</span> <span class="hljs-keyword">in</span><br>start)<br>start<br>;;<br>stop)<br>stop<br>;;<br>restart)<br>stop<br>start<br>;;<br>status)<br><span class="hljs-variable">$tomcat_File</span>/bin/catalina.sh version<br>;;<br>*)<br><span class="hljs-built_in">echo</span> <span class="hljs-string">"Usage: <span class="hljs-variable">$0</span> &#123;start|stop|restart|status&#125;"</span><br><span class="hljs-keyword">esac</span><br><span class="hljs-built_in">exit</span> 0<br><span class="hljs-comment">#----------输入以下信息---------------------</span><br><br>:wq! <span class="hljs-comment">#保存退出 </span><br><span class="hljs-comment"># chmod 755 /etc/rc.d/init.d/tomcat #添加执行权限</span><br><span class="hljs-comment"># chkconfig --add tomcat #添加服务</span><br><span class="hljs-comment"># chkconfig tomcat on #设置开机启动</span><br><span class="hljs-comment"># service tomcat stop #停止</span><br><span class="hljs-comment"># service tomcat start #启动</span><br><span class="hljs-comment"># service tomcat restart #重启</span><br><span class="hljs-comment"># service tomcat status #查看状态信息</span><br></code></pre></td></tr></table></figure><hr><p>【nginx-1.7.6.tar.gz的安装】</p><hr><p>》先下载nginx-1.7.6.tar.gz</p><p>》下载URL:<a href="http://nginx.org/download/nginx-1.7.6.tar.gz" target="_blank" rel="noopener">http://nginx.org/download/nginx-1.7.6.tar.gz</a></p><p>》把nginx-1.7.6.tar.gz放到/usr/java/tools目录下</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta"># cd /usr/local/</span><br><span class="hljs-meta"># tar -zxvf /usr/java/tools/nginx-1.7.5.tar.gz</span><br><span class="hljs-meta"># cd nginx-1.7.6/</span><br><span class="hljs-meta"># yum -y install pcre-devel</span><br><span class="hljs-meta"># yum install -y zlib-devel</span><br><span class="hljs-meta"># ./configure</span><br><span class="hljs-meta"># make &amp;&amp; make install</span><br><span class="hljs-meta"># cd /usr/local/nginx</span><br><span class="hljs-meta"># cd sbin</span><br><span class="hljs-meta"># ./nginx</span><br><span class="hljs-meta"># /etc/rc.d/init.d/iptables stop</span><br></code></pre></td></tr></table></figure><p>》配置服务器启动方式</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># vi /etc/init.d/nginx</span><br><span class="hljs-comment">#---------输入以下信息------------------</span><br><br><span class="hljs-comment"># nginx Startup script for the Nginx HTTP Server</span><br><span class="hljs-comment"># it is v.0.0.2 version.</span><br><span class="hljs-comment"># chkconfig: - 85 15</span><br><span class="hljs-comment"># description: Nginx is a high-performance web and proxy server.</span><br><span class="hljs-comment"># It has a lot of features, but it's not for everyone.</span><br><span class="hljs-comment"># processname: nginx</span><br><span class="hljs-comment"># pidfile: /software/nginx/logs/nginx.pid</span><br><span class="hljs-comment"># config: /software/nginx/conf/nginx.conf</span><br><span class="hljs-attribute">nginxd</span>=/usr/local/nginx/sbin/nginx<br><span class="hljs-attribute">nginx_config</span>=/usr/local/nginx/conf/nginx.conf<br><span class="hljs-attribute">nginx_pid</span>=/usr/local/nginx/logs/nginx.pid<br><span class="hljs-attribute">RETVAL</span>=0<br><span class="hljs-attribute">prog</span>=<span class="hljs-string">"nginx"</span><br><span class="hljs-comment"># Source function library.</span><br>. /etc/rc.d/init.d/functions<br><span class="hljs-comment"># Source networking configuration.</span><br>. /etc/sysconfig/network<br><span class="hljs-comment"># Check that networking is up.</span><br>[ <span class="hljs-variable">$&#123;NETWORKING&#125;</span> = <span class="hljs-string">"no"</span> ] &amp;&amp; exit 0<br>[ -x <span class="hljs-variable">$nginxd</span> ] || exit 0<br><span class="hljs-comment"># Start nginx daemons functions.</span><br>start() &#123;<br><span class="hljs-keyword">if</span> [ -e <span class="hljs-variable">$nginx_pid</span> ];then<br>echo <span class="hljs-string">"nginx already running...."</span><br>exit 1<br>fi<br>echo -n <span class="hljs-string">"Starting prog: "</span><br>daemon nginxd -c &#123;nginx_config&#125;<br><span class="hljs-attribute">RETVAL</span>=$?<br>echo<br>[ <span class="hljs-variable">$RETVAL</span> = 0 ] &amp;&amp; touch /var/lock/subsys/nginx<br>return <span class="hljs-variable">$RETVAL</span><br>&#125;<br><span class="hljs-comment"># Stop nginx daemons functions.</span><br>stop() &#123;<br>echo -n <span class="hljs-string">"Stopping prog: "</span><br>killproc <span class="hljs-variable">$nginxd</span><br><span class="hljs-attribute">RETVAL</span>=$?<br>echo<br>[ <span class="hljs-variable">$RETVAL</span> = 0 ] &amp;&amp; rm -f /var/lock/subsys/nginx /usr/local/nginx/logs/nginx.pid<br>&#125;<br>reload() &#123;<br>echo -n <span class="hljs-string">"Reloading prog: "</span><br><span class="hljs-comment">#kill -HUP cat $&#123;nginx_pid&#125;</span><br>killproc <span class="hljs-variable">$nginxd</span> -HUP<br><span class="hljs-attribute">RETVAL</span>=$?<br>echo<br>&#125;<br><span class="hljs-comment"># See how we were called.</span><br>case <span class="hljs-string">"<span class="hljs-variable">$1</span>"</span> <span class="hljs-keyword">in</span><br>start)<br>start<br>;;<br>stop)<br>stop<br>;;<br>reload)<br>reload<br>;;<br>restart)<br>stop<br>start<br>;;<br>status)<br>status <span class="hljs-variable">$prog</span><br><span class="hljs-attribute">RETVAL</span>=$?<br>;;<br>*)<br>echo <span class="hljs-string">"Usage: prog &#123;start|stop|restart|reload|status|help&#125;"</span><br>exit 1<br>esac<br>exit <span class="hljs-variable">$RETVAL</span><br><span class="hljs-comment">#---------输入以下信息------------------</span><br><br><span class="hljs-comment"># chmod 755 /etc/init.d/nginx &amp;&amp; chkconfig nginx on</span><br><span class="hljs-comment"># service nginx start</span><br><span class="hljs-comment"># service nginx stop</span><br><span class="hljs-comment"># service nginx restart</span><br><span class="hljs-comment"># ps -ef | grep nginx</span><br><span class="hljs-comment"># netstat -pant | grep 80</span><br></code></pre></td></tr></table></figure><p>》测试在浏览器中输入广域网IP看看能不能看到欢迎界面，如果能就表示成功了。</p><hr><p>【配置规则】</p><hr><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta"># vi /etc/sysconfig/iptables</span><br></code></pre></td></tr></table></figure><p>增加如下配置:</p><blockquote><p>-A INPUT -m state –state NEW -m tcp -p tcp –dport 80 -j ACCEPT</p><p>-A INPUT -m state –state NEW -m tcp -p tcp –dport 8888 -j ACCEPT</p><p>-A INPUT -m state –state NEW -m tcp -p tcp –dport 6666 -j ACCEPT</p></blockquote><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta"># service iptables restart</span><br></code></pre></td></tr></table></figure><p>》系统启动的方式为自启动</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta"># chkconfig mysql on</span><br><span class="hljs-meta"># chkconfig nginx on</span><br><span class="hljs-meta"># chkconfig tomcat on</span><br></code></pre></td></tr></table></figure><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006y8mN6gy1g7d3llw1nkj30b40b4wee.jpg" srcset="/img/loading.gif" alt="欢迎关注公众号" style="width: 100px" />]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Server</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>CentOS</tag>
      
      <tag>MySQL</tag>
      
      <tag>Server</tag>
      
      <tag>JDK</tag>
      
      <tag>Tomcat</tag>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CentOS 7 安装 Apache, MySQL, PHP 指南</title>
    <link href="/2018/09/11/CentOS-7-%E5%AE%89%E8%A3%85-Apache-MySQL-PHP-%E6%8C%87%E5%8D%97/"/>
    <url>/2018/09/11/CentOS-7-%E5%AE%89%E8%A3%85-Apache-MySQL-PHP-%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<p>一个 LAMP 软件栈通常由多个开源软件组合而成，它们合力驱动一个服务器去运行 web 站点和应用。LAMP 这个术语实际上是一个由 Linux 操作系统，Apache web 服务器，MySQL 数据库服务器，以及 PHP 编程环境组合缩略而成的。</p><p>在这篇指南中，我们将为一个搭载 CentOS 7 操作系统的服务器安装 LAMP 软件栈。CentOS 已经满足了 LAMP 软件栈的第一个需求：一个 Linux 操作系统。</p> <a id="more"></a><p>预备条件</p><p>在继续阅读这篇指南之前，请确认你使用具有 root 权限的用户登录了 CentOS。如果对于当前用户如何取得 root 权限存在疑问，请咨询服务器的管理人员。</p><p>第一步 —— 安装 Apache</p><p>Apache 是目前世界上最广泛使用的 web 服务器，这使得它成为运行网站的绝佳选择。</p><p>利用 CentOS 的软件安装包管理系统 yum，我们可以轻易地安装 Apache。它为我们提供了无痛式地从 CentOS 维护的仓库获取并安装绝大多数软件的方式。你可以前往这里 (<a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-and-use-yum-repositories-on-a-centos-6-vps" target="_blank" rel="noopener">https://www.digitalocean.com/community/tutorials/how-to-set-up-and-use-yum-repositories-on-a-centos-6-vps</a>) 获取更多如何使用 yum 安装包管理系统的指导。</p><p>对于我们的目的而言，安装 Apache 只需要在 CentOS 命令终端敲入这条命令就行了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> sudo yum install httpd</span><br></code></pre></td></tr></table></figure><p>由于使用了 sudo 命令，这些操作将以 root 权限执行。如果当前用户的身份不是 root，CentOS 将会要求你输入当前用户的密码，以验证你的意图。</p><p>不用一会儿，你的 web 服务器就安装好了。</p><p>一旦安装成功，你就可以设置服务器启动时就开启 Apache 服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> sudo systemctl <span class="hljs-built_in">enable</span> httpd.service</span><br></code></pre></td></tr></table></figure><p>你可以通过重新启动服务器，然后在命令行终端中敲入这条命令来验证 Apache 服务是否在服务器启动时自动开启了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> sudo systemctl is-enabled httpd.service</span><br></code></pre></td></tr></table></figure><p>如果你看到了这样的响应：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">enabled<br></code></pre></td></tr></table></figure><p>则说明 Apache 服务已经配置为在服务器启动时自动开启了。</p><p>在服务器上启动 Apache 服务的命令为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash">sudo systemctl start httpd.service</span><br></code></pre></td></tr></table></figure><p>重新启动 Apache：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash">sudo systemctl restart httpd.service</span><br></code></pre></td></tr></table></figure><p>停止 Apache：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash">sudo systemctl stop httpd.service</span><br></code></pre></td></tr></table></figure><p>以及</p><p>如果你的服务器正在运行防火墙，请运行下列命令以允许它进行 HTTP 和 HTTPS 通信：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash">sudo firewall-cmd --permanent --zone=public --add-service=http</span><br><span class="hljs-meta">$</span><span class="bash">sudo firewall-cmd --permanent --zone=public --add-service=https</span><br><span class="hljs-meta">$</span><span class="bash">sudo firewall-cmd --reload</span><br></code></pre></td></tr></table></figure><p>在 Apache 启动的情况下，你可以在浏览器里访问服务器的公网 IP 地址以验证一切如计划那样顺利地进行（如果你现在还不知道如何获取服务器的公网 IP 地址，请参考下一标题中的内容）：</p><p>http://&lt;服务器的公网 IP 地址&gt;/</p><p>你将会看到一个出于通知和测试目的而存在的默认 CentOS 7 Apache 网页。它应该长这样子：</p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymrtia7nj30jv05zaaj.jpg" srcset="/img/loading.gif" alt="img"></p><p>如果你看到了这个页面，那么你的 web 服务器现在已经正确地安装了。</p><p>如何找到服务器的公网 IP 地址</p><p>如果你不知道服务器的公网 IP 地址是什么，你可以使用多种方式找到它。通常情况下，它就是你通过 SSH 用以连接服务器的地址。</p><p>在命令行终端中，你有多种方式找到它。首先，你可以通过下面这条命令，让 iproute2 工具帮你找出服务器的 IP 地址：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> ip addr show eth1 | grep inet | awk <span class="hljs-string">'&#123; print $2; &#125;'</span> | sed <span class="hljs-string">'s/\/.*$//'</span></span><br></code></pre></td></tr></table></figure><p>这将会返回一到两行结果。它们都是正确的 IP 地址，但是你的计算机可能只能使用其中的一条，所以随意试试其中的每一条。</p><p>另一种方法是让一个外部组织告诉你它是怎样找到你的服务器的，你可以通过询问特定的服务器来获知自己的 IP 地址：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> curl http://icanhazip.com</span><br></code></pre></td></tr></table></figure><p>第二步 —— 安装 MySQL</p><p>MySQL 是一个 web 服务器上流行的数据库管理系统。然而，从 CentOS 7 的软件仓库不再提供 MySQL 的安装包，转而提供 MariaDB 作为默认的数据库管理系统。MariaDB 作为 MySQL 的简易替代品，足以胜任通常意义上你对的数据库系统的需求 (<a href="https://mariadb.com/kb/en/mariadb/mariadb-vs-mysql-compatibility/)。你可以前往这里" target="_blank" rel="noopener">https://mariadb.com/kb/en/mariadb/mariadb-vs-mysql-compatibility/)。你可以前往这里</a> (<a href="https://www.linode.com/docs/databases/mariadb/how-to-install-mariadb-on-centos-7" target="_blank" rel="noopener">https://www.linode.com/docs/databases/mariadb/how-to-install-mariadb-on-centos-7</a>) 获取在 CentOS 7 上安装 MariaDB 的指导。</p><p>如果你不论如何都更需要 MySQL 作为 web 服务器上的数据管理系统，那么请继续阅读下面这部分指南，它将指引你如何在运行 CentOS 7 的服务器上安装并配置 MySQL 数据库。</p><p>开始安装 MySQL 之前，请更新系统上的软件到最新版：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> sudo yum update</span><br></code></pre></td></tr></table></figure><p>由于 CentOS 7 的软件仓库不再提供 MySQL 的安装包，我们必须从 MySQL 社区仓库 (<a href="https://dev.mysql.com/downloads/repo/yum/" target="_blank" rel="noopener">https://dev.mysql.com/downloads/repo/yum/</a>) 获取 MySQL 安装包。</p><p>首先，获取 MySQL 社区仓库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> wget http://repo.mysql.com/mysql57-community-release-el7-8.noarch.rpm</span><br></code></pre></td></tr></table></figure><p>载入 MySQL 社区仓库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> sudo yum install mysql57-community-release-el7-8.noarch.rpm</span><br></code></pre></td></tr></table></figure><p>更新系统上的软件到最新版：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> sudo yum update</span><br></code></pre></td></tr></table></figure><p>在更新过程中，你会被询问是否想接受这个 .rpm 文件 GPG 校验得出的结果，如果没有错误或者不匹配出现，请输入 y 以完成更新。</p><p>接着，我们就能一如往常一样安装 MySQL 了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> sudo yum install mysql-server</span><br></code></pre></td></tr></table></figure><p>接下来，请按照这里的指南，重置 MySQL root 账户的密码为你能够记住的密码:</p><p><a href="http://stackoverflow.com/questions/33510184/change-mysql-root-password-on-centos7" target="_blank" rel="noopener">http://stackoverflow.com/questions/33510184/change-mysql-root-password-on-centos7</a></p><p>然后，启动 MySQL 服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> sudo systemctl start mysqld</span><br></code></pre></td></tr></table></figure><p>现在 MySQL 数据库已经开始运行了。我们希望运行一个安全防御脚本，将一些危险的默认配置移除掉，并为我们的数据库系统加上一点安全机制。请在命令行终端里运行下面这一条命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> sudo mysql_secure_installation</span><br></code></pre></td></tr></table></figure><p>命令行终端将会提示你输入 MySQL 内 root 用户的密码。键入上面重置 MySQL root 密码后的新密码。然后，命令行终端将会要求你更新 root 用户的密码。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">Enter current password for root:<br>The existing password for the user account root has expired. Please set a new password.<br>New password:<br>Re-enter new password:<br>The 'validate_password' plugin is installed on the server.<br>The subsequent steps will run with the existing configurationof the plugin.<br>Using existing password for root.<br></code></pre></td></tr></table></figure><p>对于命令行终端接下来给出的选择，你应该敲击 ENTER 键选择忽略修改 root 密码，接着键入 y 同意移除掉出于示例目的而存在的用户，而后键入 y 同意禁用远程登录 root 用户，再次键入 y 同意移除测试数据库，最后键入 y 载入这些新的规则使得 MySQL 立即响应我们做的变更。</p><p>最后，如果希望 MySQL 服务在服务器启动时自动开启，那么你应该使用这一条的命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> sudo systemctl <span class="hljs-built_in">enable</span> mysqld.service</span><br></code></pre></td></tr></table></figure><p>你可以通过重新启动服务器，然后在命令行终端中敲入这条命令来验证MySQL 服务是否在服务器启动时自动开启了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> sudo systemctl is-enabled mysqld.service</span><br></code></pre></td></tr></table></figure><p>如果你看到了这样的响应：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">enabled<br></code></pre></td></tr></table></figure><p>则说明 MySQL 服务已经配置为在服务器启动时自动开启了。</p><p>现在，你的数据库系统已经安装妥当，我们可以继续后面的内容了。</p><p>第三步 —— 安装 PHP</p><p>在我们的 web 软件栈中，PHP 是一个能够处理业务逻辑和数据，并动态生成内容展现给用户的软件。它可以运行脚本，连接到 MySQL 数据库以存取数据，以及将处理过的内容递交给 web 服务器来显示。</p><p>我们可以再次利用 yum 安装包管理系统来安装我们的组件。现在，我们打算将 php-mysql 也加入到我们将要安装的软件序列中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> sudo yum install php php-mysql</span><br></code></pre></td></tr></table></figure><p>这里安装 PHP 应该不会有任何问题。我们需要重新启动 Apache web 服务器以便它能够与 PHP 协作。你可以通过这条命令达到目的：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> sudo systemctl restart httpd.service</span><br></code></pre></td></tr></table></figure><p>安装 PHP 模块</p><p>为了增强 PHP 的功能，我们可以选择性地安装一些额外的模块。</p><p>在命令行终端敲入这条命令，你就可以找到所有可以获取到的 PHP 模块选项和库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> yum search php</span><br></code></pre></td></tr></table></figure><p>响应的结果就是所有你能够选择安装的组件。其中包含了每个可选组件的描述：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">php-bcmath.x86_64 : A module for PHP applications for using the bcmath library<br>php-cli.x86_64 : Command-line interface for PHP<br>php-common.x86_64 : Commonfiles for PHP<br>php-dba.x86_64 : Adatabase abstraction layer module for PHP applications<br>php-devel.x86_64 : Filesneeded for building PHP extensions<br>php-embedded.x86_64 : PHPlibrary for embedding in applications<br>php-enchant.x86_64 : Enchantspelling extension for PHP applications<br>php-fpm.x86_64 : PHPFastCGI Process Manager<br>php-gd.x86_64 : Amodule for PHP applications for using the gd graphics library<br>. . .<br></code></pre></td></tr></table></figure><p>如果需要获取每个模块更多的信息，你可以通过互联网搜索，或者直接在命令行终端中敲入这条命令查看：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> yum info package_name</span><br></code></pre></td></tr></table></figure><p>响应中将会包含许多的信息，其中一个名为 Description 的域包含了这个模块提供的功能更为详尽的描述。</p><p>举个例子，如果要获知 php-fpm 模块的功能，我们只要在命令行终端中敲入下列指令就可以了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> yum info php-fpm</span><br></code></pre></td></tr></table></figure><p>顺着众多其他信息往下看，你将会找到形如这样的信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">. . .<br><br>Summary    : PHPFastCGI Process Manager<br><br>URL            : http://www.php.net/<br><br>License       : PHPand Zend and BSD<br><br>Description : PHP-FPM (FastCGI Process Manager) is an alternative PHP FastCGI<br><br>​                   : implementation with some additional features useful for sites of<br><br>​                   : any size, especially busier sites.<br></code></pre></td></tr></table></figure><p>在考究之后，如果你决定要安装一个模块包，你可以像我们之前安装其他软件时的做法一样，使用 yum install 命令达到目的。</p><p>如果我们决定了 php-fpm 就是我们需要的，那么我们可以在命令行终端键入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> sudo yum install php-fpm</span><br></code></pre></td></tr></table></figure><p>如果你想安装多于 1 个的模块包，你可以在命令行终端中键入 yum install 后，列出你想安装的每个模块包，并使用空格区分，就像下面这样子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> sudo yum install package1 package2…</span><br></code></pre></td></tr></table></figure><p>现在，你的 LAMP 软件栈已经安装并配置妥当了。但我们仍需要测试一下 PHP。</p><p>第四步 —— 测试你 Web 服务器上的 PHP 处理程序</p><p>为了测试系统已经配置得适合 PHP 运行，我们可以创建一个非常简易的 PHP 脚本。</p><p>我们将这个脚本命名为 info.php。为了让 Apache 能够正确地找到并为之服务，它必须保存在一个称为『web 目录』特殊的目录中。</p><p>在 CentOS 7 中，这个目录位于 /var/www/html/。我们可以通过下面这条命令在此创建一个文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> sudo vi /var/www/html/info.php</span><br></code></pre></td></tr></table></figure><p>这将会打开一个空白文件，敲击小写字母 I 即可进行编辑。我们想在文件中输入下列 PHP 代码组成的文本：</p><?php phpinfo(); ?><p>然后，敲击 ESC 键并键入 :wq! 即可保存并关闭这个文件。</p><p>现在我们可以测试 web 服务器是否能够正确地显示由 PHP 脚本生成的内容了。我们可以尝试通过 web 浏览器访问这个页面。你需要再次获取服务器的公网 IP 地址。</p><p>你希望访问的地址就是：</p><p>http://&lt;服务器的公网 IP 地址&gt;/info.php</p><p>你看到的页面应该像下面这样子：</p><p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006tNbRwgy1g9ymru1oojj30jv05zaaj.jpg" srcset="/img/loading.gif" alt="img"></p><p>如果你的浏览器成功地显示了这个页面，那么你的 PHP 就像预期中的那样正常工作了。</p><p>你很可能想要在测试之后移除掉这个文件，因为它事实上可以将服务器的信息展现给未授权的用户。为此，我们需要在命令行终端中键入下面这条命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> sudo rm /var/www/html/info.php</span><br></code></pre></td></tr></table></figure><p>以后若需要，你总能重新创建这个页面来获取这些信息。</p><p>结论</p><p>现在我们已经安装了 LAMP 软件栈，对于下一步需要做什么，你有许多的选择。大体上，你已经安装了一个允许你在服务器上部署各种各样网站和 web 软件的平台。</p><p>参考链接</p><p><a href="https://www.digitalocean.com/community/tutorials/how-to-install-linux-apache-mysql-php-lamp-stack-on-centos-7" target="_blank" rel="noopener">https://www.digitalocean.com/community/tutorials/how-to-install-linux-apache-mysql-php-lamp-stack-on-centos-7</a></p><p><a href="https://www.linode.com/docs/databases/mysql/how-to-install-mysql-on-centos-7" target="_blank" rel="noopener">https://www.linode.com/docs/databases/mysql/how-to-install-mysql-on-centos-7</a></p><p><a href="http://dev.mysql.com/doc/refman/5.7/en/linux-installation-yum-repo.html" target="_blank" rel="noopener">http://dev.mysql.com/doc/refman/5.7/en/linux-installation-yum-repo.html</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Server</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CentOS</tag>
      
      <tag>Apache</tag>
      
      <tag>MySQL</tag>
      
      <tag>PHP</tag>
      
      <tag>Server</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Postgresql 9.4.0-1 x64 win7 解压版安装步骤</title>
    <link href="/2018/09/11/Postgresql-9-4-0-1-x64-win7-%E8%A7%A3%E5%8E%8B%E7%89%88%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A4/"/>
    <url>/2018/09/11/Postgresql-9-4-0-1-x64-win7-%E8%A7%A3%E5%8E%8B%E7%89%88%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A4/</url>
    
    <content type="html"><![CDATA[<p>1、下载</p><blockquote><p>32位：<a href="https://get.enterprisedb.com/postgresql/postgresql-10.2-1-windows-binaries.zip" target="_blank" rel="noopener">https://get.enterprisedb.com/postgresql/postgresql-10.2-1-windows-binaries.zip</a></p><p>64位：<a href="https://get.enterprisedb.com/postgresql/postgresql-10.2-1-windows-x64-binaries.zip" target="_blank" rel="noopener">https://get.enterprisedb.com/postgresql/postgresql-10.2-1-windows-x64-binaries.zip</a></p></blockquote><p>2、解压到：c:\pgsql\</p><a id="more"></a><p>3、设置环境变量(cmd)：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">setx PGHOME c:\pgsql<br>setx PGHOST localhost<br>setx PGLIB %PGHOME%\lib<br>setx PGDATA %PGHOME%\data<br>setx Path %Path%;%PGHOME%\bin<br></code></pre></td></tr></table></figure><p>重新登录</p><p>4、初始化数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">initdb.exe -D c:\pgsql\data -E UTF-8 --locale=chs -U postgres -W<br></code></pre></td></tr></table></figure><p>5、注册为系统服务（以管理员权限打开cmd） </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pg_ctl register -N PostgreSQL -D c:\pgsql\data<br></code></pre></td></tr></table></figure><p>6、修改配置以支持远程连接</p><p>  6.1  notepad c:\pgsql\data\postgresql.conf</p><blockquote><p>listen_addresses = ‘*’ </p></blockquote><p>​    6.2  设置ipv4段  notepad c:\pgsql\data\pg_hba.conf </p><blockquote><p>host    all    all    0.0.0.0/0    md5 </p></blockquote><p>7、启动服务 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">net start PostgreSQL<br></code></pre></td></tr></table></figure><p>8、关闭防火墙（视情况而定） </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">netsh firewall <span class="hljs-built_in">set</span> opmode <span class="hljs-built_in">disable</span><br></code></pre></td></tr></table></figure><p><strong>欢迎关注微信公众号​：</strong></p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006y8mN6gy1g7d3llw1nkj30b40b4wee.jpg" srcset="/img/loading.gif" alt="欢迎关注公众号" style="width: 100px" />]]></content>
    
    
    <categories>
      
      <category>DataBase</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PostgreSQL</tag>
      
      <tag>windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux服务器初始化设置用户和ssh公私钥登陆</title>
    <link href="/2018/09/11/Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%88%9D%E5%A7%8B%E5%8C%96%E8%AE%BE%E7%BD%AE%E7%94%A8%E6%88%B7%E5%92%8Cssh%E5%85%AC%E7%A7%81%E9%92%A5%E7%99%BB%E9%99%86/"/>
    <url>/2018/09/11/Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%88%9D%E5%A7%8B%E5%8C%96%E8%AE%BE%E7%BD%AE%E7%94%A8%E6%88%B7%E5%92%8Cssh%E5%85%AC%E7%A7%81%E9%92%A5%E7%99%BB%E9%99%86/</url>
    
    <content type="html"><![CDATA[<blockquote><p>当我们开始使用一个新的服务器的时候，首先一定要对服务器的登陆等做一些修改工作，笔者曾经就因为对服务器登陆安全没有重视，导致服务器数据全部丢失。接下来我们按照步骤，罗列出应该做的一些事情。 </p></blockquote><h3 id="修改ssh端口号"><a href="#修改ssh端口号" class="headerlink" title="修改ssh端口号"></a>修改ssh端口号</h3><p>第一件事情：</p><p>修改ssh端口号： 之后加上一个端口比如说50000</p><p><code>vi /etc/ssh/sshd_config</code>之后在port字段加上一个端口比如说50000，原来的端口号字段可能是被注释掉的，要先解除注释。</p><p>然后执行：</p><a id="more"></a><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">service sshd restart</span><br></code></pre></td></tr></table></figure><p>这个时候可能还要重新配置一下防火墙，开放50000端口，具体如何配置也可以参考<a href="https://blog.csdn.net/ul646691993/article/details/52104082" target="_blank" rel="noopener">这里</a>的后半部分。但是目前，阿里云的服务器实测是不需要再配置防火墙的，但是需要去登陆到网页后台修改安全组。</p><p>之后就可以通过这样的方式登录了：(注意登录方式一定要写对)</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">ssh <span class="hljs-symbol">root@</span><span class="hljs-number">115.29</span><span class="hljs-number">.102</span><span class="hljs-number">.81</span> -p <span class="hljs-number">50000</span><br></code></pre></td></tr></table></figure><h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><p>这个时候我们还是用root进行操作，所以我们接下来要给自己创建一个账户，比如创建一个如下的用户：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">useradd</span> <span class="hljs-string">xiaotao</span><br><span class="hljs-attr">passwd</span> <span class="hljs-string">xiaotao</span><br></code></pre></td></tr></table></figure><p>可以用`ls -al /home/``查看一下账户</p><p>对创建的这个用户增加sudo权限： 相关配置文件/etc/sudoers中，但是这个文件是只读的，所以要更改一下权限</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-keyword">chmod</span> u+w sudoers<br></code></pre></td></tr></table></figure><p>然后进入这个文件在这里进行更改：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada">root    <span class="hljs-keyword">ALL</span>=(<span class="hljs-keyword">ALL</span>)       <span class="hljs-keyword">ALL</span><br>xiaotao  <span class="hljs-keyword">ALL</span>=(<span class="hljs-keyword">ALL</span>)       <span class="hljs-keyword">ALL</span><br></code></pre></td></tr></table></figure><p>然后再改回权限：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">chmod u-w sudoers</span><br></code></pre></td></tr></table></figure><p>注意一点，CentOS 7预设容许任何帐号透过ssh登入（也就是说自己根本不用改改，直接新建帐号登录即可），包括根和一般帐号，为了不受根帐号被黑客暴力入侵，我们必须禁止 root帐号的ssh功能，事实上root也没有必要ssh登入伺服器，因为只要使用su或sudo（当然需要输入root的密码）普通帐号便可以拥有root的权限。使用vim（或任何文本编辑器）开启的/ etc/ SSH/ sshd_config中，寻找：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">＃PermitRootLogin</span> <span class="hljs-literal">yes</span><br></code></pre></td></tr></table></figure><p>修改：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">PermitRootLogin</span> <span class="hljs-literal">no</span><br></code></pre></td></tr></table></figure><h3 id="配置公私钥加密登录"><a href="#配置公私钥加密登录" class="headerlink" title="配置公私钥加密登录"></a>配置公私钥加密登录</h3><p><strong>这一步骤要切换到自己新建的用户，不能再用 root 用户了，否则可能无法正常登陆。</strong></p><p>很多时候以上所说的还是不够安全，为了更加安全方便，我们采用公私钥对称加密登录，简单的讲做法就是再客户端生成一把私钥一把公钥，私钥是在客户端的，公钥上传到服务端，对称加密进行登录。</p><p>在客户端先进到这个目录：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">cd</span> ~<span class="hljs-string">/.ssh</span><br></code></pre></td></tr></table></figure><p>生成公钥和私钥（实际上如果之前有的话就不用重新生成了）</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">ssh-keygen -t rsa</span><br></code></pre></td></tr></table></figure><p>接下来把公钥上传到服务端</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">scp ~/.ssh/id_rsa.pub <span class="hljs-symbol">xiaotao@<span class="hljs-keyword">&lt;ssh_server_ip&gt;</span></span>:~<br></code></pre></td></tr></table></figure><p>在服务端执行以下命令(如果没有相关的文件和文件夹要先进行创建，注意不要使用 sudo )</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cat  id_rsa.pub &gt;&gt; ～<span class="hljs-regexp">/.ssh/</span>authorized_keys<br></code></pre></td></tr></table></figure><p>配置服务器的/etc/ssh/sshd_config，下面是一些建议的配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">vim</span> <span class="hljs-string">/etc/ssh/sshd_config</span><br><span class="hljs-comment"># 禁用root账户登录，非必要，但为了安全性，请配置</span><br><span class="hljs-string">PermitRootLogin</span> <span class="hljs-literal">no</span><br><br><span class="hljs-comment"># 是否让 sshd 去检查用户家目录或相关档案的权限数据，</span><br><span class="hljs-comment"># 这是为了担心使用者将某些重要档案的权限设错，可能会导致一些问题所致。</span><br><span class="hljs-comment"># 例如使用者的 ~.ssh/ 权限设错时，某些特殊情况下会不许用户登入</span><br><span class="hljs-string">StrictModes</span> <span class="hljs-literal">no</span><br><br><span class="hljs-comment"># 是否允许用户自行使用成对的密钥系统进行登入行为，仅针对 version 2。</span><br><span class="hljs-comment"># 至于自制的公钥数据就放置于用户家目录下的 .ssh/authorized_keys 内</span><br><span class="hljs-string">RSAAuthentication</span> <span class="hljs-literal">yes</span><br><span class="hljs-string">PubkeyAuthentication</span> <span class="hljs-literal">yes</span><br><span class="hljs-string">AuthorizedKeysFile</span>      <span class="hljs-string">%h/.ssh/authorized_keys</span><br><br><span class="hljs-comment">#有了证书登录了，就禁用密码登录吧，安全要紧</span><br><span class="hljs-string">PasswordAuthentication</span> <span class="hljs-literal">no</span><br></code></pre></td></tr></table></figure><p>然后不要忘记 <code>sudo service sshd restart</code></p><p>一般来讲，这样就算是成功了，我们可以在客户端尝试：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">ssh -i ~<span class="hljs-regexp">/.ssh/id</span>_rsa remote_username<span class="hljs-variable">@remote_ip</span><br></code></pre></td></tr></table></figure><p>如果不行，可能是服务端或客户端相关 <code>.ssh</code> 文件权限不对，可以进行如下尝试：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">服务端<br>chown -R <span class="hljs-number">0700</span>  ~/.ssh<br>chown -R <span class="hljs-number">0644</span>  ~/.ssh/authorized_keys<br><br>客户端改一下<br>chmod <span class="hljs-number">600</span> id_rsa<br></code></pre></td></tr></table></figure><p><strong>欢迎关注微信公众号​：</strong></p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006y8mN6gy1g7d3llw1nkj30b40b4wee.jpg" srcset="/img/loading.gif" alt="欢迎关注公众号" style="width: 100px" />]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Server</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CentOS7下安装和配置redis</title>
    <link href="/2018/09/11/CentOS7%E4%B8%8B%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AEredis/"/>
    <url>/2018/09/11/CentOS7%E4%B8%8B%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AEredis/</url>
    
    <content type="html"><![CDATA[<p>Redis是一个高性能的，开源key-value型数据库。是构建高性能，可扩展的Web应用的完美解决方案，可以内存存储亦可持久化存储。因为要使用跨进程，跨服务级别的数据缓存，在对比多个方案后，决定使用Redis。顺便整理下Redis的安装过程，以便查阅。</p><p>1 . 下载Redis<br>目前，最新的Redist版本为3.0，使用wget下载，命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> wget http://download.redis.io/releases/redis-3.0.4.tar.gz</span><br></code></pre></td></tr></table></figure><a id="more"></a><p>2 . 解压Redis<br>下载完成后，使用tar命令解压下载文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> tar -xzvf redis-3.0.4.tar.gz</span><br></code></pre></td></tr></table></figure><p>3 . 编译安装Redis<br>切换至程序目录，并执行make命令编译：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-built_in">cd</span> redis-3.0.4</span><br><span class="hljs-meta">#</span><span class="bash"> make</span><br></code></pre></td></tr></table></figure><p>执行安装命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> make install</span><br></code></pre></td></tr></table></figure><p>make install安装完成后，会在/usr/local/bin目录下生成下面几个可执行文件，它们的作用分别是：</p><ul><li>redis-server：Redis服务器端启动程序</li><li>redis-cli：Redis客户端操作工具。也可以用telnet根据其纯文本协议来操作</li><li>redis-benchmark：Redis性能测试工具</li><li>redis-check-aof：数据修复工具</li><li>redis-check-dump：检查导出工具</li></ul><p>备注</p><p>有的机器会出现类似以下错误：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">make[1]: Entering directory `/root/redis/src'<br>You need tcl 8.5 or newer in order to run the Redis test<br>……<br></code></pre></td></tr></table></figure><p>这是因为没有安装tcl导致，yum安装即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install tcl<br></code></pre></td></tr></table></figure><p>4 . 配置Redis<br>复制配置文件到/etc/目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> cp redis.conf /etc/</span><br></code></pre></td></tr></table></figure><p>为了让Redis后台运行，一般还需要修改redis.conf文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vi /etc/redis.conf<br></code></pre></td></tr></table></figure><p>修改daemonize配置项为yes，使Redis进程在后台运行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">daemonize yes<br></code></pre></td></tr></table></figure><p>5 . 启动Redis<br>配置完成后，启动Redis：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-built_in">cd</span> /usr/<span class="hljs-built_in">local</span>/bin</span><br><span class="hljs-meta">#</span><span class="bash"> ./redis-server /etc/redis.conf</span><br></code></pre></td></tr></table></figure><p>检查启动情况：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> ps -ef | grep redis</span><br></code></pre></td></tr></table></figure><p>看到类似下面的一行，表示启动成功：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">root     18443     1  0 13:05 ?        00:00:00 ./redis-server *:6379<br></code></pre></td></tr></table></figure><p>6 . 添加开机启动项<br>让Redis开机运行可以将其添加到rc.local文件，也可将添加为系统服务service。本文使用rc.local的方式，添加service请参考：Redis 配置为 Service 系统服务 。</p><p>为了能让Redis在服务器重启后自动启动，需要将启动命令写入开机启动项：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo "/usr/local/bin/redis-server /etc/redis.conf" &gt;&gt;/etc/rc.local<br></code></pre></td></tr></table></figure><p>7 . Redis配置参数<br>在 前面的操作中，我们用到了使Redis进程在后台运行的参数，下面介绍其它一些常用的Redis启动参数：</p><blockquote><p>daemonize：是否以后台daemon方式运行<br>pidfile：pid文件位置<br>port：监听的端口号<br>timeout：请求超时时间<br>loglevel：log信息级别<br>logfile：log文件位置<br>databases：开启数据库的数量<br>save * <em>：保存快照的频率，第一个</em>表示多长时间，第三个*表示执行多少次写操作。在一定时间内执行一定数量的写操作时，自动保存快照。可设置多个条件。<br>rdbcompression：是否使用压缩<br>dbfilename：数据快照文件名（只是文件名）<br>dir：数据快照的保存目录（仅目录）<br>appendonly：是否开启appendonlylog，开启的话每次写操作会记一条log，这会提高数据抗风险能力，但影响效率。<br>appendfsync：appendonlylog如何同步到磁盘。三个选项，分别是每次写都强制调用fsync、每秒启用一次fsync、不调用fsync等待系统自己同步</p></blockquote><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006y8mN6gy1g7d3llw1nkj30b40b4wee.jpg" srcset="/img/loading.gif" alt="欢迎关注公众号" style="width: 100px" />]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Server</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Redis</tag>
      
      <tag>CentOS</tag>
      
      <tag>Server</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CentOS安装node8.x版本</title>
    <link href="/2018/09/11/CentOS%E5%AE%89%E8%A3%85node8-x%E7%89%88%E6%9C%AC/"/>
    <url>/2018/09/11/CentOS%E5%AE%89%E8%A3%85node8-x%E7%89%88%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<p>由于一些原因需要给CentOS服务器安装8.0以上版本的node, 本来直接通过yum管理安装管理，但是没找到好办法，在此记录一下自己最后使用的简单过程：</p><p>安装之前删除原来的node和npm (我原来是用yum安装的，如果是第一次安装可以省略这一步):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum remove nodejs npm -y<br></code></pre></td></tr></table></figure><a id="more"></a><p>首先我们随便进入服务器的一个目录，然后从淘宝的源拉取内容: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://npm.taobao.org/mirrors/node/v8.0.0/node-v8.0.0-linux-x64.tar.xz<br></code></pre></td></tr></table></figure><p>解压缩: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo tar -xvf node-v8.0.0-linux-x64.tar.xz<br></code></pre></td></tr></table></figure><p>进入解压目录下的 bin 目录，执行 ls 命令 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> node-v8.0.0-linux-x64/bin &amp;&amp; ls<br></code></pre></td></tr></table></figure><p>我们发现有node 和 npm</p><p>这个时候我们测试:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./node -v<br></code></pre></td></tr></table></figure><p>这个时候我们发现实际上已经安装好了，接下来就是要建立链接文件。</p><p>这里还是，如果我们之前已经安装过了，那么我们要先删除之前建立的链接文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo rm -rf /usr/bin/node<br>sudo rm -rf /usr/bin/npm<br></code></pre></td></tr></table></figure><p>然后建立链接文件: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo ln -s /usr/share/node-v8.0.0-linux-x64/bin/node /usr/bin/node<br>sudo ln -s /usr/share/node-v8.0.0-linux-x64/bin/npm /usr/bin/npm<br></code></pre></td></tr></table></figure><p>注意这里的第一个路径不要直接复制粘贴，要写当前文件的真正的路径，这个可以通过pwd获取。</p><p>然后我们可以通过<code>node -v</code>等测试已经安装成功。</p><img src="https://github.com/alterem/picFB/raw/master/pics/2020/04/07/006y8mN6gy1g7d3llw1nkj30b40b4wee.jpg" srcset="/img/loading.gif" alt="欢迎关注公众号" style="width: 100px" />]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Server</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>CentOS</tag>
      
      <tag>Server</tag>
      
      <tag>NodeJS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Eclipse中常用的操作单词</title>
    <link href="/2018/09/11/Eclipse%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E6%93%8D%E4%BD%9C%E5%8D%95%E8%AF%8D/"/>
    <url>/2018/09/11/Eclipse%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E6%93%8D%E4%BD%9C%E5%8D%95%E8%AF%8D/</url>
    
    <content type="html"><![CDATA[<table><thead><tr><th>Existing Project   into Workspace</th><th>现有的工程引入工作空间(加载工程)</th></tr></thead><tbody><tr><td>File</td><td>文件</td></tr><tr><td>New</td><td>新建</td></tr><tr><td>Project</td><td>工程</td></tr><tr><td>Folder</td><td>文件夹</td></tr><tr><td>Import</td><td>引入(加载&amp;导入)</td></tr><tr><td>Run As</td><td>运行</td></tr><tr><td>Application</td><td>应用程序</td></tr><tr><td>copy</td><td>复制</td></tr><tr><td>paste</td><td>粘贴</td></tr><tr><td>Delete</td><td>删除</td></tr><tr><td>properties</td><td>属性</td></tr><tr><td>Java Build Path</td><td>建立java路径</td></tr><tr><td>Libraries</td><td>库</td></tr><tr><td>Add Library</td><td>添加库</td></tr><tr><td>User Library</td><td>用户库</td></tr><tr><td>Next</td><td>下一步</td></tr><tr><td>User Libraries</td><td>用户库</td></tr><tr><td>New</td><td>新建</td></tr><tr><td>JDBC-ODBC</td><td>桥</td></tr></tbody></table><a id="more"></a><table><thead><tr><th>需掌握的单词</th><th></th></tr></thead><tbody><tr><td>overload</td><td>重载</td></tr><tr><td>override</td><td>重写(覆盖)</td></tr></tbody></table><table><thead><tr><th>程序编写时常用的单词</th><th></th></tr></thead><tbody><tr><td>package</td><td>指定文件夹</td></tr><tr><td>class</td><td>类</td></tr><tr><td>static</td><td>静态类型</td></tr><tr><td>TRUE</td><td>真</td></tr><tr><td>FALSE</td><td>假</td></tr><tr><td>String</td><td>字符串对象(也是一种数据类型)</td></tr><tr><td>extends</td><td>继承</td></tr><tr><td>this</td><td>当前对象引用</td></tr><tr><td>super</td><td>父类对象引用</td></tr><tr><td>Math.random()</td><td>随机数</td></tr><tr><td>interface</td><td>接口</td></tr><tr><td>implements</td><td>继承接口</td></tr><tr><td>throw</td><td>抛出</td></tr><tr><td>throws</td><td>抛出</td></tr><tr><td>try</td><td>尝试</td></tr><tr><td>catch</td><td>捕获</td></tr><tr><td>Exception</td><td>异常</td></tr><tr><td>Separator</td><td>分割线</td></tr></tbody></table><p>基本数据类型(返回值类型中的一部分) </p><table><thead><tr><th>英文</th><th>类型</th><th>默认值</th><th align="center">封装类</th></tr></thead><tbody><tr><td>byte</td><td>字节型</td><td>0b</td><td align="center">Byte</td></tr><tr><td>char</td><td>字符型</td><td>‘\u0000’</td><td align="center">Character</td></tr><tr><td>short</td><td>短整型</td><td>0</td><td align="center">Short</td></tr><tr><td>int</td><td>整型</td><td>0</td><td align="center">Integer</td></tr><tr><td>long</td><td>长整型</td><td>0</td><td align="center">Long</td></tr><tr><td>float</td><td>单精度浮点型</td><td>0.0f</td><td align="center">Float</td></tr><tr><td>double</td><td>双精度浮点型</td><td>0</td><td align="center">Double</td></tr><tr><td>boolean</td><td>布尔型</td><td>flase</td><td align="center">Boolean</td></tr><tr><td>String</td><td>字符串</td><td>null</td><td align="center">String</td></tr></tbody></table><table><thead><tr><th>访问控制修饰符</th><th></th></tr></thead><tbody><tr><td>public</td><td>公有的</td></tr><tr><td>protected</td><td>公共的(保护的)</td></tr><tr><td>private</td><td>私有的</td></tr></tbody></table><table><thead><tr><th>类修饰符</th><th></th></tr></thead><tbody><tr><td>final</td><td>最终</td></tr><tr><td>new</td><td>新的</td></tr><tr><td>abstract</td><td>抽象</td></tr><tr><td>finally</td><td>最终的</td></tr></tbody></table><table><thead><tr><th>逻辑关键字</th><th></th></tr></thead><tbody><tr><td>if</td><td>如果</td></tr><tr><td>else</td><td>否则</td></tr><tr><td>switch</td><td>开关</td></tr><tr><td>case</td><td>事件</td></tr><tr><td>default</td><td>默认</td></tr><tr><td>for</td><td>(循环)</td></tr><tr><td>while</td><td>(循环)</td></tr><tr><td>do-while</td><td>(循环)</td></tr><tr><td>continue</td><td>继续</td></tr><tr><td>break</td><td>打破</td></tr></tbody></table><table><thead><tr><th>类</th><th></th></tr></thead><tbody><tr><td>ArrayList</td><td>数组集合</td></tr><tr><td>add(Object);</td><td>添加数据</td></tr><tr><td>get(int);</td><td>获得数据</td></tr><tr><td>Thread</td><td>线程</td></tr><tr><td>Runnable</td><td>可捕获的</td></tr></tbody></table><table><thead><tr><th>控制数据库常用</th><th></th></tr></thead><tbody><tr><td>Class.forName</td><td>加载数据库驱动程序</td></tr><tr><td>Connection</td><td>数据库连接对象</td></tr><tr><td>Statement</td><td>数据库操纵对象</td></tr><tr><td>ResultSet</td><td>数据库结果集对象</td></tr><tr><td>close</td><td>关闭</td></tr><tr><td>DriverManager</td><td>驱动管理器</td></tr><tr><td>localhost</td><td>本地主机</td></tr><tr><td>executeQuery</td><td>执行命令</td></tr><tr><td>executeUpdate</td><td>执行更新</td></tr><tr><td>SQLException</td><td>SQL数据库异常</td></tr><tr><td>ClassNotFoundException</td><td>类没有被找到异常</td></tr><tr><td>view</td><td>视图</td></tr><tr><td>trigger</td><td>触发器</td></tr><tr><td>proc</td><td>存储过程</td></tr><tr><td>removeAll</td><td>移除所有</td></tr><tr><td>rs.first()</td><td>游标移动到第一条记录</td></tr><tr><td>rs.last()</td><td>游标移动到最后一条记录</td></tr><tr><td>rs.getRow()</td><td>获得当前的行号</td></tr><tr><td>rs.absolute(i)</td><td>定位游标</td></tr><tr><td>top</td><td>最前</td></tr><tr><td>JavaBean</td><td>存放数据</td></tr></tbody></table><table><thead><tr><th>窗体</th><th></th><th></th></tr></thead><tbody><tr><td>show</td><td>展示</td><td></td></tr><tr><td>this.setTitle</td><td>设置标题</td><td></td></tr><tr><td>this.setSize(500,400);</td><td>窗体大小</td><td></td></tr><tr><td>this.setLocation(260,150);</td><td>窗体初始位置</td><td></td></tr><tr><td>this.show();</td><td>显示窗体</td><td></td></tr><tr><td>this.setLocationRelativeTo(null);</td><td>居中</td><td></td></tr><tr><td>this.setDefaultCloseOperation(3);</td><td>关闭按扭起作用</td><td></td></tr><tr><td>this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</td><td>关闭按扭起作用</td><td></td></tr><tr><td>JLabel lbl = new JLabel(new   ImageIcon(“1.gif”));</td><td>图片标签</td><td></td></tr><tr><td>getContentPane</td><td>获得窗体的内部窗格</td><td></td></tr><tr><td>setBackground(Color.BLUE)</td><td>设置背景颜色</td><td></td></tr><tr><td>setResizable()</td><td>设置是否能最大化()内</td><td>填true或false</td></tr><tr><td>setAlwaysOnTop()</td><td>窗口在最顶端()内</td><td>填true或false</td></tr><tr><td>Font</td><td>字体</td><td></td></tr><tr><td>showMessageDialog</td><td>弹出对话框</td><td></td></tr><tr><td>append</td><td>追加</td><td></td></tr><tr><td>valueChanged</td><td>改变数值</td><td></td></tr><tr><td>requestFocus</td><td>获得焦点</td><td></td></tr><tr><td>selectAll</td><td>全选</td><td></td></tr><tr><td>setText</td><td>设置文本域内容</td><td></td></tr><tr><td>getText</td><td>获得文本域内容</td><td></td></tr><tr><td>setEnabled()</td><td>设置控件是否可用()内</td><td>填true或false</td></tr><tr><td>setAccelerator</td><td>设置加速器</td><td></td></tr><tr><td>KeyStroke</td><td>敲击键盘</td><td></td></tr><tr><td>getKeyStroke</td><td>获得所敲击的键盘</td><td></td></tr><tr><td>InputEvent</td><td>输入事件</td><td></td></tr><tr><td>getDocument</td><td>获得文件</td><td></td></tr><tr><td>addUndoableEditListener</td><td>添加撤销监听器</td><td></td></tr><tr><td>SimpleDateFormat</td><td>简易日期格式</td><td></td></tr><tr><td>setLineWrap</td><td>设置行距</td><td></td></tr><tr><td>addEdit</td><td>添加编辑</td><td></td></tr><tr><td>getEdit</td><td>获得编辑</td><td></td></tr><tr><td>setBorder</td><td>设置边框</td><td></td></tr><tr><td>Factory</td><td>工厂</td><td></td></tr><tr><td>createTitledBorder</td><td>创建标题边框</td><td></td></tr><tr><td>setVisible()</td><td>设置视窗是否隐藏()内</td><td>填true或false</td></tr><tr><td>setCursor</td><td>设置指针</td><td></td></tr><tr><td>isPopupTrigger</td><td>确定点鼠标击右键</td><td></td></tr><tr><td>getSelectedValue</td><td>获得选中的值</td><td></td></tr><tr><td>toString</td><td>返回字符串</td><td></td></tr><tr><td>insertIcon</td><td>插入图标</td><td></td></tr><tr><td>getActionCommand</td><td>获得动作命令</td><td></td></tr><tr><td>getKeyCode</td><td>获得键盘码</td><td></td></tr><tr><td>KeyEvent.VK_RIGHT</td><td>键盘事件.右箭头</td><td></td></tr><tr><td>getIcon</td><td>获得标签</td><td></td></tr><tr><td>setIcon</td><td>设置标签</td><td></td></tr><tr><td>getSource</td><td>获得所选</td><td></td></tr><tr><td>charAt()</td><td>查找指定下标所对应的字符</td><td></td></tr><tr><td>indexOf()</td><td>查找某一字符串，首次出现的位置(从前向后)</td><td></td></tr><tr><td>lastIndexOf()</td><td>查找某一字符串，首次出现的位置(从后向前)</td><td></td></tr><tr><td>length()</td><td>返回字符串长度</td><td></td></tr><tr><td>equals()</td><td>比较两个字符串</td><td></td></tr><tr><td>toUpperCase()</td><td>转为大写</td><td></td></tr><tr><td>toLowerCase()</td><td>转为小写</td><td></td></tr><tr><td>split()</td><td>分割字符串</td><td></td></tr><tr><td>replace()</td><td>替换</td><td></td></tr><tr><td>.addRow(Object[])</td><td>添加一条记录</td><td></td></tr><tr><td>setRowCount(0)</td><td>清空表模型</td><td></td></tr><tr><td>repaint</td><td>重绘</td><td></td></tr><tr><td>ComboBox.getSelectedItem</td><td>获得下拉框所选择的内容</td><td></td></tr><tr><td>ComboBox.addItem(rs.getString(1))</td><td>重新添加下拉框内容</td><td></td></tr><tr><td>g.setColor(Color.RED)</td><td>设置画笔颜色</td><td></td></tr><tr><td>g.setFont(new   Font(“隶书”,Font.BOLD,30))</td><td>设置画笔字体</td><td></td></tr><tr><td>g.drawString(“早晨好”,100,200)</td><td>画字符串</td><td></td></tr><tr><td>g.drawLine(100,100,500,500)</td><td>画线</td><td></td></tr><tr><td>g.drawOval(200,200,300,150)</td><td>画椭圆</td><td></td></tr><tr><td>g.fillOval(200,200,300,150)</td><td>填充椭圆</td><td></td></tr><tr><td>g.drawRect(200,200,300,150)</td><td>画矩形</td><td></td></tr><tr><td>this.setUndecorated(true)</td><td>去除窗体边框</td><td></td></tr><tr><td>Thread.currentThread()</td><td>获得当前正在运行的线程</td><td></td></tr><tr><td>Graphics</td><td>画笔</td><td></td></tr><tr><td>t.suspend()</td><td>线程挂起</td><td></td></tr><tr><td>t.resume()</td><td>恢复线程</td><td></td></tr></tbody></table><table><thead><tr><th>布局</th><th></th></tr></thead><tbody><tr><td>FlowLayout</td><td>流式布局</td></tr><tr><td>LEFT</td><td>左</td></tr><tr><td>RIGHT</td><td>右</td></tr><tr><td>BorderLayout</td><td>边界布局</td></tr><tr><td>EAST</td><td>东</td></tr><tr><td>SOUTH</td><td>南</td></tr><tr><td>WEST</td><td>西</td></tr><tr><td>NORTH</td><td>北</td></tr><tr><td>CENTER</td><td>中</td></tr><tr><td>GridLayout</td><td>网格部局</td></tr></tbody></table><table><thead><tr><th>(选择记忆)</th><th></th></tr></thead><tbody><tr><td>Container</td><td>容器</td></tr><tr><td>JPanel</td><td>面板</td></tr><tr><td>JFrame</td><td>窗体</td></tr><tr><td>JButton</td><td>按扭</td></tr><tr><td>JLabel</td><td>标签</td></tr><tr><td>JTextField</td><td>文本域(单行的文本框)</td></tr><tr><td>JTextArea</td><td>文本区</td></tr><tr><td>JPasswordField</td><td>密码域</td></tr><tr><td>ButtonGroup</td><td>按扭组(单选)</td></tr><tr><td>JRadioButton</td><td>单选按扭</td></tr><tr><td>JCheckBox</td><td>多选按扭</td></tr><tr><td>JComboBox</td><td>下拉框</td></tr><tr><td>JList</td><td>下拉列表</td></tr><tr><td>ImageIcon</td><td>图片</td></tr><tr><td>JMenuBar</td><td>菜单工具栏</td></tr><tr><td>JMenu</td><td>菜单项</td></tr><tr><td>JMenuItem</td><td>子菜单项</td></tr><tr><td>JCheckBoxMenuItem</td><td>多选按钮菜单工具栏</td></tr><tr><td>JRadioButtonMenuItem</td><td>单选按钮菜单工具栏</td></tr><tr><td>JScrollPane</td><td>滚动面板</td></tr><tr><td>JTextPane</td><td>文本面板</td></tr><tr><td>JPopupMenu</td><td>弹出菜单</td></tr><tr><td>JProgressBar</td><td>进度条</td></tr><tr><td>DefaultTableModel</td><td>默认的表模型</td></tr><tr><td>JTable</td><td>表格</td></tr><tr><td>ActionListener</td><td>监听器</td></tr><tr><td>ActionEvent</td><td>动作事件</td></tr><tr><td>actionPerformed</td><td>动作演示</td></tr><tr><td>KeyListener</td><td>键盘监听器</td></tr><tr><td>KeyEvent</td><td>键盘事件</td></tr><tr><td>keyPressed</td><td>按下键盘</td></tr><tr><td>keyReleased</td><td>释放键盘</td></tr><tr><td>keyTyped</td><td>点击键盘</td></tr><tr><td>MouseListener</td><td>鼠标监听器</td></tr><tr><td>MouseEvent</td><td>鼠标事件</td></tr><tr><td>mouseClicked</td><td>鼠标单击事件</td></tr><tr><td>mouseEntered</td><td>鼠标移入事件</td></tr><tr><td>mouseExited</td><td>鼠标离开事件</td></tr><tr><td>mousePressed</td><td>按下鼠标事件</td></tr><tr><td>mouseReleased</td><td>释放鼠标事件</td></tr><tr><td>MouseMotionListener</td><td>鼠标监听器</td></tr><tr><td>mouseDragged</td><td>拖拽鼠标</td></tr><tr><td>mouseMoved</td><td>移动鼠标</td></tr><tr><td>ListSelectionListener</td><td>下拉列表监听器</td></tr><tr><td>ListSelectionEvent</td><td>下拉列表选择事件</td></tr><tr><td>JOptionPane</td><td>有选项的面板</td></tr><tr><td>UndoableEditListener</td><td>撤消监听器</td></tr><tr><td>UndoableEditEvent</td><td>撤消事件</td></tr><tr><td>undoableEditHappened</td><td>撤消</td></tr></tbody></table><table><thead><tr><th>包</th></tr></thead><tbody><tr><td>java.awt.*;</td></tr><tr><td>java.lang.*;</td></tr><tr><td>java.util.*;</td></tr><tr><td>java.text.*;</td></tr><tr><td>javax.swing.*;</td></tr><tr><td>java.awt.event.*;</td></tr><tr><td>import java.sql.*;</td></tr><tr><td>javax.swing.undo.*;</td></tr><tr><td>java.swing.table.*;</td></tr><tr><td>javax.swing.event.*;</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Eclipse</tag>
      
      <tag>单词</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
